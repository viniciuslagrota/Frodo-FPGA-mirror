/*
 * frodo_main.c

 *
 *  Created on: 25 de nov de 2019
 *      Author: Vinicius
 */

#include "global_def.h"
#include "fips202.h"

static enum keccakType
{
	KECCAK_SW,
	KECCAK_HW,
	KECCAK_HW_MM
} keccakStatePermuteType = KECCAK_SW;

void matrix_SA_mult(uint32_t * S, uint32_t * A, uint32_t * B)
{
	#define REPEAT		3

	print_debug(DEBUG_MATRIX_MM, "[MATRIX] Matrix init\n");

	//Variables
	int i;
	u32 readGpio = 0x0;

	//Set start pin high
	XGpio_DiscreteWrite(&axiStartBusyMatrix, 1, 0x1); // Start gpio set high

	for(j = 0; j < REPEAT; j++)
	{
		//Sending data S
		for(i = 0; i < 16; i++)
		{
			memoryMatrixS[i] = S[i];
	//		print_debug(DEBUG_MATRIX_MM, "\tSent data S[%d]: 0x%lx\n", i, S[i]);
		}

		//Sending data A
		for(i = 0; i < 1280; i++)
		{
			memoryMatrixA[i] = A[i];
	//		print_debug(DEBUG_MATRIX_MM, "\tSent data A[%d]: 0x%lx\n", i, A[i]);
		}

		//Reading busy bit
		readGpio = XGpio_DiscreteRead(&axiStartBusyMatrix, 1); //Check done pin
		while(readGpio == 0x1)
		{
			readGpio = XGpio_DiscreteRead(&axiStartBusyMatrix, 1);
		}
		print_debug(DEBUG_MATRIX_MM, "[MATRIX] Busy bit low!\n");

		//Interpret data
		for (i = 0; i < 2560; i++)
		{
			B[i] = memoryMatrixB[i];
			if(i < 20 || i > 2500)
				print_debug(DEBUG_MATRIX_MM, "\tB[%d]: 0x%lx\n", i, B[i]);
		}
	}

	//Set start pin low
	XGpio_DiscreteWrite(&axiStartBusyMatrix, 1, 0x0); // Start gpio set low

}

void KeccakF1600_StatePermute(uint64_t * state)
{
	switch(keccakStatePermuteType)
	{
		case KECCAK_SW:
		{
			KeccakF1600_StatePermute_SW(state);
			break;
		}
		case KECCAK_HW:
		{
			KeccakF1600_StatePermute_HW(state);
			break;
		}
		case KECCAK_HW_MM:
		{
			KeccakF1600_StatePermute_HW_MM(state);
			break;
		}
	}
}

unsigned int get_cyclecount (void)
{
	unsigned int value;
	// Read CCNT Register
	asm volatile ("MRC p15, 0, %0, c9, c13, 0\t\n": "=r"(value));
	return value;
}

void init_perfcounters (int32_t do_reset, int32_t enable_divider)
{
	// in general enable all counters (including cycle counter)
	int32_t value = 1;

	// peform reset:
	if (do_reset)
	{
		value |= 2;     // reset all counters to zero.
		value |= 4;     // reset cycle counter to zero.
	}

	if (enable_divider)
		value |= 8;     // enable "by 64" divider for CCNT.

	value |= 16;

	// program the performance-counter control-register:
	asm volatile ("MCR p15, 0, %0, c9, c12, 0\t\n" :: "r"(value));

	// enable all counters:
	asm volatile ("MCR p15, 0, %0, c9, c12, 1\t\n" :: "r"(0x8000000f));

	// clear overflows:
	asm volatile ("MCR p15, 0, %0, c9, c12, 3\t\n" :: "r"(0x8000000f));
}

int kem_test(const char *named_parameters, int iterations)
{
	// CDF table
//	uint16_t CDF_TABLE[13] = {4643, 13363, 20579, 25843, 29227, 31145, 32103, 32525, 32689, 32745, 32762, 32766, 32767};
//	uint16_t CDF_TABLE_LEN = 13;

	// measure the counting overhead:
	unsigned int overhead = get_cyclecount();
	overhead = get_cyclecount() - overhead;

	volatile unsigned int t_keypair_sw = 0, t_enc_sw = 0, t_dec_sw = 0, t_total_sw = 0;
	volatile unsigned int t_keypair_hw = 0, t_enc_hw = 0, t_dec_hw = 0, t_total_hw = 0;
	volatile unsigned int t_keypair_hw_mm = 0, t_enc_hw_mm = 0, t_dec_hw_mm = 0, t_total_hw_mm = 0;

	/* enable user-mode access to the performance counter*/
	asm ("MCR p15, 0, %0, C9, C14, 0\n\t" :: "r"(1));

	/* disable counter overflow interrupts (just in case)*/
	asm ("MCR p15, 0, %0, C9, C14, 2\n\t" :: "r"(0x8000000f));

	// init counters:
	init_perfcounters (1, 0);

#if ENABLE_KECCAK_DEBUG
	// ------ Test keccak_function ------
	u64 state[25] = { 0 };
	state[0] = 0x000000000000001f;
	state[20] = 0x8000000000000000;
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Initializing Hardware function test\n");
	printStateMatrixDebug(state);
	unsigned int t;
	t = get_cyclecount();
	KeccakF1600_StatePermute_HW(state);
	t = get_cyclecount() - t;
	printStateMatrixDebug(state);
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Hardware function took exactly %d cycles or %d us (including function call)\n\n", t - overhead, (t - overhead)/666);

	u64 state2[25] = { 0 };
	state2[0] = 0x000000000000001f;
	state2[20] = 0x8000000000000000;
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Initializing Software function test\n");
	printStateMatrixDebug(state2);
	t = get_cyclecount();
	KeccakF1600_StatePermute_SW(state2);
	t = get_cyclecount() - t;
	printStateMatrixDebug(state2);
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Software function took exactly %d cycles or %d us (including function call)\n\n", t - overhead, (t - overhead)/666);

	u64 state3[25] = { 0 };
	state3[0] = 0x000000000000001f;
	state3[20] = 0x8000000000000000;
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Initializing Hardware Memory-Mapped function test\n");
	printStateMatrixDebug(state3);
	t = get_cyclecount();
	KeccakF1600_StatePermute_HW_MM(state3);
	t = get_cyclecount() - t;
	printStateMatrixDebug(state3);
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Hardware Memory-Mapped function took exactly %d cycles or %d us (including function call)\n\n", t - overhead, (t - overhead)/666);

	u32 S[16] = {0x00010003, 0x00050007, 0x0009000B, 0x000D000F, 0x00110013, 0x00150017, 0x0019001B, 0x001D001F, 0x00210023, 0x00250027, 0x0029002B, 0x002D002F, 0x00310033, 0x00350037, 0x0039003B, 0x003D003F};
	u32 A[1280] = {0x00010002, 0x00030004, 0x00050006, 0x00070008, 0x0009000A, 0x000B000C, 0x000D000E, 0x000F0010, 0x00110012, 0x00130014, 0x00150016, 0x00170018, 0x0019001A, 0x001B001C, 0x001D001E, 0x001F0020, 0x00210022, 0x00230024, 0x00250026, 0x00270028, 0x0029002A, 0x002B002C, 0x002D002E, 0x002F0030, 0x00310032, 0x00330034, 0x00350036, 0x00370038, 0x0039003A, 0x003B003C, 0x003D003E, 0x003F0040, 0x00410042, 0x00430044, 0x00450046, 0x00470048, 0x0049004A, 0x004B004C, 0x004D004E, 0x004F0050, 0x00510052, 0x00530054, 0x00550056, 0x00570058, 0x0059005A, 0x005B005C, 0x005D005E, 0x005F0060, 0x00610062, 0x00630064, 0x00650066, 0x00670068, 0x0069006A, 0x006B006C, 0x006D006E, 0x006F0070, 0x00710072, 0x00730074, 0x00750076, 0x00770078, 0x0079007A, 0x007B007C, 0x007D007E, 0x007F0080, 0x00810082, 0x00830084, 0x00850086, 0x00870088, 0x0089008A, 0x008B008C, 0x008D008E, 0x008F0090, 0x00910092, 0x00930094, 0x00950096, 0x00970098, 0x0099009A, 0x009B009C, 0x009D009E, 0x009F00A0, 0x00A100A2, 0x00A300A4, 0x00A500A6, 0x00A700A8, 0x00A900AA, 0x00AB00AC, 0x00AD00AE, 0x00AF00B0, 0x00B100B2, 0x00B300B4, 0x00B500B6, 0x00B700B8, 0x00B900BA, 0x00BB00BC, 0x00BD00BE, 0x00BF00C0, 0x00C100C2, 0x00C300C4, 0x00C500C6, 0x00C700C8, 0x00C900CA, 0x00CB00CC, 0x00CD00CE, 0x00CF00D0, 0x00D100D2, 0x00D300D4, 0x00D500D6, 0x00D700D8, 0x00D900DA, 0x00DB00DC, 0x00DD00DE, 0x00DF00E0, 0x00E100E2, 0x00E300E4, 0x00E500E6, 0x00E700E8, 0x00E900EA, 0x00EB00EC, 0x00ED00EE, 0x00EF00F0, 0x00F100F2, 0x00F300F4, 0x00F500F6, 0x00F700F8, 0x00F900FA, 0x00FB00FC, 0x00FD00FE, 0x00FF0100, 0x01010102, 0x01030104, 0x01050106, 0x01070108, 0x0109010A, 0x010B010C, 0x010D010E, 0x010F0110, 0x01110112, 0x01130114, 0x01150116, 0x01170118, 0x0119011A, 0x011B011C, 0x011D011E, 0x011F0120, 0x01210122, 0x01230124, 0x01250126, 0x01270128, 0x0129012A, 0x012B012C, 0x012D012E, 0x012F0130, 0x01310132, 0x01330134, 0x01350136, 0x01370138, 0x0139013A, 0x013B013C, 0x013D013E, 0x013F0140, 0x01410142, 0x01430144, 0x01450146, 0x01470148, 0x0149014A, 0x014B014C, 0x014D014E, 0x014F0150, 0x01510152, 0x01530154, 0x01550156, 0x01570158, 0x0159015A, 0x015B015C, 0x015D015E, 0x015F0160, 0x01610162, 0x01630164, 0x01650166, 0x01670168, 0x0169016A, 0x016B016C, 0x016D016E, 0x016F0170, 0x01710172, 0x01730174, 0x01750176, 0x01770178, 0x0179017A, 0x017B017C, 0x017D017E, 0x017F0180, 0x01810182, 0x01830184, 0x01850186, 0x01870188, 0x0189018A, 0x018B018C, 0x018D018E, 0x018F0190, 0x01910192, 0x01930194, 0x01950196, 0x01970198, 0x0199019A, 0x019B019C, 0x019D019E, 0x019F01A0, 0x01A101A2, 0x01A301A4, 0x01A501A6, 0x01A701A8, 0x01A901AA, 0x01AB01AC, 0x01AD01AE, 0x01AF01B0, 0x01B101B2, 0x01B301B4, 0x01B501B6, 0x01B701B8, 0x01B901BA, 0x01BB01BC, 0x01BD01BE, 0x01BF01C0, 0x01C101C2, 0x01C301C4, 0x01C501C6, 0x01C701C8, 0x01C901CA, 0x01CB01CC, 0x01CD01CE, 0x01CF01D0, 0x01D101D2, 0x01D301D4, 0x01D501D6, 0x01D701D8, 0x01D901DA, 0x01DB01DC, 0x01DD01DE, 0x01DF01E0, 0x01E101E2, 0x01E301E4, 0x01E501E6, 0x01E701E8, 0x01E901EA, 0x01EB01EC, 0x01ED01EE, 0x01EF01F0, 0x01F101F2, 0x01F301F4, 0x01F501F6, 0x01F701F8, 0x01F901FA, 0x01FB01FC, 0x01FD01FE, 0x01FF0200, 0x02010202, 0x02030204, 0x02050206, 0x02070208, 0x0209020A, 0x020B020C, 0x020D020E, 0x020F0210, 0x02110212, 0x02130214, 0x02150216, 0x02170218, 0x0219021A, 0x021B021C, 0x021D021E, 0x021F0220, 0x02210222, 0x02230224, 0x02250226, 0x02270228, 0x0229022A, 0x022B022C, 0x022D022E, 0x022F0230, 0x02310232, 0x02330234, 0x02350236, 0x02370238, 0x0239023A, 0x023B023C, 0x023D023E, 0x023F0240, 0x02410242, 0x02430244, 0x02450246, 0x02470248, 0x0249024A, 0x024B024C, 0x024D024E, 0x024F0250, 0x02510252, 0x02530254, 0x02550256, 0x02570258, 0x0259025A, 0x025B025C, 0x025D025E, 0x025F0260, 0x02610262, 0x02630264, 0x02650266, 0x02670268, 0x0269026A, 0x026B026C, 0x026D026E, 0x026F0270, 0x02710272, 0x02730274, 0x02750276, 0x02770278, 0x0279027A, 0x027B027C, 0x027D027E, 0x027F0280, 0x02810282, 0x02830284, 0x02850286, 0x02870288, 0x0289028A, 0x028B028C, 0x028D028E, 0x028F0290, 0x02910292, 0x02930294, 0x02950296, 0x02970298, 0x0299029A, 0x029B029C, 0x029D029E, 0x029F02A0, 0x02A102A2, 0x02A302A4, 0x02A502A6, 0x02A702A8, 0x02A902AA, 0x02AB02AC, 0x02AD02AE, 0x02AF02B0, 0x02B102B2, 0x02B302B4, 0x02B502B6, 0x02B702B8, 0x02B902BA, 0x02BB02BC, 0x02BD02BE, 0x02BF02C0, 0x02C102C2, 0x02C302C4, 0x02C502C6, 0x02C702C8, 0x02C902CA, 0x02CB02CC, 0x02CD02CE, 0x02CF02D0, 0x02D102D2, 0x02D302D4, 0x02D502D6, 0x02D702D8, 0x02D902DA, 0x02DB02DC, 0x02DD02DE, 0x02DF02E0, 0x02E102E2, 0x02E302E4, 0x02E502E6, 0x02E702E8, 0x02E902EA, 0x02EB02EC, 0x02ED02EE, 0x02EF02F0, 0x02F102F2, 0x02F302F4, 0x02F502F6, 0x02F702F8, 0x02F902FA, 0x02FB02FC, 0x02FD02FE, 0x02FF0300, 0x03010302, 0x03030304, 0x03050306, 0x03070308, 0x0309030A, 0x030B030C, 0x030D030E, 0x030F0310, 0x03110312, 0x03130314, 0x03150316, 0x03170318, 0x0319031A, 0x031B031C, 0x031D031E, 0x031F0320, 0x03210322, 0x03230324, 0x03250326, 0x03270328, 0x0329032A, 0x032B032C, 0x032D032E, 0x032F0330, 0x03310332, 0x03330334, 0x03350336, 0x03370338, 0x0339033A, 0x033B033C, 0x033D033E, 0x033F0340, 0x03410342, 0x03430344, 0x03450346, 0x03470348, 0x0349034A, 0x034B034C, 0x034D034E, 0x034F0350, 0x03510352, 0x03530354, 0x03550356, 0x03570358, 0x0359035A, 0x035B035C, 0x035D035E, 0x035F0360, 0x03610362, 0x03630364, 0x03650366, 0x03670368, 0x0369036A, 0x036B036C, 0x036D036E, 0x036F0370, 0x03710372, 0x03730374, 0x03750376, 0x03770378, 0x0379037A, 0x037B037C, 0x037D037E, 0x037F0380, 0x03810382, 0x03830384, 0x03850386, 0x03870388, 0x0389038A, 0x038B038C, 0x038D038E, 0x038F0390, 0x03910392, 0x03930394, 0x03950396, 0x03970398, 0x0399039A, 0x039B039C, 0x039D039E, 0x039F03A0, 0x03A103A2, 0x03A303A4, 0x03A503A6, 0x03A703A8, 0x03A903AA, 0x03AB03AC, 0x03AD03AE, 0x03AF03B0, 0x03B103B2, 0x03B303B4, 0x03B503B6, 0x03B703B8, 0x03B903BA, 0x03BB03BC, 0x03BD03BE, 0x03BF03C0, 0x03C103C2, 0x03C303C4, 0x03C503C6, 0x03C703C8, 0x03C903CA, 0x03CB03CC, 0x03CD03CE, 0x03CF03D0, 0x03D103D2, 0x03D303D4, 0x03D503D6, 0x03D703D8, 0x03D903DA, 0x03DB03DC, 0x03DD03DE, 0x03DF03E0, 0x03E103E2, 0x03E303E4, 0x03E503E6, 0x03E703E8, 0x03E903EA, 0x03EB03EC, 0x03ED03EE, 0x03EF03F0, 0x03F103F2, 0x03F303F4, 0x03F503F6, 0x03F703F8, 0x03F903FA, 0x03FB03FC, 0x03FD03FE, 0x03FF0400, 0x04010402, 0x04030404, 0x04050406, 0x04070408, 0x0409040A, 0x040B040C, 0x040D040E, 0x040F0410, 0x04110412, 0x04130414, 0x04150416, 0x04170418, 0x0419041A, 0x041B041C, 0x041D041E, 0x041F0420, 0x04210422, 0x04230424, 0x04250426, 0x04270428, 0x0429042A, 0x042B042C, 0x042D042E, 0x042F0430, 0x04310432, 0x04330434, 0x04350436, 0x04370438, 0x0439043A, 0x043B043C, 0x043D043E, 0x043F0440, 0x04410442, 0x04430444, 0x04450446, 0x04470448, 0x0449044A, 0x044B044C, 0x044D044E, 0x044F0450, 0x04510452, 0x04530454, 0x04550456, 0x04570458, 0x0459045A, 0x045B045C, 0x045D045E, 0x045F0460, 0x04610462, 0x04630464, 0x04650466, 0x04670468, 0x0469046A, 0x046B046C, 0x046D046E, 0x046F0470, 0x04710472, 0x04730474, 0x04750476, 0x04770478, 0x0479047A, 0x047B047C, 0x047D047E, 0x047F0480, 0x04810482, 0x04830484, 0x04850486, 0x04870488, 0x0489048A, 0x048B048C, 0x048D048E, 0x048F0490, 0x04910492, 0x04930494, 0x04950496, 0x04970498, 0x0499049A, 0x049B049C, 0x049D049E, 0x049F04A0, 0x04A104A2, 0x04A304A4, 0x04A504A6, 0x04A704A8, 0x04A904AA, 0x04AB04AC, 0x04AD04AE, 0x04AF04B0, 0x04B104B2, 0x04B304B4, 0x04B504B6, 0x04B704B8, 0x04B904BA, 0x04BB04BC, 0x04BD04BE, 0x04BF04C0, 0x04C104C2, 0x04C304C4, 0x04C504C6, 0x04C704C8, 0x04C904CA, 0x04CB04CC, 0x04CD04CE, 0x04CF04D0, 0x04D104D2, 0x04D304D4, 0x04D504D6, 0x04D704D8, 0x04D904DA, 0x04DB04DC, 0x04DD04DE, 0x04DF04E0, 0x04E104E2, 0x04E304E4, 0x04E504E6, 0x04E704E8, 0x04E904EA, 0x04EB04EC, 0x04ED04EE, 0x04EF04F0, 0x04F104F2, 0x04F304F4, 0x04F504F6, 0x04F704F8, 0x04F904FA, 0x04FB04FC, 0x04FD04FE, 0x04FF0500, 0x05010502, 0x05030504, 0x05050506, 0x05070508, 0x0509050A, 0x050B050C, 0x050D050E, 0x050F0510, 0x05110512, 0x05130514, 0x05150516, 0x05170518, 0x0519051A, 0x051B051C, 0x051D051E, 0x051F0520, 0x05210522, 0x05230524, 0x05250526, 0x05270528, 0x0529052A, 0x052B052C, 0x052D052E, 0x052F0530, 0x05310532, 0x05330534, 0x05350536, 0x05370538, 0x0539053A, 0x053B053C, 0x053D053E, 0x053F0540, 0x05410542, 0x05430544, 0x05450546, 0x05470548, 0x0549054A, 0x054B054C, 0x054D054E, 0x054F0550, 0x05510552, 0x05530554, 0x05550556, 0x05570558, 0x0559055A, 0x055B055C, 0x055D055E, 0x055F0560, 0x05610562, 0x05630564, 0x05650566, 0x05670568, 0x0569056A, 0x056B056C, 0x056D056E, 0x056F0570, 0x05710572, 0x05730574, 0x05750576, 0x05770578, 0x0579057A, 0x057B057C, 0x057D057E, 0x057F0580, 0x05810582, 0x05830584, 0x05850586, 0x05870588, 0x0589058A, 0x058B058C, 0x058D058E, 0x058F0590, 0x05910592, 0x05930594, 0x05950596, 0x05970598, 0x0599059A, 0x059B059C, 0x059D059E, 0x059F05A0, 0x05A105A2, 0x05A305A4, 0x05A505A6, 0x05A705A8, 0x05A905AA, 0x05AB05AC, 0x05AD05AE, 0x05AF05B0, 0x05B105B2, 0x05B305B4, 0x05B505B6, 0x05B705B8, 0x05B905BA, 0x05BB05BC, 0x05BD05BE, 0x05BF05C0, 0x05C105C2, 0x05C305C4, 0x05C505C6, 0x05C705C8, 0x05C905CA, 0x05CB05CC, 0x05CD05CE, 0x05CF05D0, 0x05D105D2, 0x05D305D4, 0x05D505D6, 0x05D705D8, 0x05D905DA, 0x05DB05DC, 0x05DD05DE, 0x05DF05E0, 0x05E105E2, 0x05E305E4, 0x05E505E6, 0x05E705E8, 0x05E905EA, 0x05EB05EC, 0x05ED05EE, 0x05EF05F0, 0x05F105F2, 0x05F305F4, 0x05F505F6, 0x05F705F8, 0x05F905FA, 0x05FB05FC, 0x05FD05FE, 0x05FF0600, 0x06010602, 0x06030604, 0x06050606, 0x06070608, 0x0609060A, 0x060B060C, 0x060D060E, 0x060F0610, 0x06110612, 0x06130614, 0x06150616, 0x06170618, 0x0619061A, 0x061B061C, 0x061D061E, 0x061F0620, 0x06210622, 0x06230624, 0x06250626, 0x06270628, 0x0629062A, 0x062B062C, 0x062D062E, 0x062F0630, 0x06310632, 0x06330634, 0x06350636, 0x06370638, 0x0639063A, 0x063B063C, 0x063D063E, 0x063F0640, 0x06410642, 0x06430644, 0x06450646, 0x06470648, 0x0649064A, 0x064B064C, 0x064D064E, 0x064F0650, 0x06510652, 0x06530654, 0x06550656, 0x06570658, 0x0659065A, 0x065B065C, 0x065D065E, 0x065F0660, 0x06610662, 0x06630664, 0x06650666, 0x06670668, 0x0669066A, 0x066B066C, 0x066D066E, 0x066F0670, 0x06710672, 0x06730674, 0x06750676, 0x06770678, 0x0679067A, 0x067B067C, 0x067D067E, 0x067F0680, 0x06810682, 0x06830684, 0x06850686, 0x06870688, 0x0689068A, 0x068B068C, 0x068D068E, 0x068F0690, 0x06910692, 0x06930694, 0x06950696, 0x06970698, 0x0699069A, 0x069B069C, 0x069D069E, 0x069F06A0, 0x06A106A2, 0x06A306A4, 0x06A506A6, 0x06A706A8, 0x06A906AA, 0x06AB06AC, 0x06AD06AE, 0x06AF06B0, 0x06B106B2, 0x06B306B4, 0x06B506B6, 0x06B706B8, 0x06B906BA, 0x06BB06BC, 0x06BD06BE, 0x06BF06C0, 0x06C106C2, 0x06C306C4, 0x06C506C6, 0x06C706C8, 0x06C906CA, 0x06CB06CC, 0x06CD06CE, 0x06CF06D0, 0x06D106D2, 0x06D306D4, 0x06D506D6, 0x06D706D8, 0x06D906DA, 0x06DB06DC, 0x06DD06DE, 0x06DF06E0, 0x06E106E2, 0x06E306E4, 0x06E506E6, 0x06E706E8, 0x06E906EA, 0x06EB06EC, 0x06ED06EE, 0x06EF06F0, 0x06F106F2, 0x06F306F4, 0x06F506F6, 0x06F706F8, 0x06F906FA, 0x06FB06FC, 0x06FD06FE, 0x06FF0700, 0x07010702, 0x07030704, 0x07050706, 0x07070708, 0x0709070A, 0x070B070C, 0x070D070E, 0x070F0710, 0x07110712, 0x07130714, 0x07150716, 0x07170718, 0x0719071A, 0x071B071C, 0x071D071E, 0x071F0720, 0x07210722, 0x07230724, 0x07250726, 0x07270728, 0x0729072A, 0x072B072C, 0x072D072E, 0x072F0730, 0x07310732, 0x07330734, 0x07350736, 0x07370738, 0x0739073A, 0x073B073C, 0x073D073E, 0x073F0740, 0x07410742, 0x07430744, 0x07450746, 0x07470748, 0x0749074A, 0x074B074C, 0x074D074E, 0x074F0750, 0x07510752, 0x07530754, 0x07550756, 0x07570758, 0x0759075A, 0x075B075C, 0x075D075E, 0x075F0760, 0x07610762, 0x07630764, 0x07650766, 0x07670768, 0x0769076A, 0x076B076C, 0x076D076E, 0x076F0770, 0x07710772, 0x07730774, 0x07750776, 0x07770778, 0x0779077A, 0x077B077C, 0x077D077E, 0x077F0780, 0x07810782, 0x07830784, 0x07850786, 0x07870788, 0x0789078A, 0x078B078C, 0x078D078E, 0x078F0790, 0x07910792, 0x07930794, 0x07950796, 0x07970798, 0x0799079A, 0x079B079C, 0x079D079E, 0x079F07A0, 0x07A107A2, 0x07A307A4, 0x07A507A6, 0x07A707A8, 0x07A907AA, 0x07AB07AC, 0x07AD07AE, 0x07AF07B0, 0x07B107B2, 0x07B307B4, 0x07B507B6, 0x07B707B8, 0x07B907BA, 0x07BB07BC, 0x07BD07BE, 0x07BF07C0, 0x07C107C2, 0x07C307C4, 0x07C507C6, 0x07C707C8, 0x07C907CA, 0x07CB07CC, 0x07CD07CE, 0x07CF07D0, 0x07D107D2, 0x07D307D4, 0x07D507D6, 0x07D707D8, 0x07D907DA, 0x07DB07DC, 0x07DD07DE, 0x07DF07E0, 0x07E107E2, 0x07E307E4, 0x07E507E6, 0x07E707E8, 0x07E907EA, 0x07EB07EC, 0x07ED07EE, 0x07EF07F0, 0x07F107F2, 0x07F307F4, 0x07F507F6, 0x07F707F8, 0x07F907FA, 0x07FB07FC, 0x07FD07FE, 0x07FF0800, 0x08010802, 0x08030804, 0x08050806, 0x08070808, 0x0809080A, 0x080B080C, 0x080D080E, 0x080F0810, 0x08110812, 0x08130814, 0x08150816, 0x08170818, 0x0819081A, 0x081B081C, 0x081D081E, 0x081F0820, 0x08210822, 0x08230824, 0x08250826, 0x08270828, 0x0829082A, 0x082B082C, 0x082D082E, 0x082F0830, 0x08310832, 0x08330834, 0x08350836, 0x08370838, 0x0839083A, 0x083B083C, 0x083D083E, 0x083F0840, 0x08410842, 0x08430844, 0x08450846, 0x08470848, 0x0849084A, 0x084B084C, 0x084D084E, 0x084F0850, 0x08510852, 0x08530854, 0x08550856, 0x08570858, 0x0859085A, 0x085B085C, 0x085D085E, 0x085F0860, 0x08610862, 0x08630864, 0x08650866, 0x08670868, 0x0869086A, 0x086B086C, 0x086D086E, 0x086F0870, 0x08710872, 0x08730874, 0x08750876, 0x08770878, 0x0879087A, 0x087B087C, 0x087D087E, 0x087F0880, 0x08810882, 0x08830884, 0x08850886, 0x08870888, 0x0889088A, 0x088B088C, 0x088D088E, 0x088F0890, 0x08910892, 0x08930894, 0x08950896, 0x08970898, 0x0899089A, 0x089B089C, 0x089D089E, 0x089F08A0, 0x08A108A2, 0x08A308A4, 0x08A508A6, 0x08A708A8, 0x08A908AA, 0x08AB08AC, 0x08AD08AE, 0x08AF08B0, 0x08B108B2, 0x08B308B4, 0x08B508B6, 0x08B708B8, 0x08B908BA, 0x08BB08BC, 0x08BD08BE, 0x08BF08C0, 0x08C108C2, 0x08C308C4, 0x08C508C6, 0x08C708C8, 0x08C908CA, 0x08CB08CC, 0x08CD08CE, 0x08CF08D0, 0x08D108D2, 0x08D308D4, 0x08D508D6, 0x08D708D8, 0x08D908DA, 0x08DB08DC, 0x08DD08DE, 0x08DF08E0, 0x08E108E2, 0x08E308E4, 0x08E508E6, 0x08E708E8, 0x08E908EA, 0x08EB08EC, 0x08ED08EE, 0x08EF08F0, 0x08F108F2, 0x08F308F4, 0x08F508F6, 0x08F708F8, 0x08F908FA, 0x08FB08FC, 0x08FD08FE, 0x08FF0900, 0x09010902, 0x09030904, 0x09050906, 0x09070908, 0x0909090A, 0x090B090C, 0x090D090E, 0x090F0910, 0x09110912, 0x09130914, 0x09150916, 0x09170918, 0x0919091A, 0x091B091C, 0x091D091E, 0x091F0920, 0x09210922, 0x09230924, 0x09250926, 0x09270928, 0x0929092A, 0x092B092C, 0x092D092E, 0x092F0930, 0x09310932, 0x09330934, 0x09350936, 0x09370938, 0x0939093A, 0x093B093C, 0x093D093E, 0x093F0940, 0x09410942, 0x09430944, 0x09450946, 0x09470948, 0x0949094A, 0x094B094C, 0x094D094E, 0x094F0950, 0x09510952, 0x09530954, 0x09550956, 0x09570958, 0x0959095A, 0x095B095C, 0x095D095E, 0x095F0960, 0x09610962, 0x09630964, 0x09650966, 0x09670968, 0x0969096A, 0x096B096C, 0x096D096E, 0x096F0970, 0x09710972, 0x09730974, 0x09750976, 0x09770978, 0x0979097A, 0x097B097C, 0x097D097E, 0x097F0980, 0x09810982, 0x09830984, 0x09850986, 0x09870988, 0x0989098A, 0x098B098C, 0x098D098E, 0x098F0990, 0x09910992, 0x09930994, 0x09950996, 0x09970998, 0x0999099A, 0x099B099C, 0x099D099E, 0x099F09A0, 0x09A109A2, 0x09A309A4, 0x09A509A6, 0x09A709A8, 0x09A909AA, 0x09AB09AC, 0x09AD09AE, 0x09AF09B0, 0x09B109B2, 0x09B309B4, 0x09B509B6, 0x09B709B8, 0x09B909BA, 0x09BB09BC, 0x09BD09BE, 0x09BF09C0, 0x09C109C2, 0x09C309C4, 0x09C509C6, 0x09C709C8, 0x09C909CA, 0x09CB09CC, 0x09CD09CE, 0x09CF09D0, 0x09D109D2, 0x09D309D4, 0x09D509D6, 0x09D709D8, 0x09D909DA, 0x09DB09DC, 0x09DD09DE, 0x09DF09E0, 0x09E109E2, 0x09E309E4, 0x09E509E6, 0x09E709E8, 0x09E909EA, 0x09EB09EC, 0x09ED09EE, 0x09EF09F0, 0x09F109F2, 0x09F309F4, 0x09F509F6, 0x09F709F8, 0x09F909FA, 0x09FB09FC, 0x09FD09FE, 0x09FF0A00};
	u32 B[2560];
	matrix_SA_mult(S, A, B);
#endif

#if ENABLE_KEM_TEST
	// ------ KEM test ------
	uint8_t pk[CRYPTO_PUBLICKEYBYTES];
	uint8_t sk[CRYPTO_SECRETKEYBYTES];
	uint8_t ss_encap[CRYPTO_BYTES], ss_decap[CRYPTO_BYTES];
	uint8_t ct[CRYPTO_CIPHERTEXTBYTES];

	print_debug(DEBUG_TEST_KEM, "\n");
	print_debug(DEBUG_TEST_KEM, "=============================================================================================================================\n");
	print_debug(DEBUG_TEST_KEM, "Testing correctness of key encapsulation mechanism (KEM), system %s, tests for %d iterations\n", named_parameters, iterations);
	print_debug(DEBUG_TEST_KEM, "=============================================================================================================================\n");

	for (int i = 0; i < iterations; i++)
	{
		keccakStatePermuteType = KECCAK_SW;

		t_keypair_sw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_sw = get_cyclecount() - t_keypair_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using SW took exactly %d cycles or %d us (including function call)\n", t_keypair_sw, (t_keypair_sw)/666);

		t_enc_sw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_sw = get_cyclecount() - t_enc_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using SW took exactly %d cycles or %d us (including function call)\n", t_enc_sw, (t_enc_sw)/666);

		t_dec_sw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_sw = get_cyclecount() - t_dec_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using SW took exactly %d cycles or %d us (including function call)\n", t_dec_sw, (t_dec_sw)/666);

		//Total sw time
		t_total_sw = t_keypair_sw + t_enc_sw + t_dec_sw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using SW is %d cycles or %d us (including function call)\n", t_total_sw, (t_total_sw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] SW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] SW ERROR!\n");
			return false;
		}

		keccakStatePermuteType = KECCAK_HW;

		t_keypair_hw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_hw = get_cyclecount() - t_keypair_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using HW took exactly %d cycles or %d us (including function call)\n", t_keypair_hw, (t_keypair_hw)/666);

		t_enc_hw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_hw = get_cyclecount() - t_enc_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using HW took exactly %d cycles or %d us (including function call)\n", t_enc_hw, (t_enc_hw)/666);

		t_dec_hw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_hw = get_cyclecount() - t_dec_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using HW took exactly %d cycles or %d us (including function call)\n", t_dec_hw, (t_dec_hw)/666);

		//Total hw time
		t_total_hw = t_keypair_hw + t_enc_hw + t_dec_hw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using HW is %d cycles or %d us (including function call)\n", t_total_hw, (t_total_hw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] HW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] HW ERROR!\n");
			return false;
		}

		keccakStatePermuteType = KECCAK_HW_MM;

		t_keypair_hw_mm = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_hw_mm = get_cyclecount() - t_keypair_hw_mm - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using HW_MM took exactly %d cycles or %d us (including function call)\n", t_keypair_hw_mm, (t_keypair_hw_mm)/666);

		t_enc_hw_mm = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_hw_mm = get_cyclecount() - t_enc_hw_mm - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using HW_MM took exactly %d cycles or %d us (including function call)\n", t_enc_hw_mm, (t_enc_hw_mm)/666);

		t_dec_hw_mm = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_hw_mm = get_cyclecount() - t_dec_hw_mm - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using HW_MM took exactly %d cycles or %d us (including function call)\n", t_dec_hw_mm, (t_dec_hw_mm)/666);

		//Total hw time
		t_total_hw_mm = t_keypair_hw_mm + t_enc_hw_mm + t_dec_hw_mm;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using HW_MM is %d cycles or %d us (including function call)\n", t_total_hw_mm, (t_total_hw_mm)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] HW_MM tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] HW_MM ERROR!\n");
			return false;
		}

		//Table
		float fRelativeHw = 100.0-(t_total_hw/(float)t_total_sw)*100.0;
		u32 wholeHw, thousandthsHw;
		wholeHw = fRelativeHw;
		thousandthsHw = (fRelativeHw - wholeHw) * 1000;
		float fRelativeHwMM = 100.0-(t_total_hw_mm/(float)t_total_sw)*100.0;
		u32 wholeHwMM, thousandthsHwMM;
		wholeHwMM = fRelativeHwMM;
		thousandthsHwMM = (fRelativeHwMM - wholeHwMM) * 1000;
		print_debug(DEBUG_TEST_KEM, "\t\tkey pair (us) \t|\t encryption (us) \t|\t decryption (us) \t\t|\t\t total (us) \t\t|\t Improvement (%c) \n", 37);
		print_debug(DEBUG_TEST_KEM, "     -----------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t\t -\n", t_keypair_sw/666, t_enc_sw/666, t_dec_sw/666, t_total_sw/666);
		print_debug(DEBUG_TEST_KEM, "     -----------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t %lu.%03lu\n", t_keypair_hw/666, t_enc_hw/666, t_dec_hw/666, t_total_hw/666, wholeHw, thousandthsHw);
		print_debug(DEBUG_TEST_KEM, "     -----------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t %lu.%03lu\n", t_keypair_hw_mm/666, t_enc_hw_mm/666, t_dec_hw_mm/666, t_total_hw_mm/666, wholeHwMM, thousandthsHwMM);
		print_debug(DEBUG_TEST_KEM, "     -----------------------------------------------------------------------------------------------------------\n\n\n");


	}
#endif

	return true;
}
