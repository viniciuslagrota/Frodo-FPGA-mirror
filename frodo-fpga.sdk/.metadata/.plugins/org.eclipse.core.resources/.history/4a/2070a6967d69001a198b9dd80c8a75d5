/*
 * frodo_main.c

 *
 *  Created on: 25 de nov de 2019
 *      Author: Vinicius
 */

#include "global_def.h"
#include "fips202.h"

static enum codeType
{
	KECCAK_SW_MATRIX_SW,
	KECCAK_HW_MATRIX_SW,
	KECCAK_HW_MM_MATRIX_SW,
	KECCAK_SW_MATRIX_HW,
	KECCAK_HW_MATRIX_HW,
	KECCAK_HW_MM_MATRIX_HW
} codeFeaturesType = KECCAK_SW_MATRIX_SW;

#if ENABLE_DEBUG
void matrix_SA_mult(uint32_t * S, uint32_t * A, uint32_t * B)
{
	#define REPEAT		3

	print_debug(DEBUG_MATRIX_MM, "[MATRIX] Matrix init\n");

	//Variables
	int i, j;
	u32 readGpio = 0x0;

	//Set start pin high
	XGpio_DiscreteWrite(&axiStartBusyMatrix, 1, 0x1); // Start gpio set high

	for(j = 0; j < REPEAT; j++)
	{
		//Sending data S
		for(i = 0; i < 16; i++)
		{
			memoryMatrixS[i] = S[i];
	//		print_debug(DEBUG_MATRIX_MM, "\tSent data S[%d]: 0x%lx\n", i, S[i]);
		}

		//Sending data A
		for(i = 0; i < 1280; i++)
		{
			memoryMatrixA[i] = A[i];
	//		print_debug(DEBUG_MATRIX_MM, "\tSent data A[%d]: 0x%lx\n", i, A[i]);
		}

		//Reading busy bit
		readGpio = XGpio_DiscreteRead(&axiStartBusyMatrix, 1); //Check done pin
		while(readGpio == 0x1)
		{
			readGpio = XGpio_DiscreteRead(&axiStartBusyMatrix, 1);
		}
		print_debug(DEBUG_MATRIX_MM, "[MATRIX] Busy bit low!\n");

		//Interpret data
		for (i = 0; i < 2560; i++)
		{
			B[i] = memoryMatrixB[i];
			if(i < 20 || i > 2500)
				print_debug(DEBUG_MATRIX_MM, "\tB[%d]: 0x%lx\n", i, B[i]);
		}
	}

	//Set start pin low
	XGpio_DiscreteWrite(&axiStartBusyMatrix, 1, 0x0); // Start gpio set low

}
#endif

void KeccakF1600_StatePermute(uint64_t * state)
{
	switch(codeFeaturesType)
	{
		case KECCAK_SW_MATRIX_SW:
		{
			KeccakF1600_StatePermute_SW(state);
			break;
		}
		case KECCAK_HW_MATRIX_SW:
		{
			KeccakF1600_StatePermute_HW(state);
			break;
		}
		case KECCAK_HW_MM_MATRIX_SW:
		{
			KeccakF1600_StatePermute_HW_MM(state);
			break;
		}
		case KECCAK_SW_MATRIX_HW:
		{
			KeccakF1600_StatePermute_SW(state);
			break;
		}
		case KECCAK_HW_MATRIX_HW:
		{
			KeccakF1600_StatePermute_HW(state);
			break;
		}
		case KECCAK_HW_MM_MATRIX_HW:
		{
			KeccakF1600_StatePermute_HW_MM(state);
			break;
		}
	}
}

int frodo_mul_add_sa_plus_e(uint16_t *out, const uint16_t *s, const uint16_t *e, const uint8_t *seed_A)
{
	switch(codeFeaturesType)
	{
		case KECCAK_SW_MATRIX_SW:
		{
			frodo_mul_add_sa_plus_e_SW(out, s, e, seed_A);
			break;
		}
		case KECCAK_HW_MATRIX_SW:
		{
			frodo_mul_add_sa_plus_e_SW(out, s, e, seed_A);
			break;
		}
		case KECCAK_HW_MM_MATRIX_SW:
		{
			frodo_mul_add_sa_plus_e_SW(out, s, e, seed_A);
			break;
		}
		case KECCAK_SW_MATRIX_HW:
		{
			frodo_mul_add_sa_plus_e_HW(out, s, e, seed_A);
			break;
		}
		case KECCAK_HW_MATRIX_HW:
		{
			frodo_mul_add_sa_plus_e_HW(out, s, e, seed_A);
			break;
		}
		case KECCAK_HW_MM_MATRIX_HW:
		{
			frodo_mul_add_sa_plus_e_HW(out, s, e, seed_A);
			break;
		}
	}
}

unsigned int get_cyclecount (void)
{
	unsigned int value;
	// Read CCNT Register
	asm volatile ("MRC p15, 0, %0, c9, c13, 0\t\n": "=r"(value));
	return value;
}

void init_perfcounters (int32_t do_reset, int32_t enable_divider)
{
	// in general enable all counters (including cycle counter)
	int32_t value = 1;

	// peform reset:
	if (do_reset)
	{
		value |= 2;     // reset all counters to zero.
		value |= 4;     // reset cycle counter to zero.
	}

	if (enable_divider)
		value |= 8;     // enable "by 64" divider for CCNT.

	value |= 16;

	// program the performance-counter control-register:
	asm volatile ("MCR p15, 0, %0, c9, c12, 0\t\n" :: "r"(value));

	// enable all counters:
	asm volatile ("MCR p15, 0, %0, c9, c12, 1\t\n" :: "r"(0x8000000f));

	// clear overflows:
	asm volatile ("MCR p15, 0, %0, c9, c12, 3\t\n" :: "r"(0x8000000f));
}

int kem_test(const char *named_parameters, int iterations)
{
	// CDF table
//	uint16_t CDF_TABLE[13] = {4643, 13363, 20579, 25843, 29227, 31145, 32103, 32525, 32689, 32745, 32762, 32766, 32767};
//	uint16_t CDF_TABLE_LEN = 13;

	// measure the counting overhead:
	unsigned int overhead = get_cyclecount();
	overhead = get_cyclecount() - overhead;

	volatile unsigned int t_keypair_keccak_sw_matrix_sw = 0, t_enc_keccak_sw_matrix_sw = 0, t_dec_keccak_sw_matrix_sw = 0, t_total_keccak_sw_matrix_sw = 0;
	volatile unsigned int t_keypair_keccak_hw_matrix_sw = 0, t_enc_keccak_hw_matrix_sw = 0, t_dec_keccak_hw_matrix_sw = 0, t_total_keccak_hw_matrix_sw = 0;
	volatile unsigned int t_keypair_keccak_hw_mm_matrix_sw = 0, t_enc_keccak_hw_mm_matrix_sw = 0, t_dec_keccak_hw_mm_matrix_sw = 0, t_total_keccak_hw_mm_matrix_sw = 0;
	volatile unsigned int t_keypair_keccak_sw_matrix_hw = 0, t_enc_keccak_sw_matrix_hw = 0, t_dec_keccak_sw_matrix_hw = 0, t_total_keccak_sw_matrix_hw = 0;
	volatile unsigned int t_keypair_keccak_hw_matrix_hw = 0, t_enc_keccak_hw_matrix_hw = 0, t_dec_keccak_hw_matrix_hw = 0, t_total_keccak_hw_matrix_hw = 0;
	volatile unsigned int t_keypair_keccak_hw_mm_matrix_hw = 0, t_enc_keccak_hw_mm_matrix_hw = 0, t_dec_keccak_hw_mm_matrix_hw = 0, t_total_keccak_hw_mm_matrix_hw = 0;

	/* enable user-mode access to the performance counter*/
	asm ("MCR p15, 0, %0, C9, C14, 0\n\t" :: "r"(1));

	/* disable counter overflow interrupts (just in case)*/
	asm ("MCR p15, 0, %0, C9, C14, 2\n\t" :: "r"(0x8000000f));

	// init counters:
	init_perfcounters (1, 0);

#if ENABLE_DEBUG
	// ------ Test keccak_function ------
	u64 state[25] = { 0 };
	state[0] = 0x000000000000001f;
	state[20] = 0x8000000000000000;
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Initializing Hardware function test\n");
	printStateMatrixDebug(state);
	unsigned int t;
	t = get_cyclecount();
	KeccakF1600_StatePermute_HW(state);
	t = get_cyclecount() - t;
	printStateMatrixDebug(state);
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Hardware function took exactly %d cycles or %d us (including function call)\n\n", t - overhead, (t - overhead)/666);

	u64 state2[25] = { 0 };
	state2[0] = 0x000000000000001f;
	state2[20] = 0x8000000000000000;
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Initializing Software function test\n");
	printStateMatrixDebug(state2);
	t = get_cyclecount();
	KeccakF1600_StatePermute_SW(state2);
	t = get_cyclecount() - t;
	printStateMatrixDebug(state2);
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Software function took exactly %d cycles or %d us (including function call)\n\n", t - overhead, (t - overhead)/666);

	u64 state3[25] = { 0 };
	state3[0] = 0x000000000000001f;
	state3[20] = 0x8000000000000000;
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Initializing Hardware Memory-Mapped function test\n");
	printStateMatrixDebug(state3);
	t = get_cyclecount();
	KeccakF1600_StatePermute_HW_MM(state3);
	t = get_cyclecount() - t;
	printStateMatrixDebug(state3);
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Hardware Memory-Mapped function took exactly %d cycles or %d us (including function call)\n\n", t - overhead, (t - overhead)/666);

	u32 S[16] = {0x00010003, 0x00050007, 0x0009000B, 0x000D000F, 0x00110013, 0x00150017, 0x0019001B, 0x001D001F, 0x00210023, 0x00250027, 0x0029002B, 0x002D002F, 0x00310033, 0x00350037, 0x0039003B, 0x003D003F};
	u32 A[1280] = {0x00010002, 0x00030004, 0x00050006, 0x00070008, 0x0009000A, 0x000B000C, 0x000D000E, 0x000F0010, 0x00110012, 0x00130014, 0x00150016, 0x00170018, 0x0019001A, 0x001B001C, 0x001D001E, 0x001F0020, 0x00210022, 0x00230024, 0x00250026, 0x00270028, 0x0029002A, 0x002B002C, 0x002D002E, 0x002F0030, 0x00310032, 0x00330034, 0x00350036, 0x00370038, 0x0039003A, 0x003B003C, 0x003D003E, 0x003F0040, 0x00410042, 0x00430044, 0x00450046, 0x00470048, 0x0049004A, 0x004B004C, 0x004D004E, 0x004F0050, 0x00510052, 0x00530054, 0x00550056, 0x00570058, 0x0059005A, 0x005B005C, 0x005D005E, 0x005F0060, 0x00610062, 0x00630064, 0x00650066, 0x00670068, 0x0069006A, 0x006B006C, 0x006D006E, 0x006F0070, 0x00710072, 0x00730074, 0x00750076, 0x00770078, 0x0079007A, 0x007B007C, 0x007D007E, 0x007F0080, 0x00810082, 0x00830084, 0x00850086, 0x00870088, 0x0089008A, 0x008B008C, 0x008D008E, 0x008F0090, 0x00910092, 0x00930094, 0x00950096, 0x00970098, 0x0099009A, 0x009B009C, 0x009D009E, 0x009F00A0, 0x00A100A2, 0x00A300A4, 0x00A500A6, 0x00A700A8, 0x00A900AA, 0x00AB00AC, 0x00AD00AE, 0x00AF00B0, 0x00B100B2, 0x00B300B4, 0x00B500B6, 0x00B700B8, 0x00B900BA, 0x00BB00BC, 0x00BD00BE, 0x00BF00C0, 0x00C100C2, 0x00C300C4, 0x00C500C6, 0x00C700C8, 0x00C900CA, 0x00CB00CC, 0x00CD00CE, 0x00CF00D0, 0x00D100D2, 0x00D300D4, 0x00D500D6, 0x00D700D8, 0x00D900DA, 0x00DB00DC, 0x00DD00DE, 0x00DF00E0, 0x00E100E2, 0x00E300E4, 0x00E500E6, 0x00E700E8, 0x00E900EA, 0x00EB00EC, 0x00ED00EE, 0x00EF00F0, 0x00F100F2, 0x00F300F4, 0x00F500F6, 0x00F700F8, 0x00F900FA, 0x00FB00FC, 0x00FD00FE, 0x00FF0100, 0x01010102, 0x01030104, 0x01050106, 0x01070108, 0x0109010A, 0x010B010C, 0x010D010E, 0x010F0110, 0x01110112, 0x01130114, 0x01150116, 0x01170118, 0x0119011A, 0x011B011C, 0x011D011E, 0x011F0120, 0x01210122, 0x01230124, 0x01250126, 0x01270128, 0x0129012A, 0x012B012C, 0x012D012E, 0x012F0130, 0x01310132, 0x01330134, 0x01350136, 0x01370138, 0x0139013A, 0x013B013C, 0x013D013E, 0x013F0140, 0x01410142, 0x01430144, 0x01450146, 0x01470148, 0x0149014A, 0x014B014C, 0x014D014E, 0x014F0150, 0x01510152, 0x01530154, 0x01550156, 0x01570158, 0x0159015A, 0x015B015C, 0x015D015E, 0x015F0160, 0x01610162, 0x01630164, 0x01650166, 0x01670168, 0x0169016A, 0x016B016C, 0x016D016E, 0x016F0170, 0x01710172, 0x01730174, 0x01750176, 0x01770178, 0x0179017A, 0x017B017C, 0x017D017E, 0x017F0180, 0x01810182, 0x01830184, 0x01850186, 0x01870188, 0x0189018A, 0x018B018C, 0x018D018E, 0x018F0190, 0x01910192, 0x01930194, 0x01950196, 0x01970198, 0x0199019A, 0x019B019C, 0x019D019E, 0x019F01A0, 0x01A101A2, 0x01A301A4, 0x01A501A6, 0x01A701A8, 0x01A901AA, 0x01AB01AC, 0x01AD01AE, 0x01AF01B0, 0x01B101B2, 0x01B301B4, 0x01B501B6, 0x01B701B8, 0x01B901BA, 0x01BB01BC, 0x01BD01BE, 0x01BF01C0, 0x01C101C2, 0x01C301C4, 0x01C501C6, 0x01C701C8, 0x01C901CA, 0x01CB01CC, 0x01CD01CE, 0x01CF01D0, 0x01D101D2, 0x01D301D4, 0x01D501D6, 0x01D701D8, 0x01D901DA, 0x01DB01DC, 0x01DD01DE, 0x01DF01E0, 0x01E101E2, 0x01E301E4, 0x01E501E6, 0x01E701E8, 0x01E901EA, 0x01EB01EC, 0x01ED01EE, 0x01EF01F0, 0x01F101F2, 0x01F301F4, 0x01F501F6, 0x01F701F8, 0x01F901FA, 0x01FB01FC, 0x01FD01FE, 0x01FF0200, 0x02010202, 0x02030204, 0x02050206, 0x02070208, 0x0209020A, 0x020B020C, 0x020D020E, 0x020F0210, 0x02110212, 0x02130214, 0x02150216, 0x02170218, 0x0219021A, 0x021B021C, 0x021D021E, 0x021F0220, 0x02210222, 0x02230224, 0x02250226, 0x02270228, 0x0229022A, 0x022B022C, 0x022D022E, 0x022F0230, 0x02310232, 0x02330234, 0x02350236, 0x02370238, 0x0239023A, 0x023B023C, 0x023D023E, 0x023F0240, 0x02410242, 0x02430244, 0x02450246, 0x02470248, 0x0249024A, 0x024B024C, 0x024D024E, 0x024F0250, 0x02510252, 0x02530254, 0x02550256, 0x02570258, 0x0259025A, 0x025B025C, 0x025D025E, 0x025F0260, 0x02610262, 0x02630264, 0x02650266, 0x02670268, 0x0269026A, 0x026B026C, 0x026D026E, 0x026F0270, 0x02710272, 0x02730274, 0x02750276, 0x02770278, 0x0279027A, 0x027B027C, 0x027D027E, 0x027F0280, 0x02810282, 0x02830284, 0x02850286, 0x02870288, 0x0289028A, 0x028B028C, 0x028D028E, 0x028F0290, 0x02910292, 0x02930294, 0x02950296, 0x02970298, 0x0299029A, 0x029B029C, 0x029D029E, 0x029F02A0, 0x02A102A2, 0x02A302A4, 0x02A502A6, 0x02A702A8, 0x02A902AA, 0x02AB02AC, 0x02AD02AE, 0x02AF02B0, 0x02B102B2, 0x02B302B4, 0x02B502B6, 0x02B702B8, 0x02B902BA, 0x02BB02BC, 0x02BD02BE, 0x02BF02C0, 0x02C102C2, 0x02C302C4, 0x02C502C6, 0x02C702C8, 0x02C902CA, 0x02CB02CC, 0x02CD02CE, 0x02CF02D0, 0x02D102D2, 0x02D302D4, 0x02D502D6, 0x02D702D8, 0x02D902DA, 0x02DB02DC, 0x02DD02DE, 0x02DF02E0, 0x02E102E2, 0x02E302E4, 0x02E502E6, 0x02E702E8, 0x02E902EA, 0x02EB02EC, 0x02ED02EE, 0x02EF02F0, 0x02F102F2, 0x02F302F4, 0x02F502F6, 0x02F702F8, 0x02F902FA, 0x02FB02FC, 0x02FD02FE, 0x02FF0300, 0x03010302, 0x03030304, 0x03050306, 0x03070308, 0x0309030A, 0x030B030C, 0x030D030E, 0x030F0310, 0x03110312, 0x03130314, 0x03150316, 0x03170318, 0x0319031A, 0x031B031C, 0x031D031E, 0x031F0320, 0x03210322, 0x03230324, 0x03250326, 0x03270328, 0x0329032A, 0x032B032C, 0x032D032E, 0x032F0330, 0x03310332, 0x03330334, 0x03350336, 0x03370338, 0x0339033A, 0x033B033C, 0x033D033E, 0x033F0340, 0x03410342, 0x03430344, 0x03450346, 0x03470348, 0x0349034A, 0x034B034C, 0x034D034E, 0x034F0350, 0x03510352, 0x03530354, 0x03550356, 0x03570358, 0x0359035A, 0x035B035C, 0x035D035E, 0x035F0360, 0x03610362, 0x03630364, 0x03650366, 0x03670368, 0x0369036A, 0x036B036C, 0x036D036E, 0x036F0370, 0x03710372, 0x03730374, 0x03750376, 0x03770378, 0x0379037A, 0x037B037C, 0x037D037E, 0x037F0380, 0x03810382, 0x03830384, 0x03850386, 0x03870388, 0x0389038A, 0x038B038C, 0x038D038E, 0x038F0390, 0x03910392, 0x03930394, 0x03950396, 0x03970398, 0x0399039A, 0x039B039C, 0x039D039E, 0x039F03A0, 0x03A103A2, 0x03A303A4, 0x03A503A6, 0x03A703A8, 0x03A903AA, 0x03AB03AC, 0x03AD03AE, 0x03AF03B0, 0x03B103B2, 0x03B303B4, 0x03B503B6, 0x03B703B8, 0x03B903BA, 0x03BB03BC, 0x03BD03BE, 0x03BF03C0, 0x03C103C2, 0x03C303C4, 0x03C503C6, 0x03C703C8, 0x03C903CA, 0x03CB03CC, 0x03CD03CE, 0x03CF03D0, 0x03D103D2, 0x03D303D4, 0x03D503D6, 0x03D703D8, 0x03D903DA, 0x03DB03DC, 0x03DD03DE, 0x03DF03E0, 0x03E103E2, 0x03E303E4, 0x03E503E6, 0x03E703E8, 0x03E903EA, 0x03EB03EC, 0x03ED03EE, 0x03EF03F0, 0x03F103F2, 0x03F303F4, 0x03F503F6, 0x03F703F8, 0x03F903FA, 0x03FB03FC, 0x03FD03FE, 0x03FF0400, 0x04010402, 0x04030404, 0x04050406, 0x04070408, 0x0409040A, 0x040B040C, 0x040D040E, 0x040F0410, 0x04110412, 0x04130414, 0x04150416, 0x04170418, 0x0419041A, 0x041B041C, 0x041D041E, 0x041F0420, 0x04210422, 0x04230424, 0x04250426, 0x04270428, 0x0429042A, 0x042B042C, 0x042D042E, 0x042F0430, 0x04310432, 0x04330434, 0x04350436, 0x04370438, 0x0439043A, 0x043B043C, 0x043D043E, 0x043F0440, 0x04410442, 0x04430444, 0x04450446, 0x04470448, 0x0449044A, 0x044B044C, 0x044D044E, 0x044F0450, 0x04510452, 0x04530454, 0x04550456, 0x04570458, 0x0459045A, 0x045B045C, 0x045D045E, 0x045F0460, 0x04610462, 0x04630464, 0x04650466, 0x04670468, 0x0469046A, 0x046B046C, 0x046D046E, 0x046F0470, 0x04710472, 0x04730474, 0x04750476, 0x04770478, 0x0479047A, 0x047B047C, 0x047D047E, 0x047F0480, 0x04810482, 0x04830484, 0x04850486, 0x04870488, 0x0489048A, 0x048B048C, 0x048D048E, 0x048F0490, 0x04910492, 0x04930494, 0x04950496, 0x04970498, 0x0499049A, 0x049B049C, 0x049D049E, 0x049F04A0, 0x04A104A2, 0x04A304A4, 0x04A504A6, 0x04A704A8, 0x04A904AA, 0x04AB04AC, 0x04AD04AE, 0x04AF04B0, 0x04B104B2, 0x04B304B4, 0x04B504B6, 0x04B704B8, 0x04B904BA, 0x04BB04BC, 0x04BD04BE, 0x04BF04C0, 0x04C104C2, 0x04C304C4, 0x04C504C6, 0x04C704C8, 0x04C904CA, 0x04CB04CC, 0x04CD04CE, 0x04CF04D0, 0x04D104D2, 0x04D304D4, 0x04D504D6, 0x04D704D8, 0x04D904DA, 0x04DB04DC, 0x04DD04DE, 0x04DF04E0, 0x04E104E2, 0x04E304E4, 0x04E504E6, 0x04E704E8, 0x04E904EA, 0x04EB04EC, 0x04ED04EE, 0x04EF04F0, 0x04F104F2, 0x04F304F4, 0x04F504F6, 0x04F704F8, 0x04F904FA, 0x04FB04FC, 0x04FD04FE, 0x04FF0500, 0x05010502, 0x05030504, 0x05050506, 0x05070508, 0x0509050A, 0x050B050C, 0x050D050E, 0x050F0510, 0x05110512, 0x05130514, 0x05150516, 0x05170518, 0x0519051A, 0x051B051C, 0x051D051E, 0x051F0520, 0x05210522, 0x05230524, 0x05250526, 0x05270528, 0x0529052A, 0x052B052C, 0x052D052E, 0x052F0530, 0x05310532, 0x05330534, 0x05350536, 0x05370538, 0x0539053A, 0x053B053C, 0x053D053E, 0x053F0540, 0x05410542, 0x05430544, 0x05450546, 0x05470548, 0x0549054A, 0x054B054C, 0x054D054E, 0x054F0550, 0x05510552, 0x05530554, 0x05550556, 0x05570558, 0x0559055A, 0x055B055C, 0x055D055E, 0x055F0560, 0x05610562, 0x05630564, 0x05650566, 0x05670568, 0x0569056A, 0x056B056C, 0x056D056E, 0x056F0570, 0x05710572, 0x05730574, 0x05750576, 0x05770578, 0x0579057A, 0x057B057C, 0x057D057E, 0x057F0580, 0x05810582, 0x05830584, 0x05850586, 0x05870588, 0x0589058A, 0x058B058C, 0x058D058E, 0x058F0590, 0x05910592, 0x05930594, 0x05950596, 0x05970598, 0x0599059A, 0x059B059C, 0x059D059E, 0x059F05A0, 0x05A105A2, 0x05A305A4, 0x05A505A6, 0x05A705A8, 0x05A905AA, 0x05AB05AC, 0x05AD05AE, 0x05AF05B0, 0x05B105B2, 0x05B305B4, 0x05B505B6, 0x05B705B8, 0x05B905BA, 0x05BB05BC, 0x05BD05BE, 0x05BF05C0, 0x05C105C2, 0x05C305C4, 0x05C505C6, 0x05C705C8, 0x05C905CA, 0x05CB05CC, 0x05CD05CE, 0x05CF05D0, 0x05D105D2, 0x05D305D4, 0x05D505D6, 0x05D705D8, 0x05D905DA, 0x05DB05DC, 0x05DD05DE, 0x05DF05E0, 0x05E105E2, 0x05E305E4, 0x05E505E6, 0x05E705E8, 0x05E905EA, 0x05EB05EC, 0x05ED05EE, 0x05EF05F0, 0x05F105F2, 0x05F305F4, 0x05F505F6, 0x05F705F8, 0x05F905FA, 0x05FB05FC, 0x05FD05FE, 0x05FF0600, 0x06010602, 0x06030604, 0x06050606, 0x06070608, 0x0609060A, 0x060B060C, 0x060D060E, 0x060F0610, 0x06110612, 0x06130614, 0x06150616, 0x06170618, 0x0619061A, 0x061B061C, 0x061D061E, 0x061F0620, 0x06210622, 0x06230624, 0x06250626, 0x06270628, 0x0629062A, 0x062B062C, 0x062D062E, 0x062F0630, 0x06310632, 0x06330634, 0x06350636, 0x06370638, 0x0639063A, 0x063B063C, 0x063D063E, 0x063F0640, 0x06410642, 0x06430644, 0x06450646, 0x06470648, 0x0649064A, 0x064B064C, 0x064D064E, 0x064F0650, 0x06510652, 0x06530654, 0x06550656, 0x06570658, 0x0659065A, 0x065B065C, 0x065D065E, 0x065F0660, 0x06610662, 0x06630664, 0x06650666, 0x06670668, 0x0669066A, 0x066B066C, 0x066D066E, 0x066F0670, 0x06710672, 0x06730674, 0x06750676, 0x06770678, 0x0679067A, 0x067B067C, 0x067D067E, 0x067F0680, 0x06810682, 0x06830684, 0x06850686, 0x06870688, 0x0689068A, 0x068B068C, 0x068D068E, 0x068F0690, 0x06910692, 0x06930694, 0x06950696, 0x06970698, 0x0699069A, 0x069B069C, 0x069D069E, 0x069F06A0, 0x06A106A2, 0x06A306A4, 0x06A506A6, 0x06A706A8, 0x06A906AA, 0x06AB06AC, 0x06AD06AE, 0x06AF06B0, 0x06B106B2, 0x06B306B4, 0x06B506B6, 0x06B706B8, 0x06B906BA, 0x06BB06BC, 0x06BD06BE, 0x06BF06C0, 0x06C106C2, 0x06C306C4, 0x06C506C6, 0x06C706C8, 0x06C906CA, 0x06CB06CC, 0x06CD06CE, 0x06CF06D0, 0x06D106D2, 0x06D306D4, 0x06D506D6, 0x06D706D8, 0x06D906DA, 0x06DB06DC, 0x06DD06DE, 0x06DF06E0, 0x06E106E2, 0x06E306E4, 0x06E506E6, 0x06E706E8, 0x06E906EA, 0x06EB06EC, 0x06ED06EE, 0x06EF06F0, 0x06F106F2, 0x06F306F4, 0x06F506F6, 0x06F706F8, 0x06F906FA, 0x06FB06FC, 0x06FD06FE, 0x06FF0700, 0x07010702, 0x07030704, 0x07050706, 0x07070708, 0x0709070A, 0x070B070C, 0x070D070E, 0x070F0710, 0x07110712, 0x07130714, 0x07150716, 0x07170718, 0x0719071A, 0x071B071C, 0x071D071E, 0x071F0720, 0x07210722, 0x07230724, 0x07250726, 0x07270728, 0x0729072A, 0x072B072C, 0x072D072E, 0x072F0730, 0x07310732, 0x07330734, 0x07350736, 0x07370738, 0x0739073A, 0x073B073C, 0x073D073E, 0x073F0740, 0x07410742, 0x07430744, 0x07450746, 0x07470748, 0x0749074A, 0x074B074C, 0x074D074E, 0x074F0750, 0x07510752, 0x07530754, 0x07550756, 0x07570758, 0x0759075A, 0x075B075C, 0x075D075E, 0x075F0760, 0x07610762, 0x07630764, 0x07650766, 0x07670768, 0x0769076A, 0x076B076C, 0x076D076E, 0x076F0770, 0x07710772, 0x07730774, 0x07750776, 0x07770778, 0x0779077A, 0x077B077C, 0x077D077E, 0x077F0780, 0x07810782, 0x07830784, 0x07850786, 0x07870788, 0x0789078A, 0x078B078C, 0x078D078E, 0x078F0790, 0x07910792, 0x07930794, 0x07950796, 0x07970798, 0x0799079A, 0x079B079C, 0x079D079E, 0x079F07A0, 0x07A107A2, 0x07A307A4, 0x07A507A6, 0x07A707A8, 0x07A907AA, 0x07AB07AC, 0x07AD07AE, 0x07AF07B0, 0x07B107B2, 0x07B307B4, 0x07B507B6, 0x07B707B8, 0x07B907BA, 0x07BB07BC, 0x07BD07BE, 0x07BF07C0, 0x07C107C2, 0x07C307C4, 0x07C507C6, 0x07C707C8, 0x07C907CA, 0x07CB07CC, 0x07CD07CE, 0x07CF07D0, 0x07D107D2, 0x07D307D4, 0x07D507D6, 0x07D707D8, 0x07D907DA, 0x07DB07DC, 0x07DD07DE, 0x07DF07E0, 0x07E107E2, 0x07E307E4, 0x07E507E6, 0x07E707E8, 0x07E907EA, 0x07EB07EC, 0x07ED07EE, 0x07EF07F0, 0x07F107F2, 0x07F307F4, 0x07F507F6, 0x07F707F8, 0x07F907FA, 0x07FB07FC, 0x07FD07FE, 0x07FF0800, 0x08010802, 0x08030804, 0x08050806, 0x08070808, 0x0809080A, 0x080B080C, 0x080D080E, 0x080F0810, 0x08110812, 0x08130814, 0x08150816, 0x08170818, 0x0819081A, 0x081B081C, 0x081D081E, 0x081F0820, 0x08210822, 0x08230824, 0x08250826, 0x08270828, 0x0829082A, 0x082B082C, 0x082D082E, 0x082F0830, 0x08310832, 0x08330834, 0x08350836, 0x08370838, 0x0839083A, 0x083B083C, 0x083D083E, 0x083F0840, 0x08410842, 0x08430844, 0x08450846, 0x08470848, 0x0849084A, 0x084B084C, 0x084D084E, 0x084F0850, 0x08510852, 0x08530854, 0x08550856, 0x08570858, 0x0859085A, 0x085B085C, 0x085D085E, 0x085F0860, 0x08610862, 0x08630864, 0x08650866, 0x08670868, 0x0869086A, 0x086B086C, 0x086D086E, 0x086F0870, 0x08710872, 0x08730874, 0x08750876, 0x08770878, 0x0879087A, 0x087B087C, 0x087D087E, 0x087F0880, 0x08810882, 0x08830884, 0x08850886, 0x08870888, 0x0889088A, 0x088B088C, 0x088D088E, 0x088F0890, 0x08910892, 0x08930894, 0x08950896, 0x08970898, 0x0899089A, 0x089B089C, 0x089D089E, 0x089F08A0, 0x08A108A2, 0x08A308A4, 0x08A508A6, 0x08A708A8, 0x08A908AA, 0x08AB08AC, 0x08AD08AE, 0x08AF08B0, 0x08B108B2, 0x08B308B4, 0x08B508B6, 0x08B708B8, 0x08B908BA, 0x08BB08BC, 0x08BD08BE, 0x08BF08C0, 0x08C108C2, 0x08C308C4, 0x08C508C6, 0x08C708C8, 0x08C908CA, 0x08CB08CC, 0x08CD08CE, 0x08CF08D0, 0x08D108D2, 0x08D308D4, 0x08D508D6, 0x08D708D8, 0x08D908DA, 0x08DB08DC, 0x08DD08DE, 0x08DF08E0, 0x08E108E2, 0x08E308E4, 0x08E508E6, 0x08E708E8, 0x08E908EA, 0x08EB08EC, 0x08ED08EE, 0x08EF08F0, 0x08F108F2, 0x08F308F4, 0x08F508F6, 0x08F708F8, 0x08F908FA, 0x08FB08FC, 0x08FD08FE, 0x08FF0900, 0x09010902, 0x09030904, 0x09050906, 0x09070908, 0x0909090A, 0x090B090C, 0x090D090E, 0x090F0910, 0x09110912, 0x09130914, 0x09150916, 0x09170918, 0x0919091A, 0x091B091C, 0x091D091E, 0x091F0920, 0x09210922, 0x09230924, 0x09250926, 0x09270928, 0x0929092A, 0x092B092C, 0x092D092E, 0x092F0930, 0x09310932, 0x09330934, 0x09350936, 0x09370938, 0x0939093A, 0x093B093C, 0x093D093E, 0x093F0940, 0x09410942, 0x09430944, 0x09450946, 0x09470948, 0x0949094A, 0x094B094C, 0x094D094E, 0x094F0950, 0x09510952, 0x09530954, 0x09550956, 0x09570958, 0x0959095A, 0x095B095C, 0x095D095E, 0x095F0960, 0x09610962, 0x09630964, 0x09650966, 0x09670968, 0x0969096A, 0x096B096C, 0x096D096E, 0x096F0970, 0x09710972, 0x09730974, 0x09750976, 0x09770978, 0x0979097A, 0x097B097C, 0x097D097E, 0x097F0980, 0x09810982, 0x09830984, 0x09850986, 0x09870988, 0x0989098A, 0x098B098C, 0x098D098E, 0x098F0990, 0x09910992, 0x09930994, 0x09950996, 0x09970998, 0x0999099A, 0x099B099C, 0x099D099E, 0x099F09A0, 0x09A109A2, 0x09A309A4, 0x09A509A6, 0x09A709A8, 0x09A909AA, 0x09AB09AC, 0x09AD09AE, 0x09AF09B0, 0x09B109B2, 0x09B309B4, 0x09B509B6, 0x09B709B8, 0x09B909BA, 0x09BB09BC, 0x09BD09BE, 0x09BF09C0, 0x09C109C2, 0x09C309C4, 0x09C509C6, 0x09C709C8, 0x09C909CA, 0x09CB09CC, 0x09CD09CE, 0x09CF09D0, 0x09D109D2, 0x09D309D4, 0x09D509D6, 0x09D709D8, 0x09D909DA, 0x09DB09DC, 0x09DD09DE, 0x09DF09E0, 0x09E109E2, 0x09E309E4, 0x09E509E6, 0x09E709E8, 0x09E909EA, 0x09EB09EC, 0x09ED09EE, 0x09EF09F0, 0x09F109F2, 0x09F309F4, 0x09F509F6, 0x09F709F8, 0x09F909FA, 0x09FB09FC, 0x09FD09FE, 0x09FF0A00};
	u32 B[2560];
	matrix_SA_mult(S, A, B);

	u32 A2[1280] = {0x00010002, 0x00030004, 0x00050006, 0x00070008, 0x0009000A, 0x000B000C, 0x000D000E, 0x000F0010, 0x00110012, 0x00130014, 0x00150016, 0x00170018, 0x0019001A, 0x001B001C, 0x001D001E, 0x001F0020, 0x00210022, 0x00230024, 0x00250026, 0x00270028, 0x0029002A, 0x002B002C, 0x002D002E, 0x002F0030, 0x00310032, 0x00330034, 0x00350036, 0x00370038, 0x0039003A, 0x003B003C, 0x003D003E, 0x003F0040, 0x00410042, 0x00430044, 0x00450046, 0x00470048, 0x0049004A, 0x004B004C, 0x004D004E, 0x004F0050, 0x00510052, 0x00530054, 0x00550056, 0x00570058, 0x0059005A, 0x005B005C, 0x005D005E, 0x005F0060, 0x00610062, 0x00630064, 0x00650066, 0x00670068, 0x0069006A, 0x006B006C, 0x006D006E, 0x006F0070, 0x00710072, 0x00730074, 0x00750076, 0x00770078, 0x0079007A, 0x007B007C, 0x007D007E, 0x007F0080, 0x00810082, 0x00830084, 0x00850086, 0x00870088, 0x0089008A, 0x008B008C, 0x008D008E, 0x008F0090, 0x00910092, 0x00930094, 0x00950096, 0x00970098, 0x0099009A, 0x009B009C, 0x009D009E, 0x009F00A0, 0x00A100A2, 0x00A300A4, 0x00A500A6, 0x00A700A8, 0x00A900AA, 0x00AB00AC, 0x00AD00AE, 0x00AF00B0, 0x00B100B2, 0x00B300B4, 0x00B500B6, 0x00B700B8, 0x00B900BA, 0x00BB00BC, 0x00BD00BE, 0x00BF00C0, 0x00C100C2, 0x00C300C4, 0x00C500C6, 0x00C700C8, 0x00C900CA, 0x00CB00CC, 0x00CD00CE, 0x00CF00D0, 0x00D100D2, 0x00D300D4, 0x00D500D6, 0x00D700D8, 0x00D900DA, 0x00DB00DC, 0x00DD00DE, 0x00DF00E0, 0x00E100E2, 0x00E300E4, 0x00E500E6, 0x00E700E8, 0x00E900EA, 0x00EB00EC, 0x00ED00EE, 0x00EF00F0, 0x00F100F2, 0x00F300F4, 0x00F500F6, 0x00F700F8, 0x00F900FA, 0x00FB00FC, 0x00FD00FE, 0x00FF0100, 0x01010102, 0x01030104, 0x01050106, 0x01070108, 0x0109010A, 0x010B010C, 0x010D010E, 0x010F0110, 0x01110112, 0x01130114, 0x01150116, 0x01170118, 0x0119011A, 0x011B011C, 0x011D011E, 0x011F0120, 0x01210122, 0x01230124, 0x01250126, 0x01270128, 0x0129012A, 0x012B012C, 0x012D012E, 0x012F0130, 0x01310132, 0x01330134, 0x01350136, 0x01370138, 0x0139013A, 0x013B013C, 0x013D013E, 0x013F0140, 0x01410142, 0x01430144, 0x01450146, 0x01470148, 0x0149014A, 0x014B014C, 0x014D014E, 0x014F0150, 0x01510152, 0x01530154, 0x01550156, 0x01570158, 0x0159015A, 0x015B015C, 0x015D015E, 0x015F0160, 0x01610162, 0x01630164, 0x01650166, 0x01670168, 0x0169016A, 0x016B016C, 0x016D016E, 0x016F0170, 0x01710172, 0x01730174, 0x01750176, 0x01770178, 0x0179017A, 0x017B017C, 0x017D017E, 0x017F0180, 0x01810182, 0x01830184, 0x01850186, 0x01870188, 0x0189018A, 0x018B018C, 0x018D018E, 0x018F0190, 0x01910192, 0x01930194, 0x01950196, 0x01970198, 0x0199019A, 0x019B019C, 0x019D019E, 0x019F01A0, 0x01A101A2, 0x01A301A4, 0x01A501A6, 0x01A701A8, 0x01A901AA, 0x01AB01AC, 0x01AD01AE, 0x01AF01B0, 0x01B101B2, 0x01B301B4, 0x01B501B6, 0x01B701B8, 0x01B901BA, 0x01BB01BC, 0x01BD01BE, 0x01BF01C0, 0x01C101C2, 0x01C301C4, 0x01C501C6, 0x01C701C8, 0x01C901CA, 0x01CB01CC, 0x01CD01CE, 0x01CF01D0, 0x01D101D2, 0x01D301D4, 0x01D501D6, 0x01D701D8, 0x01D901DA, 0x01DB01DC, 0x01DD01DE, 0x01DF01E0, 0x01E101E2, 0x01E301E4, 0x01E501E6, 0x01E701E8, 0x01E901EA, 0x01EB01EC, 0x01ED01EE, 0x01EF01F0, 0x01F101F2, 0x01F301F4, 0x01F501F6, 0x01F701F8, 0x01F901FA, 0x01FB01FC, 0x01FD01FE, 0x01FF0200, 0x02010202, 0x02030204, 0x02050206, 0x02070208, 0x0209020A, 0x020B020C, 0x020D020E, 0x020F0210, 0x02110212, 0x02130214, 0x02150216, 0x02170218, 0x0219021A, 0x021B021C, 0x021D021E, 0x021F0220, 0x02210222, 0x02230224, 0x02250226, 0x02270228, 0x0229022A, 0x022B022C, 0x022D022E, 0x022F0230, 0x02310232, 0x02330234, 0x02350236, 0x02370238, 0x0239023A, 0x023B023C, 0x023D023E, 0x023F0240, 0x02410242, 0x02430244, 0x02450246, 0x02470248, 0x0249024A, 0x024B024C, 0x024D024E, 0x024F0250, 0x02510252, 0x02530254, 0x02550256, 0x02570258, 0x0259025A, 0x025B025C, 0x025D025E, 0x025F0260, 0x02610262, 0x02630264, 0x02650266, 0x02670268, 0x0269026A, 0x026B026C, 0x026D026E, 0x026F0270, 0x02710272, 0x02730274, 0x02750276, 0x02770278, 0x0279027A, 0x027B027C, 0x027D027E, 0x027F0280, 0x02810282, 0x02830284, 0x02850286, 0x02870288, 0x0289028A, 0x028B028C, 0x028D028E, 0x028F0290, 0x02910292, 0x02930294, 0x02950296, 0x02970298, 0x0299029A, 0x029B029C, 0x029D029E, 0x029F02A0, 0x02A102A2, 0x02A302A4, 0x02A502A6, 0x02A702A8, 0x02A902AA, 0x02AB02AC, 0x02AD02AE, 0x02AF02B0, 0x02B102B2, 0x02B302B4, 0x02B502B6, 0x02B702B8, 0x02B902BA, 0x02BB02BC, 0x02BD02BE, 0x02BF02C0, 0x02C102C2, 0x02C302C4, 0x02C502C6, 0x02C702C8, 0x02C902CA, 0x02CB02CC, 0x02CD02CE, 0x02CF02D0, 0x02D102D2, 0x02D302D4, 0x02D502D6, 0x02D702D8, 0x02D902DA, 0x02DB02DC, 0x02DD02DE, 0x02DF02E0, 0x02E102E2, 0x02E302E4, 0x02E502E6, 0x02E702E8, 0x02E902EA, 0x02EB02EC, 0x02ED02EE, 0x02EF02F0, 0x02F102F2, 0x02F302F4, 0x02F502F6, 0x02F702F8, 0x02F902FA, 0x02FB02FC, 0x02FD02FE, 0x02FF0300, 0x03010302, 0x03030304, 0x03050306, 0x03070308, 0x0309030A, 0x030B030C, 0x030D030E, 0x030F0310, 0x03110312, 0x03130314, 0x03150316, 0x03170318, 0x0319031A, 0x031B031C, 0x031D031E, 0x031F0320, 0x03210322, 0x03230324, 0x03250326, 0x03270328, 0x0329032A, 0x032B032C, 0x032D032E, 0x032F0330, 0x03310332, 0x03330334, 0x03350336, 0x03370338, 0x0339033A, 0x033B033C, 0x033D033E, 0x033F0340, 0x03410342, 0x03430344, 0x03450346, 0x03470348, 0x0349034A, 0x034B034C, 0x034D034E, 0x034F0350, 0x03510352, 0x03530354, 0x03550356, 0x03570358, 0x0359035A, 0x035B035C, 0x035D035E, 0x035F0360, 0x03610362, 0x03630364, 0x03650366, 0x03670368, 0x0369036A, 0x036B036C, 0x036D036E, 0x036F0370, 0x03710372, 0x03730374, 0x03750376, 0x03770378, 0x0379037A, 0x037B037C, 0x037D037E, 0x037F0380, 0x03810382, 0x03830384, 0x03850386, 0x03870388, 0x0389038A, 0x038B038C, 0x038D038E, 0x038F0390, 0x03910392, 0x03930394, 0x03950396, 0x03970398, 0x0399039A, 0x039B039C, 0x039D039E, 0x039F03A0, 0x03A103A2, 0x03A303A4, 0x03A503A6, 0x03A703A8, 0x03A903AA, 0x03AB03AC, 0x03AD03AE, 0x03AF03B0, 0x03B103B2, 0x03B303B4, 0x03B503B6, 0x03B703B8, 0x03B903BA, 0x03BB03BC, 0x03BD03BE, 0x03BF03C0, 0x03C103C2, 0x03C303C4, 0x03C503C6, 0x03C703C8, 0x03C903CA, 0x03CB03CC, 0x03CD03CE, 0x03CF03D0, 0x03D103D2, 0x03D303D4, 0x03D503D6, 0x03D703D8, 0x03D903DA, 0x03DB03DC, 0x03DD03DE, 0x03DF03E0, 0x03E103E2, 0x03E303E4, 0x03E503E6, 0x03E703E8, 0x03E903EA, 0x03EB03EC, 0x03ED03EE, 0x03EF03F0, 0x03F103F2, 0x03F303F4, 0x03F503F6, 0x03F703F8, 0x03F903FA, 0x03FB03FC, 0x03FD03FE, 0x03FF0400, 0x04010402, 0x04030404, 0x04050406, 0x04070408, 0x0409040A, 0x040B040C, 0x040D040E, 0x040F0410, 0x04110412, 0x04130414, 0x04150416, 0x04170418, 0x0419041A, 0x041B041C, 0x041D041E, 0x041F0420, 0x04210422, 0x04230424, 0x04250426, 0x04270428, 0x0429042A, 0x042B042C, 0x042D042E, 0x042F0430, 0x04310432, 0x04330434, 0x04350436, 0x04370438, 0x0439043A, 0x043B043C, 0x043D043E, 0x043F0440, 0x04410442, 0x04430444, 0x04450446, 0x04470448, 0x0449044A, 0x044B044C, 0x044D044E, 0x044F0450, 0x04510452, 0x04530454, 0x04550456, 0x04570458, 0x0459045A, 0x045B045C, 0x045D045E, 0x045F0460, 0x04610462, 0x04630464, 0x04650466, 0x04670468, 0x0469046A, 0x046B046C, 0x046D046E, 0x046F0470, 0x04710472, 0x04730474, 0x04750476, 0x04770478, 0x0479047A, 0x047B047C, 0x047D047E, 0x047F0480, 0x04810482, 0x04830484, 0x04850486, 0x04870488, 0x0489048A, 0x048B048C, 0x048D048E, 0x048F0490, 0x04910492, 0x04930494, 0x04950496, 0x04970498, 0x0499049A, 0x049B049C, 0x049D049E, 0x049F04A0, 0x04A104A2, 0x04A304A4, 0x04A504A6, 0x04A704A8, 0x04A904AA, 0x04AB04AC, 0x04AD04AE, 0x04AF04B0, 0x04B104B2, 0x04B304B4, 0x04B504B6, 0x04B704B8, 0x04B904BA, 0x04BB04BC, 0x04BD04BE, 0x04BF04C0, 0x04C104C2, 0x04C304C4, 0x04C504C6, 0x04C704C8, 0x04C904CA, 0x04CB04CC, 0x04CD04CE, 0x04CF04D0, 0x04D104D2, 0x04D304D4, 0x04D504D6, 0x04D704D8, 0x04D904DA, 0x04DB04DC, 0x04DD04DE, 0x04DF04E0, 0x04E104E2, 0x04E304E4, 0x04E504E6, 0x04E704E8, 0x04E904EA, 0x04EB04EC, 0x04ED04EE, 0x04EF04F0, 0x04F104F2, 0x04F304F4, 0x04F504F6, 0x04F704F8, 0x04F904FA, 0x04FB04FC, 0x04FD04FE, 0x04FF0500, 0x05010502, 0x05030504, 0x05050506, 0x05070508, 0x0509050A, 0x050B050C, 0x050D050E, 0x050F0510, 0x05110512, 0x05130514, 0x05150516, 0x05170518, 0x0519051A, 0x051B051C, 0x051D051E, 0x051F0520, 0x05210522, 0x05230524, 0x05250526, 0x05270528, 0x0529052A, 0x052B052C, 0x052D052E, 0x052F0530, 0x05310532, 0x05330534, 0x05350536, 0x05370538, 0x0539053A, 0x053B053C, 0x053D053E, 0x053F0540, 0x05410542, 0x05430544, 0x05450546, 0x05470548, 0x0549054A, 0x054B054C, 0x054D054E, 0x054F0550, 0x05510552, 0x05530554, 0x05550556, 0x05570558, 0x0559055A, 0x055B055C, 0x055D055E, 0x055F0560, 0x05610562, 0x05630564, 0x05650566, 0x05670568, 0x0569056A, 0x056B056C, 0x056D056E, 0x056F0570, 0x05710572, 0x05730574, 0x05750576, 0x05770578, 0x0579057A, 0x057B057C, 0x057D057E, 0x057F0580, 0x05810582, 0x05830584, 0x05850586, 0x05870588, 0x0589058A, 0x058B058C, 0x058D058E, 0x058F0590, 0x05910592, 0x05930594, 0x05950596, 0x05970598, 0x0599059A, 0x059B059C, 0x059D059E, 0x059F05A0, 0x05A105A2, 0x05A305A4, 0x05A505A6, 0x05A705A8, 0x05A905AA, 0x05AB05AC, 0x05AD05AE, 0x05AF05B0, 0x05B105B2, 0x05B305B4, 0x05B505B6, 0x05B705B8, 0x05B905BA, 0x05BB05BC, 0x05BD05BE, 0x05BF05C0, 0x05C105C2, 0x05C305C4, 0x05C505C6, 0x05C705C8, 0x05C905CA, 0x05CB05CC, 0x05CD05CE, 0x05CF05D0, 0x05D105D2, 0x05D305D4, 0x05D505D6, 0x05D705D8, 0x05D905DA, 0x05DB05DC, 0x05DD05DE, 0x05DF05E0, 0x05E105E2, 0x05E305E4, 0x05E505E6, 0x05E705E8, 0x05E905EA, 0x05EB05EC, 0x05ED05EE, 0x05EF05F0, 0x05F105F2, 0x05F305F4, 0x05F505F6, 0x05F705F8, 0x05F905FA, 0x05FB05FC, 0x05FD05FE, 0x05FF0600, 0x06010602, 0x06030604, 0x06050606, 0x06070608, 0x0609060A, 0x060B060C, 0x060D060E, 0x060F0610, 0x06110612, 0x06130614, 0x06150616, 0x06170618, 0x0619061A, 0x061B061C, 0x061D061E, 0x061F0620, 0x06210622, 0x06230624, 0x06250626, 0x06270628, 0x0629062A, 0x062B062C, 0x062D062E, 0x062F0630, 0x06310632, 0x06330634, 0x06350636, 0x06370638, 0x0639063A, 0x063B063C, 0x063D063E, 0x063F0640, 0x06410642, 0x06430644, 0x06450646, 0x06470648, 0x0649064A, 0x064B064C, 0x064D064E, 0x064F0650, 0x06510652, 0x06530654, 0x06550656, 0x06570658, 0x0659065A, 0x065B065C, 0x065D065E, 0x065F0660, 0x06610662, 0x06630664, 0x06650666, 0x06670668, 0x0669066A, 0x066B066C, 0x066D066E, 0x066F0670, 0x06710672, 0x06730674, 0x06750676, 0x06770678, 0x0679067A, 0x067B067C, 0x067D067E, 0x067F0680, 0x06810682, 0x06830684, 0x06850686, 0x06870688, 0x0689068A, 0x068B068C, 0x068D068E, 0x068F0690, 0x06910692, 0x06930694, 0x06950696, 0x06970698, 0x0699069A, 0x069B069C, 0x069D069E, 0x069F06A0, 0x06A106A2, 0x06A306A4, 0x06A506A6, 0x06A706A8, 0x06A906AA, 0x06AB06AC, 0x06AD06AE, 0x06AF06B0, 0x06B106B2, 0x06B306B4, 0x06B506B6, 0x06B706B8, 0x06B906BA, 0x06BB06BC, 0x06BD06BE, 0x06BF06C0, 0x06C106C2, 0x06C306C4, 0x06C506C6, 0x06C706C8, 0x06C906CA, 0x06CB06CC, 0x06CD06CE, 0x06CF06D0, 0x06D106D2, 0x06D306D4, 0x06D506D6, 0x06D706D8, 0x06D906DA, 0x06DB06DC, 0x06DD06DE, 0x06DF06E0, 0x06E106E2, 0x06E306E4, 0x06E506E6, 0x06E706E8, 0x06E906EA, 0x06EB06EC, 0x06ED06EE, 0x06EF06F0, 0x06F106F2, 0x06F306F4, 0x06F506F6, 0x06F706F8, 0x06F906FA, 0x06FB06FC, 0x06FD06FE, 0x06FF0700, 0x07010702, 0x07030704, 0x07050706, 0x07070708, 0x0709070A, 0x070B070C, 0x070D070E, 0x070F0710, 0x07110712, 0x07130714, 0x07150716, 0x07170718, 0x0719071A, 0x071B071C, 0x071D071E, 0x071F0720, 0x07210722, 0x07230724, 0x07250726, 0x07270728, 0x0729072A, 0x072B072C, 0x072D072E, 0x072F0730, 0x07310732, 0x07330734, 0x07350736, 0x07370738, 0x0739073A, 0x073B073C, 0x073D073E, 0x073F0740, 0x07410742, 0x07430744, 0x07450746, 0x07470748, 0x0749074A, 0x074B074C, 0x074D074E, 0x074F0750, 0x07510752, 0x07530754, 0x07550756, 0x07570758, 0x0759075A, 0x075B075C, 0x075D075E, 0x075F0760, 0x07610762, 0x07630764, 0x07650766, 0x07670768, 0x0769076A, 0x076B076C, 0x076D076E, 0x076F0770, 0x07710772, 0x07730774, 0x07750776, 0x07770778, 0x0779077A, 0x077B077C, 0x077D077E, 0x077F0780, 0x07810782, 0x07830784, 0x07850786, 0x07870788, 0x0789078A, 0x078B078C, 0x078D078E, 0x078F0790, 0x07910792, 0x07930794, 0x07950796, 0x07970798, 0x0799079A, 0x079B079C, 0x079D079E, 0x079F07A0, 0x07A107A2, 0x07A307A4, 0x07A507A6, 0x07A707A8, 0x07A907AA, 0x07AB07AC, 0x07AD07AE, 0x07AF07B0, 0x07B107B2, 0x07B307B4, 0x07B507B6, 0x07B707B8, 0x07B907BA, 0x07BB07BC, 0x07BD07BE, 0x07BF07C0, 0x07C107C2, 0x07C307C4, 0x07C507C6, 0x07C707C8, 0x07C907CA, 0x07CB07CC, 0x07CD07CE, 0x07CF07D0,
					0x07D107D2, 0x07D307D4, 0x07D507D6, 0x07D707D8, 0x07D907DA, 0x07DB07DC, 0x07DD07DE, 0x07DF07E0, 0x07E107E2, 0x07E307E4, 0x07E507E6, 0x07E707E8, 0x07E907EA, 0x07EB07EC, 0x07ED07EE, 0x07EF07F0, 0x07F107F2, 0x07F307F4, 0x07F507F6, 0x07F707F8, 0x07F907FA, 0x07FB07FC, 0x07FD07FE, 0x07FF0800, 0x08010802, 0x08030804, 0x08050806, 0x08070808, 0x0809080A, 0x080B080C, 0x080D080E, 0x080F0810, 0x08110812, 0x08130814, 0x08150816, 0x08170818, 0x0819081A, 0x081B081C, 0x081D081E, 0x081F0820, 0x08210822, 0x08230824, 0x08250826, 0x08270828, 0x0829082A, 0x082B082C, 0x082D082E, 0x082F0830, 0x08310832, 0x08330834, 0x08350836, 0x08370838, 0x0839083A, 0x083B083C, 0x083D083E, 0x083F0840, 0x08410842, 0x08430844, 0x08450846, 0x08470848, 0x0849084A, 0x084B084C, 0x084D084E, 0x084F0850, 0x08510852, 0x08530854, 0x08550856, 0x08570858, 0x0859085A, 0x085B085C, 0x085D085E, 0x085F0860, 0x08610862, 0x08630864, 0x08650866, 0x08670868, 0x0869086A, 0x086B086C, 0x086D086E, 0x086F0870, 0x08710872, 0x08730874, 0x08750876, 0x08770878, 0x0879087A, 0x087B087C, 0x087D087E, 0x087F0880, 0x08810882, 0x08830884, 0x08850886, 0x08870888, 0x0889088A, 0x088B088C, 0x088D088E, 0x088F0890, 0x08910892, 0x08930894, 0x08950896, 0x08970898, 0x0899089A, 0x089B089C, 0x089D089E, 0x089F08A0, 0x08A108A2, 0x08A308A4, 0x08A508A6, 0x08A708A8, 0x08A908AA, 0x08AB08AC, 0x08AD08AE, 0x08AF08B0, 0x08B108B2, 0x08B308B4, 0x08B508B6, 0x08B708B8, 0x08B908BA, 0x08BB08BC, 0x08BD08BE, 0x08BF08C0, 0x08C108C2, 0x08C308C4, 0x08C508C6, 0x08C708C8, 0x08C908CA, 0x08CB08CC, 0x08CD08CE, 0x08CF08D0, 0x08D108D2, 0x08D308D4, 0x08D508D6, 0x08D708D8, 0x08D908DA, 0x08DB08DC, 0x08DD08DE, 0x08DF08E0, 0x08E108E2, 0x08E308E4, 0x08E508E6, 0x08E708E8, 0x08E908EA, 0x08EB08EC, 0x08ED08EE, 0x08EF08F0, 0x08F108F2, 0x08F308F4, 0x08F508F6, 0x08F708F8, 0x08F908FA, 0x08FB08FC, 0x08FD08FE, 0x08FF0900, 0x09010902, 0x09030904, 0x09050906, 0x09070908, 0x0909090A, 0x090B090C, 0x090D090E, 0x090F0910, 0x09110912, 0x09130914, 0x09150916, 0x09170918, 0x0919091A, 0x091B091C, 0x091D091E, 0x091F0920, 0x09210922, 0x09230924, 0x09250926, 0x09270928, 0x0929092A, 0x092B092C, 0x092D092E, 0x092F0930, 0x09310932, 0x09330934, 0x09350936, 0x09370938, 0x0939093A, 0x093B093C, 0x093D093E, 0x093F0940, 0x09410942, 0x09430944, 0x09450946, 0x09470948, 0x0949094A, 0x094B094C, 0x094D094E, 0x094F0950, 0x09510952, 0x09530954, 0x09550956, 0x09570958, 0x0959095A, 0x095B095C, 0x095D095E, 0x095F0960, 0x09610962, 0x09630964, 0x09650966, 0x09670968, 0x0969096A, 0x096B096C, 0x096D096E, 0x096F0970, 0x09710972, 0x09730974, 0x09750976, 0x09770978, 0x0979097A, 0x097B097C, 0x097D097E, 0x097F0980, 0x09810982, 0x09830984, 0x09850986, 0x09870988, 0x0989098A, 0x098B098C, 0x098D098E, 0x098F0990, 0x09910992, 0x09930994, 0x09950996, 0x09970998, 0x0999099A, 0x099B099C, 0x099D099E, 0x099F09A0, 0x09A109A2, 0x09A309A4, 0x09A509A6, 0x09A709A8, 0x09A909AA, 0x09AB09AC, 0x09AD09AE, 0x09AF09B0, 0x09B109B2, 0x09B309B4, 0x09B509B6, 0x09B709B8, 0x09B909BA, 0x09BB09BC, 0x09BD09BE, 0x09BF09C0, 0x09C109C2, 0x09C309C4, 0x09C509C6, 0x09C709C8, 0x09C909CA, 0x09CB09CC, 0x09CD09CE, 0x09CF09D0, 0x09D109D2, 0x09D309D4, 0x09D509D6, 0x09D709D8, 0x09D909DA, 0x09DB09DC, 0x09DD09DE, 0x09DF09E0, 0x09E109E2, 0x09E309E4, 0x09E509E6, 0x09E709E8, 0x09E909EA, 0x09EB09EC, 0x09ED09EE, 0x09EF09F0, 0x09F109F2, 0x09F309F4, 0x09F509F6, 0x09F709F8, 0x09F909FA, 0x09FB09FC, 0x09FD09FE, 0x09FF0A00};
	u32 S2[2560] = {0x00010002, 0x00030004, 0x00050006, 0x00070008, 0x0009000A, 0x000B000C, 0x000D000E, 0x000F0010, 0x00110012, 0x00130014, 0x00150016, 0x00170018, 0x0019001A, 0x001B001C, 0x001D001E, 0x001F0020, 0x00210022, 0x00230024, 0x00250026, 0x00270028, 0x0029002A, 0x002B002C, 0x002D002E, 0x002F0030, 0x00310032, 0x00330034, 0x00350036, 0x00370038, 0x0039003A, 0x003B003C, 0x003D003E, 0x003F0040, 0x00410042, 0x00430044, 0x00450046, 0x00470048, 0x0049004A, 0x004B004C, 0x004D004E, 0x004F0050, 0x00510052, 0x00530054, 0x00550056, 0x00570058, 0x0059005A, 0x005B005C, 0x005D005E, 0x005F0060, 0x00610062, 0x00630064, 0x00650066, 0x00670068, 0x0069006A, 0x006B006C, 0x006D006E, 0x006F0070, 0x00710072, 0x00730074, 0x00750076, 0x00770078, 0x0079007A, 0x007B007C, 0x007D007E, 0x007F0080, 0x00810082, 0x00830084, 0x00850086, 0x00870088, 0x0089008A, 0x008B008C, 0x008D008E, 0x008F0090, 0x00910092, 0x00930094, 0x00950096, 0x00970098, 0x0099009A, 0x009B009C, 0x009D009E, 0x009F00A0, 0x00A100A2, 0x00A300A4, 0x00A500A6, 0x00A700A8, 0x00A900AA, 0x00AB00AC, 0x00AD00AE, 0x00AF00B0, 0x00B100B2, 0x00B300B4, 0x00B500B6, 0x00B700B8, 0x00B900BA, 0x00BB00BC, 0x00BD00BE, 0x00BF00C0, 0x00C100C2, 0x00C300C4, 0x00C500C6, 0x00C700C8, 0x00C900CA, 0x00CB00CC, 0x00CD00CE, 0x00CF00D0, 0x00D100D2, 0x00D300D4, 0x00D500D6, 0x00D700D8, 0x00D900DA, 0x00DB00DC, 0x00DD00DE, 0x00DF00E0, 0x00E100E2, 0x00E300E4, 0x00E500E6, 0x00E700E8, 0x00E900EA, 0x00EB00EC, 0x00ED00EE, 0x00EF00F0, 0x00F100F2, 0x00F300F4, 0x00F500F6, 0x00F700F8, 0x00F900FA, 0x00FB00FC, 0x00FD00FE, 0x00FF0100, 0x01010102, 0x01030104, 0x01050106, 0x01070108, 0x0109010A, 0x010B010C, 0x010D010E, 0x010F0110, 0x01110112, 0x01130114, 0x01150116, 0x01170118, 0x0119011A, 0x011B011C, 0x011D011E, 0x011F0120, 0x01210122, 0x01230124, 0x01250126, 0x01270128, 0x0129012A, 0x012B012C, 0x012D012E, 0x012F0130, 0x01310132, 0x01330134, 0x01350136, 0x01370138, 0x0139013A, 0x013B013C, 0x013D013E, 0x013F0140, 0x01410142, 0x01430144, 0x01450146, 0x01470148, 0x0149014A, 0x014B014C, 0x014D014E, 0x014F0150, 0x01510152, 0x01530154, 0x01550156, 0x01570158, 0x0159015A, 0x015B015C, 0x015D015E, 0x015F0160, 0x01610162, 0x01630164, 0x01650166, 0x01670168, 0x0169016A, 0x016B016C, 0x016D016E, 0x016F0170, 0x01710172, 0x01730174, 0x01750176, 0x01770178, 0x0179017A, 0x017B017C, 0x017D017E, 0x017F0180, 0x01810182, 0x01830184, 0x01850186, 0x01870188, 0x0189018A, 0x018B018C, 0x018D018E, 0x018F0190, 0x01910192, 0x01930194, 0x01950196, 0x01970198, 0x0199019A, 0x019B019C, 0x019D019E, 0x019F01A0, 0x01A101A2, 0x01A301A4, 0x01A501A6, 0x01A701A8, 0x01A901AA, 0x01AB01AC, 0x01AD01AE, 0x01AF01B0, 0x01B101B2, 0x01B301B4, 0x01B501B6, 0x01B701B8, 0x01B901BA, 0x01BB01BC, 0x01BD01BE, 0x01BF01C0, 0x01C101C2, 0x01C301C4, 0x01C501C6, 0x01C701C8, 0x01C901CA, 0x01CB01CC, 0x01CD01CE, 0x01CF01D0, 0x01D101D2, 0x01D301D4, 0x01D501D6, 0x01D701D8, 0x01D901DA, 0x01DB01DC, 0x01DD01DE, 0x01DF01E0, 0x01E101E2, 0x01E301E4, 0x01E501E6, 0x01E701E8, 0x01E901EA, 0x01EB01EC, 0x01ED01EE, 0x01EF01F0, 0x01F101F2, 0x01F301F4, 0x01F501F6, 0x01F701F8, 0x01F901FA, 0x01FB01FC, 0x01FD01FE, 0x01FF0200, 0x02010202, 0x02030204, 0x02050206, 0x02070208, 0x0209020A, 0x020B020C, 0x020D020E, 0x020F0210, 0x02110212, 0x02130214, 0x02150216, 0x02170218, 0x0219021A, 0x021B021C, 0x021D021E, 0x021F0220, 0x02210222, 0x02230224, 0x02250226, 0x02270228, 0x0229022A, 0x022B022C, 0x022D022E, 0x022F0230, 0x02310232, 0x02330234, 0x02350236, 0x02370238, 0x0239023A, 0x023B023C, 0x023D023E, 0x023F0240, 0x02410242, 0x02430244, 0x02450246, 0x02470248, 0x0249024A, 0x024B024C, 0x024D024E, 0x024F0250, 0x02510252, 0x02530254, 0x02550256, 0x02570258, 0x0259025A, 0x025B025C, 0x025D025E, 0x025F0260, 0x02610262, 0x02630264, 0x02650266, 0x02670268, 0x0269026A, 0x026B026C, 0x026D026E, 0x026F0270, 0x02710272, 0x02730274, 0x02750276, 0x02770278, 0x0279027A, 0x027B027C, 0x027D027E, 0x027F0280, 0x02810282, 0x02830284, 0x02850286, 0x02870288, 0x0289028A, 0x028B028C, 0x028D028E, 0x028F0290, 0x02910292, 0x02930294, 0x02950296, 0x02970298, 0x0299029A, 0x029B029C, 0x029D029E, 0x029F02A0, 0x02A102A2, 0x02A302A4, 0x02A502A6, 0x02A702A8, 0x02A902AA, 0x02AB02AC, 0x02AD02AE, 0x02AF02B0, 0x02B102B2, 0x02B302B4, 0x02B502B6, 0x02B702B8, 0x02B902BA, 0x02BB02BC, 0x02BD02BE, 0x02BF02C0, 0x02C102C2, 0x02C302C4, 0x02C502C6, 0x02C702C8, 0x02C902CA, 0x02CB02CC, 0x02CD02CE, 0x02CF02D0, 0x02D102D2, 0x02D302D4, 0x02D502D6, 0x02D702D8, 0x02D902DA, 0x02DB02DC, 0x02DD02DE, 0x02DF02E0, 0x02E102E2, 0x02E302E4, 0x02E502E6, 0x02E702E8, 0x02E902EA, 0x02EB02EC, 0x02ED02EE, 0x02EF02F0, 0x02F102F2, 0x02F302F4, 0x02F502F6, 0x02F702F8, 0x02F902FA, 0x02FB02FC, 0x02FD02FE, 0x02FF0300, 0x03010302, 0x03030304, 0x03050306, 0x03070308, 0x0309030A, 0x030B030C, 0x030D030E, 0x030F0310, 0x03110312, 0x03130314, 0x03150316, 0x03170318, 0x0319031A, 0x031B031C, 0x031D031E, 0x031F0320, 0x03210322, 0x03230324, 0x03250326, 0x03270328, 0x0329032A, 0x032B032C, 0x032D032E, 0x032F0330, 0x03310332, 0x03330334, 0x03350336, 0x03370338, 0x0339033A, 0x033B033C, 0x033D033E, 0x033F0340, 0x03410342, 0x03430344, 0x03450346, 0x03470348, 0x0349034A, 0x034B034C, 0x034D034E, 0x034F0350, 0x03510352, 0x03530354, 0x03550356, 0x03570358, 0x0359035A, 0x035B035C, 0x035D035E, 0x035F0360, 0x03610362, 0x03630364, 0x03650366, 0x03670368, 0x0369036A, 0x036B036C, 0x036D036E, 0x036F0370, 0x03710372, 0x03730374, 0x03750376, 0x03770378, 0x0379037A, 0x037B037C, 0x037D037E, 0x037F0380, 0x03810382, 0x03830384, 0x03850386, 0x03870388, 0x0389038A, 0x038B038C, 0x038D038E, 0x038F0390, 0x03910392, 0x03930394, 0x03950396, 0x03970398, 0x0399039A, 0x039B039C, 0x039D039E, 0x039F03A0, 0x03A103A2, 0x03A303A4, 0x03A503A6, 0x03A703A8, 0x03A903AA, 0x03AB03AC, 0x03AD03AE, 0x03AF03B0, 0x03B103B2, 0x03B303B4, 0x03B503B6, 0x03B703B8, 0x03B903BA, 0x03BB03BC, 0x03BD03BE, 0x03BF03C0, 0x03C103C2, 0x03C303C4, 0x03C503C6, 0x03C703C8, 0x03C903CA, 0x03CB03CC, 0x03CD03CE, 0x03CF03D0, 0x03D103D2, 0x03D303D4, 0x03D503D6, 0x03D703D8, 0x03D903DA, 0x03DB03DC, 0x03DD03DE, 0x03DF03E0, 0x03E103E2, 0x03E303E4, 0x03E503E6, 0x03E703E8, 0x03E903EA, 0x03EB03EC, 0x03ED03EE, 0x03EF03F0, 0x03F103F2, 0x03F303F4, 0x03F503F6, 0x03F703F8, 0x03F903FA, 0x03FB03FC, 0x03FD03FE, 0x03FF0400, 0x04010402, 0x04030404, 0x04050406, 0x04070408, 0x0409040A, 0x040B040C, 0x040D040E, 0x040F0410, 0x04110412, 0x04130414, 0x04150416, 0x04170418, 0x0419041A, 0x041B041C, 0x041D041E, 0x041F0420, 0x04210422, 0x04230424, 0x04250426, 0x04270428, 0x0429042A, 0x042B042C, 0x042D042E, 0x042F0430, 0x04310432, 0x04330434, 0x04350436, 0x04370438, 0x0439043A, 0x043B043C, 0x043D043E, 0x043F0440, 0x04410442, 0x04430444, 0x04450446, 0x04470448, 0x0449044A, 0x044B044C, 0x044D044E, 0x044F0450, 0x04510452, 0x04530454, 0x04550456, 0x04570458, 0x0459045A, 0x045B045C, 0x045D045E, 0x045F0460, 0x04610462, 0x04630464, 0x04650466, 0x04670468, 0x0469046A, 0x046B046C, 0x046D046E, 0x046F0470, 0x04710472, 0x04730474, 0x04750476, 0x04770478, 0x0479047A, 0x047B047C, 0x047D047E, 0x047F0480, 0x04810482, 0x04830484, 0x04850486, 0x04870488, 0x0489048A, 0x048B048C, 0x048D048E, 0x048F0490, 0x04910492, 0x04930494, 0x04950496, 0x04970498, 0x0499049A, 0x049B049C, 0x049D049E, 0x049F04A0, 0x04A104A2, 0x04A304A4, 0x04A504A6, 0x04A704A8, 0x04A904AA, 0x04AB04AC, 0x04AD04AE, 0x04AF04B0, 0x04B104B2, 0x04B304B4, 0x04B504B6, 0x04B704B8, 0x04B904BA, 0x04BB04BC, 0x04BD04BE, 0x04BF04C0, 0x04C104C2, 0x04C304C4, 0x04C504C6, 0x04C704C8, 0x04C904CA, 0x04CB04CC, 0x04CD04CE, 0x04CF04D0, 0x04D104D2, 0x04D304D4, 0x04D504D6, 0x04D704D8, 0x04D904DA, 0x04DB04DC, 0x04DD04DE, 0x04DF04E0, 0x04E104E2, 0x04E304E4, 0x04E504E6, 0x04E704E8, 0x04E904EA, 0x04EB04EC, 0x04ED04EE, 0x04EF04F0, 0x04F104F2, 0x04F304F4, 0x04F504F6, 0x04F704F8, 0x04F904FA, 0x04FB04FC, 0x04FD04FE, 0x04FF0500, 0x05010502, 0x05030504, 0x05050506, 0x05070508, 0x0509050A, 0x050B050C, 0x050D050E, 0x050F0510, 0x05110512, 0x05130514, 0x05150516, 0x05170518, 0x0519051A, 0x051B051C, 0x051D051E, 0x051F0520, 0x05210522, 0x05230524, 0x05250526, 0x05270528, 0x0529052A, 0x052B052C, 0x052D052E, 0x052F0530, 0x05310532, 0x05330534, 0x05350536, 0x05370538, 0x0539053A, 0x053B053C, 0x053D053E, 0x053F0540, 0x05410542, 0x05430544, 0x05450546, 0x05470548, 0x0549054A, 0x054B054C, 0x054D054E, 0x054F0550, 0x05510552, 0x05530554, 0x05550556, 0x05570558, 0x0559055A, 0x055B055C, 0x055D055E, 0x055F0560, 0x05610562, 0x05630564, 0x05650566, 0x05670568, 0x0569056A, 0x056B056C, 0x056D056E, 0x056F0570, 0x05710572, 0x05730574, 0x05750576, 0x05770578, 0x0579057A, 0x057B057C, 0x057D057E, 0x057F0580, 0x05810582, 0x05830584, 0x05850586, 0x05870588, 0x0589058A, 0x058B058C, 0x058D058E, 0x058F0590, 0x05910592, 0x05930594, 0x05950596, 0x05970598, 0x0599059A, 0x059B059C, 0x059D059E, 0x059F05A0, 0x05A105A2, 0x05A305A4, 0x05A505A6, 0x05A705A8, 0x05A905AA, 0x05AB05AC, 0x05AD05AE, 0x05AF05B0, 0x05B105B2, 0x05B305B4, 0x05B505B6, 0x05B705B8, 0x05B905BA, 0x05BB05BC, 0x05BD05BE, 0x05BF05C0, 0x05C105C2, 0x05C305C4, 0x05C505C6, 0x05C705C8, 0x05C905CA, 0x05CB05CC, 0x05CD05CE, 0x05CF05D0, 0x05D105D2, 0x05D305D4, 0x05D505D6, 0x05D705D8, 0x05D905DA, 0x05DB05DC, 0x05DD05DE, 0x05DF05E0, 0x05E105E2, 0x05E305E4, 0x05E505E6, 0x05E705E8, 0x05E905EA, 0x05EB05EC, 0x05ED05EE, 0x05EF05F0, 0x05F105F2, 0x05F305F4, 0x05F505F6, 0x05F705F8, 0x05F905FA, 0x05FB05FC, 0x05FD05FE, 0x05FF0600, 0x06010602, 0x06030604, 0x06050606, 0x06070608, 0x0609060A, 0x060B060C, 0x060D060E, 0x060F0610, 0x06110612, 0x06130614, 0x06150616, 0x06170618, 0x0619061A, 0x061B061C, 0x061D061E, 0x061F0620, 0x06210622, 0x06230624, 0x06250626, 0x06270628, 0x0629062A, 0x062B062C, 0x062D062E, 0x062F0630, 0x06310632, 0x06330634, 0x06350636, 0x06370638, 0x0639063A, 0x063B063C, 0x063D063E, 0x063F0640, 0x06410642, 0x06430644, 0x06450646, 0x06470648, 0x0649064A, 0x064B064C, 0x064D064E, 0x064F0650, 0x06510652, 0x06530654, 0x06550656, 0x06570658, 0x0659065A, 0x065B065C, 0x065D065E, 0x065F0660, 0x06610662, 0x06630664, 0x06650666, 0x06670668, 0x0669066A, 0x066B066C, 0x066D066E, 0x066F0670, 0x06710672, 0x06730674, 0x06750676, 0x06770678, 0x0679067A, 0x067B067C, 0x067D067E, 0x067F0680, 0x06810682, 0x06830684, 0x06850686, 0x06870688, 0x0689068A, 0x068B068C, 0x068D068E, 0x068F0690, 0x06910692, 0x06930694, 0x06950696, 0x06970698, 0x0699069A, 0x069B069C, 0x069D069E, 0x069F06A0, 0x06A106A2, 0x06A306A4, 0x06A506A6, 0x06A706A8, 0x06A906AA, 0x06AB06AC, 0x06AD06AE, 0x06AF06B0, 0x06B106B2, 0x06B306B4, 0x06B506B6, 0x06B706B8, 0x06B906BA, 0x06BB06BC, 0x06BD06BE, 0x06BF06C0, 0x06C106C2, 0x06C306C4, 0x06C506C6, 0x06C706C8, 0x06C906CA, 0x06CB06CC, 0x06CD06CE, 0x06CF06D0, 0x06D106D2, 0x06D306D4, 0x06D506D6, 0x06D706D8, 0x06D906DA, 0x06DB06DC, 0x06DD06DE, 0x06DF06E0, 0x06E106E2, 0x06E306E4, 0x06E506E6, 0x06E706E8, 0x06E906EA, 0x06EB06EC, 0x06ED06EE, 0x06EF06F0, 0x06F106F2, 0x06F306F4, 0x06F506F6, 0x06F706F8, 0x06F906FA, 0x06FB06FC, 0x06FD06FE, 0x06FF0700, 0x07010702, 0x07030704, 0x07050706, 0x07070708, 0x0709070A, 0x070B070C, 0x070D070E, 0x070F0710, 0x07110712, 0x07130714, 0x07150716, 0x07170718, 0x0719071A, 0x071B071C, 0x071D071E, 0x071F0720, 0x07210722, 0x07230724, 0x07250726, 0x07270728, 0x0729072A, 0x072B072C, 0x072D072E, 0x072F0730, 0x07310732, 0x07330734, 0x07350736, 0x07370738, 0x0739073A, 0x073B073C, 0x073D073E, 0x073F0740, 0x07410742, 0x07430744, 0x07450746, 0x07470748, 0x0749074A, 0x074B074C, 0x074D074E, 0x074F0750, 0x07510752, 0x07530754, 0x07550756, 0x07570758, 0x0759075A, 0x075B075C, 0x075D075E, 0x075F0760, 0x07610762, 0x07630764, 0x07650766, 0x07670768, 0x0769076A, 0x076B076C, 0x076D076E, 0x076F0770, 0x07710772, 0x07730774, 0x07750776, 0x07770778, 0x0779077A, 0x077B077C, 0x077D077E, 0x077F0780, 0x07810782, 0x07830784, 0x07850786, 0x07870788, 0x0789078A, 0x078B078C, 0x078D078E, 0x078F0790, 0x07910792, 0x07930794, 0x07950796, 0x07970798, 0x0799079A, 0x079B079C, 0x079D079E, 0x079F07A0, 0x07A107A2, 0x07A307A4, 0x07A507A6, 0x07A707A8, 0x07A907AA, 0x07AB07AC, 0x07AD07AE, 0x07AF07B0, 0x07B107B2, 0x07B307B4, 0x07B507B6, 0x07B707B8, 0x07B907BA, 0x07BB07BC, 0x07BD07BE, 0x07BF07C0, 0x07C107C2, 0x07C307C4, 0x07C507C6, 0x07C707C8, 0x07C907CA, 0x07CB07CC, 0x07CD07CE, 0x07CF07D0,
					0x07D107D2, 0x07D307D4, 0x07D507D6, 0x07D707D8, 0x07D907DA, 0x07DB07DC, 0x07DD07DE, 0x07DF07E0, 0x07E107E2, 0x07E307E4, 0x07E507E6, 0x07E707E8, 0x07E907EA, 0x07EB07EC, 0x07ED07EE, 0x07EF07F0, 0x07F107F2, 0x07F307F4, 0x07F507F6, 0x07F707F8, 0x07F907FA, 0x07FB07FC, 0x07FD07FE, 0x07FF0800, 0x08010802, 0x08030804, 0x08050806, 0x08070808, 0x0809080A, 0x080B080C, 0x080D080E, 0x080F0810, 0x08110812, 0x08130814, 0x08150816, 0x08170818, 0x0819081A, 0x081B081C, 0x081D081E, 0x081F0820, 0x08210822, 0x08230824, 0x08250826, 0x08270828, 0x0829082A, 0x082B082C, 0x082D082E, 0x082F0830, 0x08310832, 0x08330834, 0x08350836, 0x08370838, 0x0839083A, 0x083B083C, 0x083D083E, 0x083F0840, 0x08410842, 0x08430844, 0x08450846, 0x08470848, 0x0849084A, 0x084B084C, 0x084D084E, 0x084F0850, 0x08510852, 0x08530854, 0x08550856, 0x08570858, 0x0859085A, 0x085B085C, 0x085D085E, 0x085F0860, 0x08610862, 0x08630864, 0x08650866, 0x08670868, 0x0869086A, 0x086B086C, 0x086D086E, 0x086F0870, 0x08710872, 0x08730874, 0x08750876, 0x08770878, 0x0879087A, 0x087B087C, 0x087D087E, 0x087F0880, 0x08810882, 0x08830884, 0x08850886, 0x08870888, 0x0889088A, 0x088B088C, 0x088D088E, 0x088F0890, 0x08910892, 0x08930894, 0x08950896, 0x08970898, 0x0899089A, 0x089B089C, 0x089D089E, 0x089F08A0, 0x08A108A2, 0x08A308A4, 0x08A508A6, 0x08A708A8, 0x08A908AA, 0x08AB08AC, 0x08AD08AE, 0x08AF08B0, 0x08B108B2, 0x08B308B4, 0x08B508B6, 0x08B708B8, 0x08B908BA, 0x08BB08BC, 0x08BD08BE, 0x08BF08C0, 0x08C108C2, 0x08C308C4, 0x08C508C6, 0x08C708C8, 0x08C908CA, 0x08CB08CC, 0x08CD08CE, 0x08CF08D0, 0x08D108D2, 0x08D308D4, 0x08D508D6, 0x08D708D8, 0x08D908DA, 0x08DB08DC, 0x08DD08DE, 0x08DF08E0, 0x08E108E2, 0x08E308E4, 0x08E508E6, 0x08E708E8, 0x08E908EA, 0x08EB08EC, 0x08ED08EE, 0x08EF08F0, 0x08F108F2, 0x08F308F4, 0x08F508F6, 0x08F708F8, 0x08F908FA, 0x08FB08FC, 0x08FD08FE, 0x08FF0900, 0x09010902, 0x09030904, 0x09050906, 0x09070908, 0x0909090A, 0x090B090C, 0x090D090E, 0x090F0910, 0x09110912, 0x09130914, 0x09150916, 0x09170918, 0x0919091A, 0x091B091C, 0x091D091E, 0x091F0920, 0x09210922, 0x09230924, 0x09250926, 0x09270928, 0x0929092A, 0x092B092C, 0x092D092E, 0x092F0930, 0x09310932, 0x09330934, 0x09350936, 0x09370938, 0x0939093A, 0x093B093C, 0x093D093E, 0x093F0940, 0x09410942, 0x09430944, 0x09450946, 0x09470948, 0x0949094A, 0x094B094C, 0x094D094E, 0x094F0950, 0x09510952, 0x09530954, 0x09550956, 0x09570958, 0x0959095A, 0x095B095C, 0x095D095E, 0x095F0960, 0x09610962, 0x09630964, 0x09650966, 0x09670968, 0x0969096A, 0x096B096C, 0x096D096E, 0x096F0970, 0x09710972, 0x09730974, 0x09750976, 0x09770978, 0x0979097A, 0x097B097C, 0x097D097E, 0x097F0980, 0x09810982, 0x09830984, 0x09850986, 0x09870988, 0x0989098A, 0x098B098C, 0x098D098E, 0x098F0990, 0x09910992, 0x09930994, 0x09950996, 0x09970998, 0x0999099A, 0x099B099C, 0x099D099E, 0x099F09A0, 0x09A109A2, 0x09A309A4, 0x09A509A6, 0x09A709A8, 0x09A909AA, 0x09AB09AC, 0x09AD09AE, 0x09AF09B0, 0x09B109B2, 0x09B309B4, 0x09B509B6, 0x09B709B8, 0x09B909BA, 0x09BB09BC, 0x09BD09BE, 0x09BF09C0, 0x09C109C2, 0x09C309C4, 0x09C509C6, 0x09C709C8, 0x09C909CA, 0x09CB09CC, 0x09CD09CE, 0x09CF09D0, 0x09D109D2, 0x09D309D4, 0x09D509D6, 0x09D709D8, 0x09D909DA, 0x09DB09DC, 0x09DD09DE, 0x09DF09E0, 0x09E109E2, 0x09E309E4, 0x09E509E6, 0x09E709E8, 0x09E909EA, 0x09EB09EC, 0x09ED09EE, 0x09EF09F0, 0x09F109F2, 0x09F309F4, 0x09F509F6, 0x09F709F8, 0x09F909FA, 0x09FB09FC, 0x09FD09FE, 0x09FF0A00, 0x0A010A02, 0x0A030A04, 0x0A050A06, 0x0A070A08, 0x0A090A0A, 0x0A0B0A0C, 0x0A0D0A0E, 0x0A0F0A10, 0x0A110A12, 0x0A130A14, 0x0A150A16, 0x0A170A18, 0x0A190A1A, 0x0A1B0A1C, 0x0A1D0A1E, 0x0A1F0A20, 0x0A210A22, 0x0A230A24, 0x0A250A26, 0x0A270A28, 0x0A290A2A, 0x0A2B0A2C, 0x0A2D0A2E, 0x0A2F0A30, 0x0A310A32, 0x0A330A34, 0x0A350A36, 0x0A370A38, 0x0A390A3A, 0x0A3B0A3C, 0x0A3D0A3E, 0x0A3F0A40, 0x0A410A42, 0x0A430A44, 0x0A450A46, 0x0A470A48, 0x0A490A4A, 0x0A4B0A4C, 0x0A4D0A4E, 0x0A4F0A50, 0x0A510A52, 0x0A530A54, 0x0A550A56, 0x0A570A58, 0x0A590A5A, 0x0A5B0A5C, 0x0A5D0A5E, 0x0A5F0A60, 0x0A610A62, 0x0A630A64, 0x0A650A66, 0x0A670A68, 0x0A690A6A, 0x0A6B0A6C, 0x0A6D0A6E, 0x0A6F0A70, 0x0A710A72, 0x0A730A74, 0x0A750A76, 0x0A770A78, 0x0A790A7A, 0x0A7B0A7C, 0x0A7D0A7E, 0x0A7F0A80, 0x0A810A82, 0x0A830A84, 0x0A850A86, 0x0A870A88, 0x0A890A8A, 0x0A8B0A8C, 0x0A8D0A8E, 0x0A8F0A90, 0x0A910A92, 0x0A930A94, 0x0A950A96, 0x0A970A98, 0x0A990A9A, 0x0A9B0A9C, 0x0A9D0A9E, 0x0A9F0AA0, 0x0AA10AA2, 0x0AA30AA4, 0x0AA50AA6, 0x0AA70AA8, 0x0AA90AAA, 0x0AAB0AAC, 0x0AAD0AAE, 0x0AAF0AB0, 0x0AB10AB2, 0x0AB30AB4, 0x0AB50AB6, 0x0AB70AB8, 0x0AB90ABA, 0x0ABB0ABC, 0x0ABD0ABE, 0x0ABF0AC0, 0x0AC10AC2, 0x0AC30AC4, 0x0AC50AC6, 0x0AC70AC8, 0x0AC90ACA, 0x0ACB0ACC, 0x0ACD0ACE, 0x0ACF0AD0, 0x0AD10AD2, 0x0AD30AD4, 0x0AD50AD6, 0x0AD70AD8, 0x0AD90ADA, 0x0ADB0ADC, 0x0ADD0ADE, 0x0ADF0AE0, 0x0AE10AE2, 0x0AE30AE4, 0x0AE50AE6, 0x0AE70AE8, 0x0AE90AEA, 0x0AEB0AEC, 0x0AED0AEE, 0x0AEF0AF0, 0x0AF10AF2, 0x0AF30AF4, 0x0AF50AF6, 0x0AF70AF8, 0x0AF90AFA, 0x0AFB0AFC, 0x0AFD0AFE, 0x0AFF0B00, 0x0B010B02, 0x0B030B04, 0x0B050B06, 0x0B070B08, 0x0B090B0A, 0x0B0B0B0C, 0x0B0D0B0E, 0x0B0F0B10, 0x0B110B12, 0x0B130B14, 0x0B150B16, 0x0B170B18, 0x0B190B1A, 0x0B1B0B1C, 0x0B1D0B1E, 0x0B1F0B20, 0x0B210B22, 0x0B230B24, 0x0B250B26, 0x0B270B28, 0x0B290B2A, 0x0B2B0B2C, 0x0B2D0B2E, 0x0B2F0B30, 0x0B310B32, 0x0B330B34, 0x0B350B36, 0x0B370B38, 0x0B390B3A, 0x0B3B0B3C, 0x0B3D0B3E, 0x0B3F0B40, 0x0B410B42, 0x0B430B44, 0x0B450B46, 0x0B470B48, 0x0B490B4A, 0x0B4B0B4C, 0x0B4D0B4E, 0x0B4F0B50, 0x0B510B52, 0x0B530B54, 0x0B550B56, 0x0B570B58, 0x0B590B5A, 0x0B5B0B5C, 0x0B5D0B5E, 0x0B5F0B60, 0x0B610B62, 0x0B630B64, 0x0B650B66, 0x0B670B68, 0x0B690B6A, 0x0B6B0B6C, 0x0B6D0B6E, 0x0B6F0B70, 0x0B710B72, 0x0B730B74, 0x0B750B76, 0x0B770B78, 0x0B790B7A, 0x0B7B0B7C, 0x0B7D0B7E, 0x0B7F0B80, 0x0B810B82, 0x0B830B84, 0x0B850B86, 0x0B870B88, 0x0B890B8A, 0x0B8B0B8C, 0x0B8D0B8E, 0x0B8F0B90, 0x0B910B92, 0x0B930B94, 0x0B950B96, 0x0B970B98, 0x0B990B9A, 0x0B9B0B9C, 0x0B9D0B9E, 0x0B9F0BA0, 0x0BA10BA2, 0x0BA30BA4, 0x0BA50BA6, 0x0BA70BA8, 0x0BA90BAA, 0x0BAB0BAC, 0x0BAD0BAE, 0x0BAF0BB0, 0x0BB10BB2, 0x0BB30BB4, 0x0BB50BB6, 0x0BB70BB8, 0x0BB90BBA, 0x0BBB0BBC, 0x0BBD0BBE, 0x0BBF0BC0, 0x0BC10BC2, 0x0BC30BC4, 0x0BC50BC6, 0x0BC70BC8, 0x0BC90BCA, 0x0BCB0BCC, 0x0BCD0BCE, 0x0BCF0BD0, 0x0BD10BD2, 0x0BD30BD4, 0x0BD50BD6, 0x0BD70BD8, 0x0BD90BDA, 0x0BDB0BDC, 0x0BDD0BDE, 0x0BDF0BE0, 0x0BE10BE2, 0x0BE30BE4, 0x0BE50BE6, 0x0BE70BE8, 0x0BE90BEA, 0x0BEB0BEC, 0x0BED0BEE, 0x0BEF0BF0, 0x0BF10BF2, 0x0BF30BF4, 0x0BF50BF6, 0x0BF70BF8, 0x0BF90BFA, 0x0BFB0BFC, 0x0BFD0BFE, 0x0BFF0C00, 0x0C010C02, 0x0C030C04, 0x0C050C06, 0x0C070C08, 0x0C090C0A, 0x0C0B0C0C, 0x0C0D0C0E, 0x0C0F0C10, 0x0C110C12, 0x0C130C14, 0x0C150C16, 0x0C170C18, 0x0C190C1A, 0x0C1B0C1C, 0x0C1D0C1E, 0x0C1F0C20, 0x0C210C22, 0x0C230C24, 0x0C250C26, 0x0C270C28, 0x0C290C2A, 0x0C2B0C2C, 0x0C2D0C2E, 0x0C2F0C30, 0x0C310C32, 0x0C330C34, 0x0C350C36, 0x0C370C38, 0x0C390C3A, 0x0C3B0C3C, 0x0C3D0C3E, 0x0C3F0C40, 0x0C410C42, 0x0C430C44, 0x0C450C46, 0x0C470C48, 0x0C490C4A, 0x0C4B0C4C, 0x0C4D0C4E, 0x0C4F0C50, 0x0C510C52, 0x0C530C54, 0x0C550C56, 0x0C570C58, 0x0C590C5A, 0x0C5B0C5C, 0x0C5D0C5E, 0x0C5F0C60, 0x0C610C62, 0x0C630C64, 0x0C650C66, 0x0C670C68, 0x0C690C6A, 0x0C6B0C6C, 0x0C6D0C6E, 0x0C6F0C70, 0x0C710C72, 0x0C730C74, 0x0C750C76, 0x0C770C78, 0x0C790C7A, 0x0C7B0C7C, 0x0C7D0C7E, 0x0C7F0C80, 0x0C810C82, 0x0C830C84, 0x0C850C86, 0x0C870C88, 0x0C890C8A, 0x0C8B0C8C, 0x0C8D0C8E, 0x0C8F0C90, 0x0C910C92, 0x0C930C94, 0x0C950C96, 0x0C970C98, 0x0C990C9A, 0x0C9B0C9C, 0x0C9D0C9E, 0x0C9F0CA0, 0x0CA10CA2, 0x0CA30CA4, 0x0CA50CA6, 0x0CA70CA8, 0x0CA90CAA, 0x0CAB0CAC, 0x0CAD0CAE, 0x0CAF0CB0, 0x0CB10CB2, 0x0CB30CB4, 0x0CB50CB6, 0x0CB70CB8, 0x0CB90CBA, 0x0CBB0CBC, 0x0CBD0CBE, 0x0CBF0CC0, 0x0CC10CC2, 0x0CC30CC4, 0x0CC50CC6, 0x0CC70CC8, 0x0CC90CCA, 0x0CCB0CCC, 0x0CCD0CCE, 0x0CCF0CD0, 0x0CD10CD2, 0x0CD30CD4, 0x0CD50CD6, 0x0CD70CD8, 0x0CD90CDA, 0x0CDB0CDC, 0x0CDD0CDE, 0x0CDF0CE0, 0x0CE10CE2, 0x0CE30CE4, 0x0CE50CE6, 0x0CE70CE8, 0x0CE90CEA, 0x0CEB0CEC, 0x0CED0CEE, 0x0CEF0CF0, 0x0CF10CF2, 0x0CF30CF4, 0x0CF50CF6, 0x0CF70CF8, 0x0CF90CFA, 0x0CFB0CFC, 0x0CFD0CFE, 0x0CFF0D00, 0x0D010D02, 0x0D030D04, 0x0D050D06, 0x0D070D08, 0x0D090D0A, 0x0D0B0D0C, 0x0D0D0D0E, 0x0D0F0D10, 0x0D110D12, 0x0D130D14, 0x0D150D16, 0x0D170D18, 0x0D190D1A, 0x0D1B0D1C, 0x0D1D0D1E, 0x0D1F0D20, 0x0D210D22, 0x0D230D24, 0x0D250D26, 0x0D270D28, 0x0D290D2A, 0x0D2B0D2C, 0x0D2D0D2E, 0x0D2F0D30, 0x0D310D32, 0x0D330D34, 0x0D350D36, 0x0D370D38, 0x0D390D3A, 0x0D3B0D3C, 0x0D3D0D3E, 0x0D3F0D40, 0x0D410D42, 0x0D430D44, 0x0D450D46, 0x0D470D48, 0x0D490D4A, 0x0D4B0D4C, 0x0D4D0D4E, 0x0D4F0D50, 0x0D510D52, 0x0D530D54, 0x0D550D56, 0x0D570D58, 0x0D590D5A, 0x0D5B0D5C, 0x0D5D0D5E, 0x0D5F0D60, 0x0D610D62, 0x0D630D64, 0x0D650D66, 0x0D670D68, 0x0D690D6A, 0x0D6B0D6C, 0x0D6D0D6E, 0x0D6F0D70, 0x0D710D72, 0x0D730D74, 0x0D750D76, 0x0D770D78, 0x0D790D7A, 0x0D7B0D7C, 0x0D7D0D7E, 0x0D7F0D80, 0x0D810D82, 0x0D830D84, 0x0D850D86, 0x0D870D88, 0x0D890D8A, 0x0D8B0D8C, 0x0D8D0D8E, 0x0D8F0D90, 0x0D910D92, 0x0D930D94, 0x0D950D96, 0x0D970D98, 0x0D990D9A, 0x0D9B0D9C, 0x0D9D0D9E, 0x0D9F0DA0, 0x0DA10DA2, 0x0DA30DA4, 0x0DA50DA6, 0x0DA70DA8, 0x0DA90DAA, 0x0DAB0DAC, 0x0DAD0DAE, 0x0DAF0DB0, 0x0DB10DB2, 0x0DB30DB4, 0x0DB50DB6, 0x0DB70DB8, 0x0DB90DBA, 0x0DBB0DBC, 0x0DBD0DBE, 0x0DBF0DC0, 0x0DC10DC2, 0x0DC30DC4, 0x0DC50DC6, 0x0DC70DC8, 0x0DC90DCA, 0x0DCB0DCC, 0x0DCD0DCE, 0x0DCF0DD0, 0x0DD10DD2, 0x0DD30DD4, 0x0DD50DD6, 0x0DD70DD8, 0x0DD90DDA, 0x0DDB0DDC, 0x0DDD0DDE, 0x0DDF0DE0, 0x0DE10DE2, 0x0DE30DE4, 0x0DE50DE6, 0x0DE70DE8, 0x0DE90DEA, 0x0DEB0DEC, 0x0DED0DEE, 0x0DEF0DF0, 0x0DF10DF2, 0x0DF30DF4, 0x0DF50DF6, 0x0DF70DF8, 0x0DF90DFA, 0x0DFB0DFC, 0x0DFD0DFE, 0x0DFF0E00, 0x0E010E02, 0x0E030E04, 0x0E050E06, 0x0E070E08, 0x0E090E0A, 0x0E0B0E0C, 0x0E0D0E0E, 0x0E0F0E10, 0x0E110E12, 0x0E130E14, 0x0E150E16, 0x0E170E18, 0x0E190E1A, 0x0E1B0E1C, 0x0E1D0E1E, 0x0E1F0E20, 0x0E210E22, 0x0E230E24, 0x0E250E26, 0x0E270E28, 0x0E290E2A, 0x0E2B0E2C, 0x0E2D0E2E, 0x0E2F0E30, 0x0E310E32, 0x0E330E34, 0x0E350E36, 0x0E370E38, 0x0E390E3A, 0x0E3B0E3C, 0x0E3D0E3E, 0x0E3F0E40, 0x0E410E42, 0x0E430E44, 0x0E450E46, 0x0E470E48, 0x0E490E4A, 0x0E4B0E4C, 0x0E4D0E4E, 0x0E4F0E50, 0x0E510E52, 0x0E530E54, 0x0E550E56, 0x0E570E58, 0x0E590E5A, 0x0E5B0E5C, 0x0E5D0E5E, 0x0E5F0E60, 0x0E610E62, 0x0E630E64, 0x0E650E66, 0x0E670E68, 0x0E690E6A, 0x0E6B0E6C, 0x0E6D0E6E, 0x0E6F0E70, 0x0E710E72, 0x0E730E74, 0x0E750E76, 0x0E770E78, 0x0E790E7A, 0x0E7B0E7C, 0x0E7D0E7E, 0x0E7F0E80, 0x0E810E82, 0x0E830E84, 0x0E850E86, 0x0E870E88, 0x0E890E8A, 0x0E8B0E8C, 0x0E8D0E8E, 0x0E8F0E90, 0x0E910E92, 0x0E930E94, 0x0E950E96, 0x0E970E98, 0x0E990E9A, 0x0E9B0E9C, 0x0E9D0E9E, 0x0E9F0EA0, 0x0EA10EA2, 0x0EA30EA4, 0x0EA50EA6, 0x0EA70EA8, 0x0EA90EAA, 0x0EAB0EAC, 0x0EAD0EAE, 0x0EAF0EB0, 0x0EB10EB2, 0x0EB30EB4, 0x0EB50EB6, 0x0EB70EB8, 0x0EB90EBA, 0x0EBB0EBC, 0x0EBD0EBE, 0x0EBF0EC0, 0x0EC10EC2, 0x0EC30EC4, 0x0EC50EC6, 0x0EC70EC8, 0x0EC90ECA, 0x0ECB0ECC, 0x0ECD0ECE, 0x0ECF0ED0, 0x0ED10ED2, 0x0ED30ED4, 0x0ED50ED6, 0x0ED70ED8, 0x0ED90EDA, 0x0EDB0EDC, 0x0EDD0EDE, 0x0EDF0EE0, 0x0EE10EE2, 0x0EE30EE4, 0x0EE50EE6, 0x0EE70EE8, 0x0EE90EEA, 0x0EEB0EEC, 0x0EED0EEE, 0x0EEF0EF0, 0x0EF10EF2, 0x0EF30EF4, 0x0EF50EF6, 0x0EF70EF8, 0x0EF90EFA, 0x0EFB0EFC, 0x0EFD0EFE, 0x0EFF0F00, 0x0F010F02, 0x0F030F04, 0x0F050F06, 0x0F070F08, 0x0F090F0A, 0x0F0B0F0C, 0x0F0D0F0E, 0x0F0F0F10, 0x0F110F12, 0x0F130F14, 0x0F150F16, 0x0F170F18, 0x0F190F1A, 0x0F1B0F1C, 0x0F1D0F1E, 0x0F1F0F20, 0x0F210F22, 0x0F230F24, 0x0F250F26, 0x0F270F28, 0x0F290F2A, 0x0F2B0F2C, 0x0F2D0F2E, 0x0F2F0F30, 0x0F310F32, 0x0F330F34, 0x0F350F36, 0x0F370F38, 0x0F390F3A, 0x0F3B0F3C, 0x0F3D0F3E, 0x0F3F0F40, 0x0F410F42, 0x0F430F44, 0x0F450F46, 0x0F470F48, 0x0F490F4A, 0x0F4B0F4C, 0x0F4D0F4E, 0x0F4F0F50, 0x0F510F52, 0x0F530F54, 0x0F550F56, 0x0F570F58, 0x0F590F5A, 0x0F5B0F5C, 0x0F5D0F5E, 0x0F5F0F60, 0x0F610F62, 0x0F630F64, 0x0F650F66, 0x0F670F68, 0x0F690F6A, 0x0F6B0F6C, 0x0F6D0F6E, 0x0F6F0F70, 0x0F710F72, 0x0F730F74, 0x0F750F76, 0x0F770F78, 0x0F790F7A, 0x0F7B0F7C, 0x0F7D0F7E, 0x0F7F0F80, 0x0F810F82, 0x0F830F84, 0x0F850F86, 0x0F870F88, 0x0F890F8A, 0x0F8B0F8C, 0x0F8D0F8E, 0x0F8F0F90, 0x0F910F92, 0x0F930F94, 0x0F950F96, 0x0F970F98, 0x0F990F9A, 0x0F9B0F9C, 0x0F9D0F9E, 0x0F9F0FA0,
					0x0FA10FA2, 0x0FA30FA4, 0x0FA50FA6, 0x0FA70FA8, 0x0FA90FAA, 0x0FAB0FAC, 0x0FAD0FAE, 0x0FAF0FB0, 0x0FB10FB2, 0x0FB30FB4, 0x0FB50FB6, 0x0FB70FB8, 0x0FB90FBA, 0x0FBB0FBC, 0x0FBD0FBE, 0x0FBF0FC0, 0x0FC10FC2, 0x0FC30FC4, 0x0FC50FC6, 0x0FC70FC8, 0x0FC90FCA, 0x0FCB0FCC, 0x0FCD0FCE, 0x0FCF0FD0, 0x0FD10FD2, 0x0FD30FD4, 0x0FD50FD6, 0x0FD70FD8, 0x0FD90FDA, 0x0FDB0FDC, 0x0FDD0FDE, 0x0FDF0FE0, 0x0FE10FE2, 0x0FE30FE4, 0x0FE50FE6, 0x0FE70FE8, 0x0FE90FEA, 0x0FEB0FEC, 0x0FED0FEE, 0x0FEF0FF0, 0x0FF10FF2, 0x0FF30FF4, 0x0FF50FF6, 0x0FF70FF8, 0x0FF90FFA, 0x0FFB0FFC, 0x0FFD0FFE, 0x0FFF1000, 0x10011002, 0x10031004, 0x10051006, 0x10071008, 0x1009100A, 0x100B100C, 0x100D100E, 0x100F1010, 0x10111012, 0x10131014, 0x10151016, 0x10171018, 0x1019101A, 0x101B101C, 0x101D101E, 0x101F1020, 0x10211022, 0x10231024, 0x10251026, 0x10271028, 0x1029102A, 0x102B102C, 0x102D102E, 0x102F1030, 0x10311032, 0x10331034, 0x10351036, 0x10371038, 0x1039103A, 0x103B103C, 0x103D103E, 0x103F1040, 0x10411042, 0x10431044, 0x10451046, 0x10471048, 0x1049104A, 0x104B104C, 0x104D104E, 0x104F1050, 0x10511052, 0x10531054, 0x10551056, 0x10571058, 0x1059105A, 0x105B105C, 0x105D105E, 0x105F1060, 0x10611062, 0x10631064, 0x10651066, 0x10671068, 0x1069106A, 0x106B106C, 0x106D106E, 0x106F1070, 0x10711072, 0x10731074, 0x10751076, 0x10771078, 0x1079107A, 0x107B107C, 0x107D107E, 0x107F1080, 0x10811082, 0x10831084, 0x10851086, 0x10871088, 0x1089108A, 0x108B108C, 0x108D108E, 0x108F1090, 0x10911092, 0x10931094, 0x10951096, 0x10971098, 0x1099109A, 0x109B109C, 0x109D109E, 0x109F10A0, 0x10A110A2, 0x10A310A4, 0x10A510A6, 0x10A710A8, 0x10A910AA, 0x10AB10AC, 0x10AD10AE, 0x10AF10B0, 0x10B110B2, 0x10B310B4, 0x10B510B6, 0x10B710B8, 0x10B910BA, 0x10BB10BC, 0x10BD10BE, 0x10BF10C0, 0x10C110C2, 0x10C310C4, 0x10C510C6, 0x10C710C8, 0x10C910CA, 0x10CB10CC, 0x10CD10CE, 0x10CF10D0, 0x10D110D2, 0x10D310D4, 0x10D510D6, 0x10D710D8, 0x10D910DA, 0x10DB10DC, 0x10DD10DE, 0x10DF10E0, 0x10E110E2, 0x10E310E4, 0x10E510E6, 0x10E710E8, 0x10E910EA, 0x10EB10EC, 0x10ED10EE, 0x10EF10F0, 0x10F110F2, 0x10F310F4, 0x10F510F6, 0x10F710F8, 0x10F910FA, 0x10FB10FC, 0x10FD10FE, 0x10FF1100, 0x11011102, 0x11031104, 0x11051106, 0x11071108, 0x1109110A, 0x110B110C, 0x110D110E, 0x110F1110, 0x11111112, 0x11131114, 0x11151116, 0x11171118, 0x1119111A, 0x111B111C, 0x111D111E, 0x111F1120, 0x11211122, 0x11231124, 0x11251126, 0x11271128, 0x1129112A, 0x112B112C, 0x112D112E, 0x112F1130, 0x11311132, 0x11331134, 0x11351136, 0x11371138, 0x1139113A, 0x113B113C, 0x113D113E, 0x113F1140, 0x11411142, 0x11431144, 0x11451146, 0x11471148, 0x1149114A, 0x114B114C, 0x114D114E, 0x114F1150, 0x11511152, 0x11531154, 0x11551156, 0x11571158, 0x1159115A, 0x115B115C, 0x115D115E, 0x115F1160, 0x11611162, 0x11631164, 0x11651166, 0x11671168, 0x1169116A, 0x116B116C, 0x116D116E, 0x116F1170, 0x11711172, 0x11731174, 0x11751176, 0x11771178, 0x1179117A, 0x117B117C, 0x117D117E, 0x117F1180, 0x11811182, 0x11831184, 0x11851186, 0x11871188, 0x1189118A, 0x118B118C, 0x118D118E, 0x118F1190, 0x11911192, 0x11931194, 0x11951196, 0x11971198, 0x1199119A, 0x119B119C, 0x119D119E, 0x119F11A0, 0x11A111A2, 0x11A311A4, 0x11A511A6, 0x11A711A8, 0x11A911AA, 0x11AB11AC, 0x11AD11AE, 0x11AF11B0, 0x11B111B2, 0x11B311B4, 0x11B511B6, 0x11B711B8, 0x11B911BA, 0x11BB11BC, 0x11BD11BE, 0x11BF11C0, 0x11C111C2, 0x11C311C4, 0x11C511C6, 0x11C711C8, 0x11C911CA, 0x11CB11CC, 0x11CD11CE, 0x11CF11D0, 0x11D111D2, 0x11D311D4, 0x11D511D6, 0x11D711D8, 0x11D911DA, 0x11DB11DC, 0x11DD11DE, 0x11DF11E0, 0x11E111E2, 0x11E311E4, 0x11E511E6, 0x11E711E8, 0x11E911EA, 0x11EB11EC, 0x11ED11EE, 0x11EF11F0, 0x11F111F2, 0x11F311F4, 0x11F511F6, 0x11F711F8, 0x11F911FA, 0x11FB11FC, 0x11FD11FE, 0x11FF1200, 0x12011202, 0x12031204, 0x12051206, 0x12071208, 0x1209120A, 0x120B120C, 0x120D120E, 0x120F1210, 0x12111212, 0x12131214, 0x12151216, 0x12171218, 0x1219121A, 0x121B121C, 0x121D121E, 0x121F1220, 0x12211222, 0x12231224, 0x12251226, 0x12271228, 0x1229122A, 0x122B122C, 0x122D122E, 0x122F1230, 0x12311232, 0x12331234, 0x12351236, 0x12371238, 0x1239123A, 0x123B123C, 0x123D123E, 0x123F1240, 0x12411242, 0x12431244, 0x12451246, 0x12471248, 0x1249124A, 0x124B124C, 0x124D124E, 0x124F1250, 0x12511252, 0x12531254, 0x12551256, 0x12571258, 0x1259125A, 0x125B125C, 0x125D125E, 0x125F1260, 0x12611262, 0x12631264, 0x12651266, 0x12671268, 0x1269126A, 0x126B126C, 0x126D126E, 0x126F1270, 0x12711272, 0x12731274, 0x12751276, 0x12771278, 0x1279127A, 0x127B127C, 0x127D127E, 0x127F1280, 0x12811282, 0x12831284, 0x12851286, 0x12871288, 0x1289128A, 0x128B128C, 0x128D128E, 0x128F1290, 0x12911292, 0x12931294, 0x12951296, 0x12971298, 0x1299129A, 0x129B129C, 0x129D129E, 0x129F12A0, 0x12A112A2, 0x12A312A4, 0x12A512A6, 0x12A712A8, 0x12A912AA, 0x12AB12AC, 0x12AD12AE, 0x12AF12B0, 0x12B112B2, 0x12B312B4, 0x12B512B6, 0x12B712B8, 0x12B912BA, 0x12BB12BC, 0x12BD12BE, 0x12BF12C0, 0x12C112C2, 0x12C312C4, 0x12C512C6, 0x12C712C8, 0x12C912CA, 0x12CB12CC, 0x12CD12CE, 0x12CF12D0, 0x12D112D2, 0x12D312D4, 0x12D512D6, 0x12D712D8, 0x12D912DA, 0x12DB12DC, 0x12DD12DE, 0x12DF12E0, 0x12E112E2, 0x12E312E4, 0x12E512E6, 0x12E712E8, 0x12E912EA, 0x12EB12EC, 0x12ED12EE, 0x12EF12F0, 0x12F112F2, 0x12F312F4, 0x12F512F6, 0x12F712F8, 0x12F912FA, 0x12FB12FC, 0x12FD12FE, 0x12FF1300, 0x13011302, 0x13031304, 0x13051306, 0x13071308, 0x1309130A, 0x130B130C, 0x130D130E, 0x130F1310, 0x13111312, 0x13131314, 0x13151316, 0x13171318, 0x1319131A, 0x131B131C, 0x131D131E, 0x131F1320, 0x13211322, 0x13231324, 0x13251326, 0x13271328, 0x1329132A, 0x132B132C, 0x132D132E, 0x132F1330, 0x13311332, 0x13331334, 0x13351336, 0x13371338, 0x1339133A, 0x133B133C, 0x133D133E, 0x133F1340, 0x13411342, 0x13431344, 0x13451346, 0x13471348, 0x1349134A, 0x134B134C, 0x134D134E, 0x134F1350, 0x13511352, 0x13531354, 0x13551356, 0x13571358, 0x1359135A, 0x135B135C, 0x135D135E, 0x135F1360, 0x13611362, 0x13631364, 0x13651366, 0x13671368, 0x1369136A, 0x136B136C, 0x136D136E, 0x136F1370, 0x13711372, 0x13731374, 0x13751376, 0x13771378, 0x1379137A, 0x137B137C, 0x137D137E, 0x137F1380, 0x13811382, 0x13831384, 0x13851386, 0x13871388, 0x1389138A, 0x138B138C, 0x138D138E, 0x138F1390, 0x13911392, 0x13931394, 0x13951396, 0x13971398, 0x1399139A, 0x139B139C, 0x139D139E, 0x139F13A0, 0x13A113A2, 0x13A313A4, 0x13A513A6, 0x13A713A8, 0x13A913AA, 0x13AB13AC, 0x13AD13AE, 0x13AF13B0, 0x13B113B2, 0x13B313B4, 0x13B513B6, 0x13B713B8, 0x13B913BA, 0x13BB13BC, 0x13BD13BE, 0x13BF13C0, 0x13C113C2, 0x13C313C4, 0x13C513C6, 0x13C713C8, 0x13C913CA, 0x13CB13CC, 0x13CD13CE, 0x13CF13D0, 0x13D113D2, 0x13D313D4, 0x13D513D6, 0x13D713D8, 0x13D913DA, 0x13DB13DC, 0x13DD13DE, 0x13DF13E0, 0x13E113E2, 0x13E313E4, 0x13E513E6, 0x13E713E8, 0x13E913EA, 0x13EB13EC, 0x13ED13EE, 0x13EF13F0, 0x13F113F2, 0x13F313F4, 0x13F513F6, 0x13F713F8, 0x13F913FA, 0x13FB13FC, 0x13FD13FE, 0x13FF1400 };
	u32 B2[2560];
	matrix_AS_mult(A, S, B);
#endif

#if ENABLE_KEM_TEST
	// ------ KEM test ------
	uint8_t pk[CRYPTO_PUBLICKEYBYTES];
	uint8_t sk[CRYPTO_SECRETKEYBYTES];
	uint8_t ss_encap[CRYPTO_BYTES], ss_decap[CRYPTO_BYTES];
	uint8_t ct[CRYPTO_CIPHERTEXTBYTES];

	print_debug(DEBUG_TEST_KEM, "\n");
	print_debug(DEBUG_TEST_KEM, "=============================================================================================================================\n");
	print_debug(DEBUG_TEST_KEM, "Testing correctness of key encapsulation mechanism (KEM), system %s, tests for %d iterations\n", named_parameters, iterations);
	print_debug(DEBUG_TEST_KEM, "=============================================================================================================================\n");

	for (int i = 0; i < iterations; i++)
	{
		codeFeaturesType = KECCAK_SW_MATRIX_SW;

		t_keypair_keccak_sw_matrix_sw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_keccak_sw_matrix_sw = get_cyclecount() - t_keypair_keccak_sw_matrix_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using Keccak SW and Matrix SW took exactly %d cycles or %d us (including function call)\n", t_keypair_keccak_sw_matrix_sw, (t_keypair_keccak_sw_matrix_sw)/666);

		t_enc_keccak_sw_matrix_sw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_keccak_sw_matrix_sw = get_cyclecount() - t_enc_keccak_sw_matrix_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using using Keccak SW and Matrix SW took exactly %d cycles or %d us (including function call)\n", t_enc_keccak_sw_matrix_sw, (t_enc_keccak_sw_matrix_sw)/666);

		t_dec_keccak_sw_matrix_sw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_keccak_sw_matrix_sw = get_cyclecount() - t_dec_keccak_sw_matrix_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using using Keccak SW and Matrix SW took exactly %d cycles or %d us (including function call)\n", t_dec_keccak_sw_matrix_sw, (t_dec_keccak_sw_matrix_sw)/666);

		//Total sw time
		t_total_keccak_sw_matrix_sw = t_keypair_keccak_sw_matrix_sw + t_enc_keccak_sw_matrix_sw + t_dec_keccak_sw_matrix_sw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using Keccak SW and Matrix SW is %d cycles or %d us (including function call)\n", t_total_keccak_sw_matrix_sw, (t_total_keccak_sw_matrix_sw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Keccak SW and matrix SW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] Keccak SW and matrix SW ERROR!\n");
			return false;
		}

		codeFeaturesType = KECCAK_HW_MATRIX_SW;

		t_keypair_keccak_hw_matrix_sw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_keccak_hw_matrix_sw = get_cyclecount() - t_keypair_keccak_hw_matrix_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using Keccak HW and Matrix SW took exactly %d cycles or %d us (including function call)\n", t_keypair_keccak_hw_matrix_sw, (t_keypair_keccak_hw_matrix_sw)/666);

		t_enc_keccak_hw_matrix_sw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_keccak_hw_matrix_sw = get_cyclecount() - t_enc_keccak_hw_matrix_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using Keccak HW and Matrix SW took exactly %d cycles or %d us (including function call)\n", t_enc_keccak_hw_matrix_sw, (t_enc_keccak_hw_matrix_sw)/666);

		t_dec_keccak_hw_matrix_sw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_keccak_hw_matrix_sw = get_cyclecount() - t_dec_keccak_hw_matrix_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using Keccak HW and Matrix SW took exactly %d cycles or %d us (including function call)\n", t_dec_keccak_hw_matrix_sw, (t_dec_keccak_hw_matrix_sw)/666);

		//Total hw time
		t_total_keccak_hw_matrix_sw = t_keypair_keccak_hw_matrix_sw + t_enc_keccak_hw_matrix_sw + t_dec_keccak_hw_matrix_sw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using Keccak HW and Matrix SW is %d cycles or %d us (including function call)\n", t_total_keccak_hw_matrix_sw, (t_total_keccak_hw_matrix_sw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Keccak HW and Matrix SW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] HW ERROR!\n");
			return false;
		}

		codeFeaturesType = KECCAK_HW_MM_MATRIX_SW;

		t_keypair_keccak_hw_mm_matrix_sw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_keccak_hw_mm_matrix_sw = get_cyclecount() - t_keypair_keccak_hw_mm_matrix_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using Keccak HW_MM and Matrix SW took exactly %d cycles or %d us (including function call)\n", t_keypair_keccak_hw_mm_matrix_sw, (t_keypair_keccak_hw_mm_matrix_sw)/666);

		t_enc_keccak_hw_mm_matrix_sw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_keccak_hw_mm_matrix_sw = get_cyclecount() - t_enc_keccak_hw_mm_matrix_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using Keccak HW_MM and Matrix SW took exactly %d cycles or %d us (including function call)\n", t_enc_keccak_hw_mm_matrix_sw, (t_enc_keccak_hw_mm_matrix_sw)/666);

		t_dec_keccak_hw_mm_matrix_sw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_keccak_hw_mm_matrix_sw = get_cyclecount() - t_dec_keccak_hw_mm_matrix_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using Keccak HW_MM and Matrix SW took exactly %d cycles or %d us (including function call)\n", t_dec_keccak_hw_mm_matrix_sw, (t_dec_keccak_hw_mm_matrix_sw)/666);

		//Total hw time
		t_total_keccak_hw_mm_matrix_sw = t_keypair_keccak_hw_mm_matrix_sw + t_enc_keccak_hw_mm_matrix_sw + t_dec_keccak_hw_mm_matrix_sw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using Keccak HW_MM and Matrix SW is %d cycles or %d us (including function call)\n", t_total_keccak_hw_mm_matrix_sw, (t_total_keccak_hw_mm_matrix_sw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Keccak HW_MM and Matrix SW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] HW_MM ERROR!\n");
			return false;
		}

		codeFeaturesType = KECCAK_SW_MATRIX_HW;

		t_keypair_keccak_sw_matrix_hw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_keccak_sw_matrix_hw = get_cyclecount() - t_keypair_keccak_sw_matrix_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using Keccak SW and Matrix HW took exactly %d cycles or %d us (including function call)\n", t_keypair_keccak_sw_matrix_hw, (t_keypair_keccak_sw_matrix_hw)/666);

		t_enc_keccak_sw_matrix_hw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_keccak_sw_matrix_hw = get_cyclecount() - t_enc_keccak_sw_matrix_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using using Keccak SW and Matrix HW took exactly %d cycles or %d us (including function call)\n", t_enc_keccak_sw_matrix_hw, (t_enc_keccak_sw_matrix_hw)/666);

		t_dec_keccak_sw_matrix_hw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_keccak_sw_matrix_hw = get_cyclecount() - t_dec_keccak_sw_matrix_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using using Keccak SW and Matrix HW took exactly %d cycles or %d us (including function call)\n", t_dec_keccak_sw_matrix_hw, (t_dec_keccak_sw_matrix_hw)/666);

		//Total sw time
		t_total_keccak_sw_matrix_hw = t_keypair_keccak_sw_matrix_hw + t_enc_keccak_sw_matrix_hw + t_dec_keccak_sw_matrix_hw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using Keccak SW and Matrix HW is %d cycles or %d us (including function call)\n", t_total_keccak_sw_matrix_hw, (t_total_keccak_sw_matrix_hw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Keccak SW and matrix HW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] Keccak SW and matrix HW ERROR!\n");
			return false;
		}

		codeFeaturesType = KECCAK_HW_MATRIX_HW;

		t_keypair_keccak_hw_matrix_hw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_keccak_hw_matrix_hw = get_cyclecount() - t_keypair_keccak_hw_matrix_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using Keccak HW and Matrix HW took exactly %d cycles or %d us (including function call)\n", t_keypair_keccak_hw_matrix_hw, (t_keypair_keccak_hw_matrix_hw)/666);

		t_enc_keccak_hw_matrix_hw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_keccak_hw_matrix_hw = get_cyclecount() - t_enc_keccak_hw_matrix_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using using Keccak HW and Matrix HW took exactly %d cycles or %d us (including function call)\n", t_enc_keccak_hw_matrix_hw, (t_enc_keccak_hw_matrix_hw)/666);

		t_dec_keccak_hw_matrix_hw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_keccak_hw_matrix_hw = get_cyclecount() - t_dec_keccak_hw_matrix_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using using Keccak HW and Matrix HW took exactly %d cycles or %d us (including function call)\n", t_dec_keccak_hw_matrix_hw, (t_dec_keccak_hw_matrix_hw)/666);

		//Total sw time
		t_total_keccak_hw_matrix_hw = t_keypair_keccak_hw_matrix_hw + t_enc_keccak_hw_matrix_hw + t_dec_keccak_hw_matrix_hw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using Keccak HW and Matrix HW is %d cycles or %d us (including function call)\n", t_total_keccak_hw_matrix_hw, (t_total_keccak_hw_matrix_hw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Keccak HW and matrix HW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] Keccak HW and matrix HW ERROR!\n");
			return false;
		}

		codeFeaturesType = KECCAK_HW_MM_MATRIX_HW;

		t_keypair_keccak_hw_mm_matrix_hw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_keccak_hw_mm_matrix_hw = get_cyclecount() - t_keypair_keccak_hw_mm_matrix_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using Keccak HW_MM and Matrix HW took exactly %d cycles or %d us (including function call)\n", t_keypair_keccak_hw_mm_matrix_hw, (t_keypair_keccak_hw_mm_matrix_hw)/666);

		t_enc_keccak_hw_mm_matrix_hw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_keccak_hw_mm_matrix_hw = get_cyclecount() - t_enc_keccak_hw_mm_matrix_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using using Keccak HW_MM and Matrix HW took exactly %d cycles or %d us (including function call)\n", t_enc_keccak_hw_mm_matrix_hw, (t_enc_keccak_hw_mm_matrix_hw)/666);

		t_dec_keccak_hw_mm_matrix_hw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_keccak_hw_mm_matrix_hw = get_cyclecount() - t_dec_keccak_hw_mm_matrix_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using using Keccak HW_MM and Matrix HW took exactly %d cycles or %d us (including function call)\n", t_dec_keccak_hw_mm_matrix_hw, (t_dec_keccak_hw_mm_matrix_hw)/666);

		//Total sw time
		t_total_keccak_hw_mm_matrix_hw = t_keypair_keccak_hw_mm_matrix_hw + t_enc_keccak_hw_mm_matrix_hw + t_dec_keccak_hw_mm_matrix_hw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using Keccak HW_MM and Matrix HW is %d cycles or %d us (including function call)\n", t_total_keccak_hw_mm_matrix_hw, (t_total_keccak_hw_mm_matrix_hw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Keccak HW_MM and matrix HW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] Keccak HW_MM and matrix HW ERROR!\n");
			return false;
		}

		//Table
		float fRelativeKeccakHwMatrixSw = 100.0-(t_total_keccak_hw_matrix_sw/(float)t_total_keccak_sw_matrix_sw)*100.0;
		u32 wholeKeccakHwMatrixSw, thousandthsKeccakHwMatrixSw;
		wholeKeccakHwMatrixSw = fRelativeKeccakHwMatrixSw;
		thousandthsKeccakHwMatrixSw = (fRelativeKeccakHwMatrixSw - wholeKeccakHwMatrixSw) * 1000;
		float fRelativeKeccakHwMMMatrixSw = 100.0-(t_total_keccak_hw_mm_matrix_sw/(float)t_total_keccak_sw_matrix_sw)*100.0;
		u32 wholeKeccakHwMMMatrixSw, thousandthsKeccakHwMatrixSwMM;
		wholeKeccakHwMMMatrixSw = fRelativeKeccakHwMMMatrixSw;
		thousandthsKeccakHwMatrixSwMM = (fRelativeKeccakHwMMMatrixSw - wholeKeccakHwMMMatrixSw) * 1000;
		float fRelativeKeccakSwMatrixHw = 100.0-(t_total_keccak_sw_matrix_hw/(float)t_total_keccak_sw_matrix_sw)*100.0;
		u32 wholeKeccakSwMatrixHw, thousandthsKeccakSwMatrixHw;
		wholeKeccakSwMatrixHw = fRelativeKeccakSwMatrixHw;
		thousandthsKeccakSwMatrixHw = (fRelativeKeccakSwMatrixHw - wholeKeccakSwMatrixHw) * 1000;
		float fRelativeKeccakHwMatrixHw = 100.0-(t_total_keccak_hw_matrix_hw/(float)t_total_keccak_sw_matrix_sw)*100.0;
		u32 wholeKeccakHwMatrixHw, thousandthsKeccakHwMatrixHw;
		wholeKeccakHwMatrixHw = fRelativeKeccakHwMatrixHw;
		thousandthsKeccakHwMatrixHw = (fRelativeKeccakHwMatrixHw - wholeKeccakHwMatrixHw) * 1000;
		float fRelativeKeccakHwMMMatrixHw = 100.0-(t_total_keccak_hw_mm_matrix_hw/(float)t_total_keccak_sw_matrix_sw)*100.0;
		u32 wholeKeccakHwMMMatrixHw, thousandthsKeccakHwMMMatrixHw;
		wholeKeccakHwMMMatrixHw = fRelativeKeccakHwMMMatrixHw;
		thousandthsKeccakHwMMMatrixHw = (fRelativeKeccakHwMMMatrixHw - wholeKeccakHwMMMatrixHw) * 1000;
		print_debug(DEBUG_TEST_KEM, "\t\tKeccak\t\t|\t\tMatrix\t\t|\t\tkey pair (us) \t\t|\t encryption (us) \t|\t decryption (us) \t\t|\t\t total (us) \t\t|\t Improvement (%c) \n", 37);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t  SW  \t\t|\t\t  SW  \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t\t\t -\n", t_keypair_keccak_sw_matrix_sw/666, t_enc_keccak_sw_matrix_sw/666, t_dec_keccak_sw_matrix_sw/666, t_total_keccak_sw_matrix_sw/666);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t  HW  \t\t|\t\t  SW  \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t\t %lu.%03lu\n", t_keypair_keccak_hw_matrix_sw/666, t_enc_keccak_hw_matrix_sw/666, t_dec_keccak_hw_matrix_sw/666, t_total_keccak_hw_matrix_sw/666, wholeKeccakHwMatrixSw, thousandthsKeccakHwMatrixSw);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t HW MM\t\t|\t\t  SW  \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t\t %lu.%03lu\n", t_keypair_keccak_hw_mm_matrix_sw/666, t_enc_keccak_hw_mm_matrix_sw/666, t_dec_keccak_hw_mm_matrix_sw/666, t_total_keccak_hw_mm_matrix_sw/666, wholeKeccakHwMMMatrixSw, thousandthsKeccakHwMatrixSwMM);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t  SW  \t\t|\t\t  HW  \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t\t %lu.%03lu\n", t_keypair_keccak_sw_matrix_hw/666, t_enc_keccak_sw_matrix_hw/666, t_dec_keccak_sw_matrix_hw/666, t_total_keccak_sw_matrix_hw/666, wholeKeccakSwMatrixHw, thousandthsKeccakSwMatrixHw);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t  HW  \t\t|\t\t  HW  \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t\t %lu.%03lu\n", t_keypair_keccak_hw_matrix_hw/666, t_enc_keccak_hw_matrix_hw/666, t_dec_keccak_hw_matrix_hw/666, t_total_keccak_hw_matrix_hw/666, wholeKeccakHwMatrixHw, thousandthsKeccakHwMatrixHw);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t HW MM\t\t|\t\t  HW  \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t\t %lu.%03lu\n", t_keypair_keccak_hw_mm_matrix_hw/666, t_enc_keccak_hw_mm_matrix_hw/666, t_dec_keccak_hw_mm_matrix_hw/666, t_total_keccak_hw_mm_matrix_hw/666, wholeKeccakHwMMMatrixHw, thousandthsKeccakHwMMMatrixHw);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n");


	}
#endif

	return true;
}
