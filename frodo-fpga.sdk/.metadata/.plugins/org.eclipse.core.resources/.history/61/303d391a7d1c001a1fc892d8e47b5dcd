/*
 * frodo_main.c

 *
 *  Created on: 25 de nov de 2019
 *      Author: Vinicius
 */

#include "global_def.h"
#include "fips202.h"

enum keccakType
{
	KECCAK_SW,
	KECCAK_HW
} keccakStatePermuteType = KECCAK_SW;

void KeccakF1600_StatePermute()
{
	if(keccakStatePermuteType == KECCAK_SW)
		KeccakF1600_StatePermute_SW();
	else if(keccakStatePermuteType == KECCAK_HW)
		KeccakF1600_StatePermute_HW();
}

unsigned int get_cyclecount (void)
{
	unsigned int value;
	// Read CCNT Register
	asm volatile ("MRC p15, 0, %0, c9, c13, 0\t\n": "=r"(value));
	return value;
}

void init_perfcounters (int32_t do_reset, int32_t enable_divider)
{
	// in general enable all counters (including cycle counter)
	int32_t value = 1;

	// peform reset:
	if (do_reset)
	{
		value |= 2;     // reset all counters to zero.
		value |= 4;     // reset cycle counter to zero.
	}

	if (enable_divider)
		value |= 8;     // enable "by 64" divider for CCNT.

	value |= 16;

	// program the performance-counter control-register:
	asm volatile ("MCR p15, 0, %0, c9, c12, 0\t\n" :: "r"(value));

	// enable all counters:
	asm volatile ("MCR p15, 0, %0, c9, c12, 1\t\n" :: "r"(0x8000000f));

	// clear overflows:
	asm volatile ("MCR p15, 0, %0, c9, c12, 3\t\n" :: "r"(0x8000000f));
}

int kem_test(const char *named_parameters, int iterations)
{
	// CDF table
//	uint16_t CDF_TABLE[13] = {4643, 13363, 20579, 25843, 29227, 31145, 32103, 32525, 32689, 32745, 32762, 32766, 32767};
//	uint16_t CDF_TABLE_LEN = 13;

	// measure the counting overhead:
	unsigned int overhead = get_cyclecount();
	overhead = get_cyclecount() - overhead;

	unsigned int t_keypair, t_enc, t_dec, t_total;

	/* enable user-mode access to the performance counter*/
	asm ("MCR p15, 0, %0, C9, C14, 0\n\t" :: "r"(1));

	/* disable counter overflow interrupts (just in case)*/
	asm ("MCR p15, 0, %0, C9, C14, 2\n\t" :: "r"(0x8000000f));

	// init counters:
	init_perfcounters (1, 0);

	// ------ Test keccak_function ------
//	u64 state[25] = { 0 };
//	state[0] = 0x000000000000001f;
//	state[20] = 0x8000000000000000;
//	t = get_cyclecount();
//	KeccakF1600_StatePermute_HW(state);
//	t = get_cyclecount() - t;
//	printStateMatrixDebug(state);
//	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Hardware function took exactly %d cycles or %d us (including function call)\n", t - overhead, (t - overhead)/666);
//
//	u64 state2[25] = { 0 };
//	state2[0] = 0x000000000000001f;
//	state2[20] = 0x8000000000000000;
//	t = get_cyclecount();
//	KeccakF1600_StatePermute_SW(state2);
//	t = get_cyclecount() - t;
//	printStateMatrixDebug(state2);
//	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Software function took exactly %d cycles or %d us (including function call)\n", t - overhead, (t - overhead)/666);

	// ------ KEM test ------
	uint8_t pk[CRYPTO_PUBLICKEYBYTES];
	uint8_t sk[CRYPTO_SECRETKEYBYTES];
	uint8_t ss_encap[CRYPTO_BYTES], ss_decap[CRYPTO_BYTES];
	uint8_t ct[CRYPTO_CIPHERTEXTBYTES];

	print_debug(DEBUG_TEST_KEM, "\n");
	print_debug(DEBUG_TEST_KEM, "=============================================================================================================================\n");
	print_debug(DEBUG_TEST_KEM, "Testing correctness of key encapsulation mechanism (KEM), system %s, tests for %d iterations\n", named_parameters, iterations);
	print_debug(DEBUG_TEST_KEM, "=============================================================================================================================\n");

	for (int i = 0; i < iterations; i++) {
		t_keypair = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair = get_cyclecount() - t_keypair - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair took exactly %d cycles or %d us (including function call)\n", t_keypair, (t_keypair)/666);

		t_enc = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc = get_cyclecount() - t_enc - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc took exactly %d cycles or %d us (including function call)\n", t_enc, (t_enc)/666);

		t_dec = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec = get_cyclecount() - t_dec - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec took exactly %d cycles or %d us (including function call)\n", t_dec, (t_dec)/666);

		//        crypto_kem_dec(ss_decap, ct, sk);
		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] ERROR!\n");
			return false;
		}

		//Total time
		t_total = t_keypair + t_enc + t_dec;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time %d cycles or %d us (including function call)\n", t_total, (t_total)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n\n");
	}

	if(keccakStatePermuteType == KECCAK_SW)
		keccakStatePermuteType = KECCAK_HW;
	else
		keccakStatePermuteType = KECCAK_SW;


	return true;
}
