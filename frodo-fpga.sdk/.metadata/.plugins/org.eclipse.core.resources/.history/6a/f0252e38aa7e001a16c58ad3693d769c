/*
 * frodo_main.c

 *
 *  Created on: 25 de nov de 2019
 *      Author: Vinicius
 */

#include "global_def.h"
#include "fips202.h"

unsigned int overhead;

#if ENABLE_SW_TIMER
	volatile uint32_t t_keccak_sw = 0, t_keccak_sw_acc = 0;
	volatile uint32_t t_keccak_hw = 0, t_keccak_hw_acc = 0;
	volatile uint32_t t_matrix_sa_sw = 0, t_matrix_sa_sw_acc = 0;
	volatile uint32_t t_matrix_sa_hw = 0, t_matrix_sa_hw_acc = 0;
	volatile uint32_t t_matrix_as_sw = 0, t_matrix_as_sw_acc = 0;
	volatile uint32_t t_matrix_as_hw = 0, t_matrix_as_hw_acc = 0;
#endif

#if ENABLE_HW_TIMER
	u32 readTimerKeccakTotal;
	u32 readTimerKeccakProc;
	u32 readTimerMatrixSaTotal;
	u32 readTimerMatrixSaProc;
	u32 readTimerMatrixAsTotal;
	u32 readTimerMatrixAsProc;

	u32 countKeccak;
	u32 countMatrixSa;
	u32 countMatrixAs;
#endif

static enum codeType
{
	KECCAK_SW_MATRIX_SA_SW_AS_SW,
	KECCAK_HW_MM_MATRIX_SA_SW_AS_SW,
	KECCAK_SW_MATRIX_SA_HW_AS_SW,
	KECCAK_HW_MM_MATRIX_SA_HW_AS_SW,
	KECCAK_SW_MATRIX_SA_SW_AS_HW,
	KECCAK_HW_MM_MATRIX_SA_SW_AS_HW,
	KECCAK_SW_MATRIX_SA_HW_AS_HW,
	KECCAK_HW_MM_MATRIX_SA_HW_AS_HW
} codeFeaturesType = KECCAK_SW_MATRIX_SA_SW_AS_SW;

//void ticks_to_us(u32 readTimer, u32 * whole, u32 * thousandths, u32 freq_MHz)
//{
//	float fval = (float)readTimer / (float)freq_MHz;
//	*whole = fval;
//	*thousandths = (fval - whole) * 1000;
//}

#if ENABLE_DEBUG
void matrix_SA_mult(uint32_t * S, uint32_t * A, uint32_t * B)
{
	#define REPEAT		1

	print_debug(DEBUG_MATRIX_MM, "[MATRIX] Matrix init\n");

	//Variables
	int i, j;
	u32 readGpio = 0x0;

	//Set start pin high
	XGpio_DiscreteWrite(&axiStartBusyMatrix, 1, 0x1); // Start gpio set high

	for(j = 0; j < REPEAT; j++)
	{
		//Sending data S
		for(i = 0; i < 16; i++)
		{
			memoryMatrixS[i] = S[i];
	//		print_debug(DEBUG_MATRIX_MM, "\tSent data S[%d]: 0x%lx\n", i, S[i]);
		}

		//Sending data A
		for(i = 0; i < 1280; i++)
		{
			memoryMatrixA[i] = A[i];
	//		print_debug(DEBUG_MATRIX_MM, "\tSent data A[%d]: 0x%lx\n", i, A[i]);
		}

		//Reading busy bit
		readGpio = XGpio_DiscreteRead(&axiStartBusyMatrix, 1); //Check done pin
		while(readGpio == 0x1)
		{
			readGpio = XGpio_DiscreteRead(&axiStartBusyMatrix, 1);
		}
		print_debug(DEBUG_MATRIX_MM, "[MATRIX] Busy bit low!\n");

		//Interpret data
		for (i = 0; i < 2560; i++)
		{
			B[i] = memoryMatrixB[i];
			if(i < 20 || i > 2500)
				print_debug(DEBUG_MATRIX_MM, "\tB[%d]: 0x%lx\n", i, B[i]);
		}
	}

	//Set start pin low
	XGpio_DiscreteWrite(&axiStartBusyMatrix, 1, 0x0); // Start gpio set low

}

void matrix_AS_mult(uint32_t * A, uint32_t * S, uint32_t * B)
{
	print_debug(DEBUG_MATRIX_MM, "[MATRIX] Matrix2 init\n");

	//Variables
	int i, j;
	u32 readGpio = 0x0;

	//Set start pin high
	XGpio_DiscreteWrite(&axiStartBusyMatrix2, 1, 0x1); // Start gpio set high

	for(j = 0; j < 160; j++)
	{

		//Sending data A
		for(i = 0; i < 1280; i++)
		{
			memoryMatrixA2[i] = A[i];
	//		if(i < 20 || i > 1200)
	//			print_debug(DEBUG_MATRIX_MM, "\tSent data A2[%d]: 0x%lx\n", i, S[i]);
		}

		//Sending data S
		for(i = 0; i < 2560; i++)
		{
			memoryMatrixS2[i] = S[i];
	//		if(i < 20 || i > 2500)
	//			print_debug(DEBUG_MATRIX_MM, "\tSent data S2[%d]: 0x%lx\n", i, A[i]);
		}

		//Reading busy bit
		readGpio = XGpio_DiscreteRead(&axiStartBusyMatrix2, 1); //Check done pin
		while(readGpio == 0x1)
		{
			readGpio = XGpio_DiscreteRead(&axiStartBusyMatrix2, 1);
		}
		print_debug(DEBUG_MATRIX_MM, "[MATRIX] Busy bit low!\n");
	}

	//Interpret data
	for (i = 0; i < 2560; i++)
	{
		B[i] = memoryMatrixB2[i];
		if(i < 20 || i > 2500)
			print_debug(DEBUG_MATRIX_MM, "\tB2[%d]: 0x%lx\n", i, B[i]);
	}

	//Set start pin low
	XGpio_DiscreteWrite(&axiStartBusyMatrix2, 1, 0x0); // Start gpio set low
}

void shake128_hw(unsigned char *output, unsigned long long outlen, const unsigned char *input,  unsigned long long inlen)
{
	//Variables
	int i;
	u32 readGpio = 0x0;
	u32 u32InWords = (inlen >> 2) + ((inlen & 0x1) | (inlen & 0x2));
	u32 u32OutWords = (outlen >> 2) + ((outlen & 0x1) | (outlen & 0x2));
	print_debug(DEBUG_SHAKE_MM, "[SHAKE] inlen: %llu\n", inlen);
	print_debug(DEBUG_SHAKE_MM, "[SHAKE] u32InWords: %d\n", u32InWords);
	print_debug(DEBUG_SHAKE_MM, "[SHAKE] outlen: %llu\n", outlen);
	print_debug(DEBUG_SHAKE_MM, "[SHAKE] u32OutWords: %d\n", u32OutWords);

	//Set inlen and outlen
	XGpio_DiscreteWrite(&axiInlenOutlen, 1, ((u32)inlen) & 0x7fff); // Set inlen
	XGpio_DiscreteWrite(&axiInlenOutlen, 2, ((u32)outlen) & 0x7fff); // Set outlen

	//Checking if BRAM has already been cleaned
	readGpio = XGpio_DiscreteRead(&axiStartBusyShake, 1); //Check busy pin
	while(readGpio == 0x1)
		readGpio = XGpio_DiscreteRead(&axiStartBusyShake, 1);

	//Set start pin high
	XGpio_DiscreteWrite(&axiStartBusyShake, 1, 0x1); // Start gpio set high

	//Sending data
	u32 * m;
	m = (u32 *)input;
	for(i = 0; i < u32InWords - 1; i++)
	{
		memoryMMshake[i] = m[i];
		print_debug(DEBUG_SHAKE_MM, "[SHAKE] memoryMMshake[%d]: 0x%08x\n", i, m[i]);
	}

	//Last word
	switch(inlen & 0x3)
	{
		case 0:
			memoryMMshake[u32InWords - 1] = m[u32InWords - 1];
			print_debug(DEBUG_SHAKE_MM, "[SHAKE] memoryMMshake[%d]: 0x%08x\n", u32InWords - 1, m[u32InWords - 1]);
			break;
		case 1:
			memoryMMshake[u32InWords - 1] = m[u32InWords - 1] & 0xff;
			print_debug(DEBUG_SHAKE_MM, "[SHAKE] memoryMMshake[%d]: 0x%08x\n", u32InWords - 1, m[u32InWords - 1] & 0xff);
			break;
		case 2:
			memoryMMshake[u32InWords - 1] = m[u32InWords - 1] & 0xffff;
			print_debug(DEBUG_SHAKE_MM, "[SHAKE] memoryMMshake[%d]: 0x%08x\n", u32InWords - 1, m[u32InWords - 1] & 0xffff);
			break;
		case 3:
			memoryMMshake[u32InWords - 1] = m[u32InWords - 1] & 0xffffff;
			print_debug(DEBUG_SHAKE_MM, "[SHAKE] memoryMMshake[%d]: 0x%08x\n", u32InWords - 1, m[u32InWords - 1] & 0xffffff);
			break;
	}

	//Check if data processing is yet busy.
	readGpio = XGpio_DiscreteRead(&axiStartBusyShake, 1); //Check busy pin
	while(readGpio == 0x1)
		readGpio = XGpio_DiscreteRead(&axiStartBusyShake, 1);
	print_debug(DEBUG_SHAKE_MM, "[SHAKE] Busy bit low!\n");

	//Receiving data
	u32 cipher;
	for(i = 0; i < u32OutWords - 1; i++)
	{
		cipher = memoryMMshake[i];
		output[i << 2] 	     = cipher & 0xff;
		output[(i << 2) + 1] = (cipher >> 8) & 0xff;
		output[(i << 2) + 2] = (cipher >> 16) & 0xff;
		output[(i << 2) + 3] = (cipher >> 24) & 0xff;
	}

	//Last word
	cipher = memoryMMshake[u32OutWords - 1];
	switch(outlen & 0x3)
	{
		case 0:
			output[(u32OutWords - 1) << 2] 	     = cipher & 0xff;
			output[((u32OutWords - 1) << 2) + 1] = (cipher >> 8) & 0xff;;
			output[((u32OutWords - 1) << 2) + 2] = (cipher >> 16) & 0xff;
			output[((u32OutWords - 1) << 2) + 3] = (cipher >> 24) & 0xff;
			break;
		case 1:
			output[(u32OutWords - 1) << 2] 	     = cipher & 0xff;
			break;
		case 2:
			output[(u32OutWords - 1) << 2] 	     = cipher & 0xff;
			output[((u32OutWords - 1) << 2) + 1] = (cipher >> 8) & 0xff;;
			break;
		case 3:
			output[(u32OutWords - 1) << 2] 	     = cipher & 0xff;
			output[((u32OutWords - 1) << 2) + 1] = (cipher >> 8) & 0xff;
			output[((u32OutWords - 1) << 2) + 2] = (cipher >> 16) & 0xff;
			break;
	}

	//Set start pin low
	XGpio_DiscreteWrite(&axiStartBusyShake, 1, 0x0); // Start gpio set low
}
#endif

void KeccakF1600_StatePermute(uint64_t * state)
{

#if ENABLE_SW_TIMER
	if(codeFeaturesType == KECCAK_SW_MATRIX_SA_SW_AS_SW || codeFeaturesType == KECCAK_SW_MATRIX_SA_HW_AS_SW ||
	   codeFeaturesType == KECCAK_SW_MATRIX_SA_SW_AS_HW || codeFeaturesType == KECCAK_SW_MATRIX_SA_HW_AS_HW)
	{
		t_keccak_sw = get_cyclecount();
		KeccakF1600_StatePermute_SW(state);
		t_keccak_sw_acc += get_cyclecount() - t_keccak_sw - overhead;
	}
	else
	{
		t_keccak_hw = get_cyclecount();
		KeccakF1600_StatePermute_HW_MM(state);
		t_keccak_hw_acc += get_cyclecount() - t_keccak_hw - overhead;

#if ENABLE_HW_TIMER
		//Stopping timer and reading time
		u32 readTimer;
		float fval;
		u32 whole, thousandths;

		readTimer = XGpio_DiscreteRead(&keccak_time, 1);
		fval = (float)readTimer / (float)100;
		whole = fval;
		thousandths = (fval - whole) * 1000;
		print_debug(DEBUG_TIMER, "[TEST_KEM] Time took to process Keccak-f1600-MM: %lu.%03lu us (%d ticks)\n", whole, thousandths, readTimer);
		readTimerKeccakTotal += readTimer;

		readTimer = XGpio_DiscreteRead(&keccak_time, 2);
		fval = (float)readTimer / (float)100;
		whole = fval;
		thousandths = (fval - whole) * 1000;
		print_debug(DEBUG_TIMER, "[TEST_KEM] Time took to process Keccak-f1600-MM: %lu.%03lu us (%d ticks)\n", whole, thousandths, readTimer);
		readTimerKeccakProc += readTimer;

		countKeccak++;
#endif
	}
#else
	if(codeFeaturesType == KECCAK_SW_MATRIX_SA_SW_AS_SW || codeFeaturesType == KECCAK_SW_MATRIX_SA_HW_AS_SW ||
	   codeFeaturesType == KECCAK_SW_MATRIX_SA_SW_AS_HW || codeFeaturesType == KECCAK_SW_MATRIX_SA_HW_AS_HW)
		KeccakF1600_StatePermute_SW(state);
	else
		KeccakF1600_StatePermute_HW_MM(state);
#endif
}

int frodo_mul_add_sa_plus_e(uint16_t *out, const uint16_t *s, const uint16_t *e, const uint8_t *seed_A)
{
	int iReturn;

#if ENABLE_SW_TIMER
	if(codeFeaturesType == KECCAK_SW_MATRIX_SA_SW_AS_SW || codeFeaturesType == KECCAK_HW_MM_MATRIX_SA_SW_AS_SW ||
	   codeFeaturesType == KECCAK_SW_MATRIX_SA_SW_AS_HW || codeFeaturesType == KECCAK_HW_MM_MATRIX_SA_SW_AS_HW)
	{
		t_matrix_sa_sw = get_cyclecount();
		iReturn = frodo_mul_add_sa_plus_e_SW(out, s, e, seed_A);
		t_matrix_sa_sw_acc += get_cyclecount() - t_matrix_sa_sw - overhead;
	}
	else
	{
		t_matrix_sa_hw = get_cyclecount();
		iReturn = frodo_mul_add_sa_plus_e_HW(out, s, e, seed_A);
		t_matrix_sa_hw_acc += get_cyclecount() - t_matrix_sa_hw - overhead;

#if ENABLE_HW_TIMER
		//Stopping timer and reading time
		u32 readTimer;
		float fval;
		u32 whole, thousandths;

		readTimer = XGpio_DiscreteRead(&matrix_sa_time, 1);
		fval = (float)readTimer / (float)100;
		whole = fval;
		thousandths = (fval - whole) * 1000;
		print_debug(DEBUG_TIMER, "[TEST_KEM] Time took to process Matrix-SA: %lu.%03lu us (%d ticks)\n", whole, thousandths, readTimer);
		readTimerMatrixSaTotal += readTimer;

		readTimer = XGpio_DiscreteRead(&matrix_sa_time, 2);
		fval = (float)readTimer / (float)100;
		whole = fval;
		thousandths = (fval - whole) * 1000;
		print_debug(DEBUG_TIMER, "[TEST_KEM] Time took to process Matrix-SA: %lu.%03lu us (%d ticks)\n", whole, thousandths, readTimer);
		readTimerMatrixSaProc += readTimer;

		countMatrixSa++;
#endif
	}

#else
	if(codeFeaturesType == KECCAK_SW_MATRIX_SA_SW_AS_SW || codeFeaturesType == KECCAK_HW_MM_MATRIX_SA_SW_AS_SW ||
	   codeFeaturesType == KECCAK_SW_MATRIX_SA_SW_AS_HW || codeFeaturesType == KECCAK_HW_MM_MATRIX_SA_SW_AS_HW)
		iReturn = frodo_mul_add_sa_plus_e_SW(out, s, e, seed_A);
	else
		iReturn = frodo_mul_add_sa_plus_e_HW(out, s, e, seed_A);
#endif

	return iReturn;
}

int frodo_mul_add_as_plus_e(uint16_t *out, const uint16_t *s, const uint16_t *e, const uint8_t *seed_A)
{
	int iReturn;

#if ENABLE_SW_TIMER
	if(codeFeaturesType == KECCAK_SW_MATRIX_SA_SW_AS_SW || codeFeaturesType == KECCAK_HW_MM_MATRIX_SA_SW_AS_SW ||
	   codeFeaturesType == KECCAK_SW_MATRIX_SA_HW_AS_SW || codeFeaturesType == KECCAK_HW_MM_MATRIX_SA_HW_AS_SW)
	{
		t_matrix_as_sw = get_cyclecount();
		iReturn = frodo_mul_add_as_plus_e_SW(out, s, e, seed_A);
		t_matrix_as_sw_acc += get_cyclecount() - t_matrix_as_sw - overhead;
	}
	else
	{
		t_matrix_as_hw = get_cyclecount();
		iReturn = frodo_mul_add_as_plus_e_HW(out, s, e, seed_A);
		t_matrix_as_hw_acc += get_cyclecount() - t_matrix_as_sw - overhead;

#if ENABLE_HW_TIMER
		//Stopping timer and reading time
		u32 readTimer;
		float fval;
		u32 whole, thousandths;

		readTimer = XGpio_DiscreteRead(&matrix_as_time, 1);
		fval = (float)readTimer / (float)100;
		whole = fval;
		thousandths = (fval - whole) * 1000;
		print_debug(DEBUG_TIMER, "[TEST_KEM] Time took to process Matrix-AS: %lu.%03lu us (%d ticks)\n", whole, thousandths, readTimer);
		readTimerMatrixAsTotal += readTimer;

		readTimer = XGpio_DiscreteRead(&matrix_as_time, 2);
		fval = (float)readTimer / (float)100;
		whole = fval;
		thousandths = (fval - whole) * 1000;
		print_debug(DEBUG_TIMER, "[TEST_KEM] Time took to process Matrix-AS: %lu.%03lu us (%d ticks)\n", whole, thousandths, readTimer);
		readTimerMatrixAsProc += readTimer;

		countMatrixAs++;
#endif
	}
#else
	if(codeFeaturesType == KECCAK_SW_MATRIX_SA_SW_AS_SW || codeFeaturesType == KECCAK_HW_MM_MATRIX_SA_SW_AS_SW ||
	   codeFeaturesType == KECCAK_SW_MATRIX_SA_HW_AS_SW || codeFeaturesType == KECCAK_HW_MM_MATRIX_SA_HW_AS_SW)
		iReturn = frodo_mul_add_as_plus_e_SW(out, s, e, seed_A);
	else
		iReturn = frodo_mul_add_as_plus_e_HW(out, s, e, seed_A);
#endif

	return iReturn;
}

unsigned int get_cyclecount (void)
{
	unsigned int value;
	// Read CCNT Register
	asm volatile ("MRC p15, 0, %0, c9, c13, 0\t\n": "=r"(value));
	return value;
}

void init_perfcounters (int32_t do_reset, int32_t enable_divider)
{
	// in general enable all counters (including cycle counter)
	int32_t value = 1;

	// peform reset:
	if (do_reset)
	{
		value |= 2;     // reset all counters to zero.
		value |= 4;     // reset cycle counter to zero.
	}

	if (enable_divider)
		value |= 8;     // enable "by 64" divider for CCNT.

	value |= 16;

	// program the performance-counter control-register:
	asm volatile ("MCR p15, 0, %0, c9, c12, 0\t\n" :: "r"(value));

	// enable all counters:
	asm volatile ("MCR p15, 0, %0, c9, c12, 1\t\n" :: "r"(0x8000000f));

	// clear overflows:
	asm volatile ("MCR p15, 0, %0, c9, c12, 3\t\n" :: "r"(0x8000000f));
}

int my_memcmp(unsigned char *cipher1, unsigned char *cipher2, int len)
{
	int i;
	for(i = 0; i < len; i++)
	{
		if(cipher1[i] != cipher2[i])
		{
			print_debug(1, "[MEMCMP ERROR] Error at position %d | cipher1: 0x%02x | cipher2: 0x%02x\n", i, cipher1[i], cipher2[i]);
			return 1; //for different vectors
		}
	}
	return 0; //for match
}

int kem_test(const char *named_parameters, int iterations)
{
	// CDF table
//	uint16_t CDF_TABLE[13] = {4643, 13363, 20579, 25843, 29227, 31145, 32103, 32525, 32689, 32745, 32762, 32766, 32767};
//	uint16_t CDF_TABLE_LEN = 13;

	// measure the counting overhead:
	overhead = get_cyclecount();
	overhead = get_cyclecount() - overhead;

	volatile unsigned int t_keypair_keccak_sw_matrix_sa_sw_as_sw = 0, t_enc_keccak_sw_matrix_sa_sw_as_sw = 0, t_dec_keccak_sw_matrix_sa_sw_as_sw = 0, t_total_keccak_sw_matrix_sa_sw_as_sw = 0;
	volatile unsigned int t_keypair_keccak_hw_mm_matrix_sa_sw_as_sw = 0, t_enc_keccak_hw_mm_matrix_sa_sw_as_sw = 0, t_dec_keccak_hw_mm_matrix_sa_sw_as_sw = 0, t_total_keccak_hw_mm_matrix_sa_sw_as_sw = 0;
	volatile unsigned int t_keypair_keccak_sw_matrix_sa_hw_as_sw = 0, t_enc_keccak_sw_matrix_sa_hw_as_sw = 0, t_dec_keccak_sw_matrix_sa_hw_as_sw = 0, t_total_keccak_sw_matrix_sa_hw_as_sw = 0;
	volatile unsigned int t_keypair_keccak_hw_mm_matrix_sa_hw_as_sw = 0, t_enc_keccak_hw_mm_matrix_sa_hw_as_sw = 0, t_dec_keccak_hw_mm_matrix_sa_hw_as_sw = 0, t_total_keccak_hw_mm_matrix_sa_hw_as_sw = 0;
	volatile unsigned int t_keypair_keccak_sw_matrix_sa_sw_as_hw = 0, t_enc_keccak_sw_matrix_sa_sw_as_hw = 0, t_dec_keccak_sw_matrix_sa_sw_as_hw = 0, t_total_keccak_sw_matrix_sa_sw_as_hw = 0;
	volatile unsigned int t_keypair_keccak_hw_mm_matrix_sa_sw_as_hw = 0, t_enc_keccak_hw_mm_matrix_sa_sw_as_hw = 0, t_dec_keccak_hw_mm_matrix_sa_sw_as_hw = 0, t_total_keccak_hw_mm_matrix_sa_sw_as_hw = 0;
	volatile unsigned int t_keypair_keccak_sw_matrix_sa_hw_as_hw = 0, t_enc_keccak_sw_matrix_sa_hw_as_hw = 0, t_dec_keccak_sw_matrix_sa_hw_as_hw = 0, t_total_keccak_sw_matrix_sa_hw_as_hw = 0;
	volatile unsigned int t_keypair_keccak_hw_mm_matrix_sa_hw_as_hw = 0, t_enc_keccak_hw_mm_matrix_sa_hw_as_hw = 0, t_dec_keccak_hw_mm_matrix_sa_hw_as_hw = 0, t_total_keccak_hw_mm_matrix_sa_hw_as_hw = 0;

#if ENABLE_SW_TIMER
	t_keccak_sw = 0; t_keccak_sw_acc = 0;
	t_keccak_hw = 0; t_keccak_hw_acc = 0;
	t_matrix_sa_sw = 0; t_matrix_sa_sw_acc = 0;
	t_matrix_sa_hw = 0; t_matrix_sa_hw_acc = 0;
#endif

#if ENABLE_HW_TIMER
	readTimerKeccakTotal = 0;
	readTimerKeccakProc = 0;
	readTimerMatrixSaTotal = 0;
	readTimerMatrixSaProc = 0;
	readTimerMatrixAsTotal = 0;
	readTimerMatrixAsProc = 0;

	countKeccak = 0;
	countMatrixSa = 0;
	countMatrixAs = 0;
#endif

	/* enable user-mode access to the performance counter*/
	asm ("MCR p15, 0, %0, C9, C14, 0\n\t" :: "r"(1));

	/* disable counter overflow interrupts (just in case)*/
	asm ("MCR p15, 0, %0, C9, C14, 2\n\t" :: "r"(0x8000000f));

	// init counters:
	init_perfcounters (1, 0);

#if ENABLE_DEBUG
	// ------ Test keccak_function ------
//	u64 state[25] = { 0 };
//	state[0] = 0x000000000000001f;
//	state[20] = 0x8000000000000000;
//	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Initializing Hardware function test\n");
//	printStateMatrixDebug(state);
	unsigned int t;
//	t = get_cyclecount();
//	KeccakF1600_StatePermute_HW(state);
//	t = get_cyclecount() - t;
//	printStateMatrixDebug(state);
//	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Hardware function took exactly %d cycles or %d us (including function call)\n\n", t - overhead, (t - overhead)/666);

	// ------ Test Keccak function ------
#if ENABLE_TEST_KECCAK_SW
	u64 state2[25] = { 0 };
	state2[0] = 0x000000000000001f;
	state2[20] = 0x8000000000000000;
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Initializing Software function test\n");
	printStateMatrixDebug(state2);
	t = get_cyclecount();
	KeccakF1600_StatePermute_SW(state2);
	t = get_cyclecount() - t;
	printStateMatrixDebug(state2);
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Software function took exactly %d cycles or %d us (including function call)\n\n", t - overhead, (t - overhead)/666);
#endif

#if ENABLE_TEST_KECCAK_HW_MM
	u64 state3[25] = { 0 };
	state3[0] = 0x000000000000001f;
	state3[20] = 0x8000000000000000;
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Initializing Hardware Memory-Mapped function test\n");
	printStateMatrixDebug(state3);
	t = get_cyclecount();
	KeccakF1600_StatePermute_HW_MM(state3);
	t = get_cyclecount() - t;
	printStateMatrixDebug(state3);
	print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Hardware Memory-Mapped function took exactly %d cycles or %d us (including function call)\n\n", t - overhead, (t - overhead)/666);
#endif

	// ------ Test Matrix function ------
#if ENABLE_TEST_MATRIX_SA
	u32 S[16] = {0x00010003, 0x00050007, 0x0009000B, 0x000D000F, 0x00110013, 0x00150017, 0x0019001B, 0x001D001F, 0x00210023, 0x00250027, 0x0029002B, 0x002D002F, 0x00310033, 0x00350037, 0x0039003B, 0x003D003F};
	u32 A[1280] = {0x00010002, 0x00030004, 0x00050006, 0x00070008, 0x0009000A, 0x000B000C, 0x000D000E, 0x000F0010, 0x00110012, 0x00130014, 0x00150016, 0x00170018, 0x0019001A, 0x001B001C, 0x001D001E, 0x001F0020, 0x00210022, 0x00230024, 0x00250026, 0x00270028, 0x0029002A, 0x002B002C, 0x002D002E, 0x002F0030, 0x00310032, 0x00330034, 0x00350036, 0x00370038, 0x0039003A, 0x003B003C, 0x003D003E, 0x003F0040, 0x00410042, 0x00430044, 0x00450046, 0x00470048, 0x0049004A, 0x004B004C, 0x004D004E, 0x004F0050, 0x00510052, 0x00530054, 0x00550056, 0x00570058, 0x0059005A, 0x005B005C, 0x005D005E, 0x005F0060, 0x00610062, 0x00630064, 0x00650066, 0x00670068, 0x0069006A, 0x006B006C, 0x006D006E, 0x006F0070, 0x00710072, 0x00730074, 0x00750076, 0x00770078, 0x0079007A, 0x007B007C, 0x007D007E, 0x007F0080, 0x00810082, 0x00830084, 0x00850086, 0x00870088, 0x0089008A, 0x008B008C, 0x008D008E, 0x008F0090, 0x00910092, 0x00930094, 0x00950096, 0x00970098, 0x0099009A, 0x009B009C, 0x009D009E, 0x009F00A0, 0x00A100A2, 0x00A300A4, 0x00A500A6, 0x00A700A8, 0x00A900AA, 0x00AB00AC, 0x00AD00AE, 0x00AF00B0, 0x00B100B2, 0x00B300B4, 0x00B500B6, 0x00B700B8, 0x00B900BA, 0x00BB00BC, 0x00BD00BE, 0x00BF00C0, 0x00C100C2, 0x00C300C4, 0x00C500C6, 0x00C700C8, 0x00C900CA, 0x00CB00CC, 0x00CD00CE, 0x00CF00D0, 0x00D100D2, 0x00D300D4, 0x00D500D6, 0x00D700D8, 0x00D900DA, 0x00DB00DC, 0x00DD00DE, 0x00DF00E0, 0x00E100E2, 0x00E300E4, 0x00E500E6, 0x00E700E8, 0x00E900EA, 0x00EB00EC, 0x00ED00EE, 0x00EF00F0, 0x00F100F2, 0x00F300F4, 0x00F500F6, 0x00F700F8, 0x00F900FA, 0x00FB00FC, 0x00FD00FE, 0x00FF0100, 0x01010102, 0x01030104, 0x01050106, 0x01070108, 0x0109010A, 0x010B010C, 0x010D010E, 0x010F0110, 0x01110112, 0x01130114, 0x01150116, 0x01170118, 0x0119011A, 0x011B011C, 0x011D011E, 0x011F0120, 0x01210122, 0x01230124, 0x01250126, 0x01270128, 0x0129012A, 0x012B012C, 0x012D012E, 0x012F0130, 0x01310132, 0x01330134, 0x01350136, 0x01370138, 0x0139013A, 0x013B013C, 0x013D013E, 0x013F0140, 0x01410142, 0x01430144, 0x01450146, 0x01470148, 0x0149014A, 0x014B014C, 0x014D014E, 0x014F0150, 0x01510152, 0x01530154, 0x01550156, 0x01570158, 0x0159015A, 0x015B015C, 0x015D015E, 0x015F0160, 0x01610162, 0x01630164, 0x01650166, 0x01670168, 0x0169016A, 0x016B016C, 0x016D016E, 0x016F0170, 0x01710172, 0x01730174, 0x01750176, 0x01770178, 0x0179017A, 0x017B017C, 0x017D017E, 0x017F0180, 0x01810182, 0x01830184, 0x01850186, 0x01870188, 0x0189018A, 0x018B018C, 0x018D018E, 0x018F0190, 0x01910192, 0x01930194, 0x01950196, 0x01970198, 0x0199019A, 0x019B019C, 0x019D019E, 0x019F01A0, 0x01A101A2, 0x01A301A4, 0x01A501A6, 0x01A701A8, 0x01A901AA, 0x01AB01AC, 0x01AD01AE, 0x01AF01B0, 0x01B101B2, 0x01B301B4, 0x01B501B6, 0x01B701B8, 0x01B901BA, 0x01BB01BC, 0x01BD01BE, 0x01BF01C0, 0x01C101C2, 0x01C301C4, 0x01C501C6, 0x01C701C8, 0x01C901CA, 0x01CB01CC, 0x01CD01CE, 0x01CF01D0, 0x01D101D2, 0x01D301D4, 0x01D501D6, 0x01D701D8, 0x01D901DA, 0x01DB01DC, 0x01DD01DE, 0x01DF01E0, 0x01E101E2, 0x01E301E4, 0x01E501E6, 0x01E701E8, 0x01E901EA, 0x01EB01EC, 0x01ED01EE, 0x01EF01F0, 0x01F101F2, 0x01F301F4, 0x01F501F6, 0x01F701F8, 0x01F901FA, 0x01FB01FC, 0x01FD01FE, 0x01FF0200, 0x02010202, 0x02030204, 0x02050206, 0x02070208, 0x0209020A, 0x020B020C, 0x020D020E, 0x020F0210, 0x02110212, 0x02130214, 0x02150216, 0x02170218, 0x0219021A, 0x021B021C, 0x021D021E, 0x021F0220, 0x02210222, 0x02230224, 0x02250226, 0x02270228, 0x0229022A, 0x022B022C, 0x022D022E, 0x022F0230, 0x02310232, 0x02330234, 0x02350236, 0x02370238, 0x0239023A, 0x023B023C, 0x023D023E, 0x023F0240, 0x02410242, 0x02430244, 0x02450246, 0x02470248, 0x0249024A, 0x024B024C, 0x024D024E, 0x024F0250, 0x02510252, 0x02530254, 0x02550256, 0x02570258, 0x0259025A, 0x025B025C, 0x025D025E, 0x025F0260, 0x02610262, 0x02630264, 0x02650266, 0x02670268, 0x0269026A, 0x026B026C, 0x026D026E, 0x026F0270, 0x02710272, 0x02730274, 0x02750276, 0x02770278, 0x0279027A, 0x027B027C, 0x027D027E, 0x027F0280, 0x02810282, 0x02830284, 0x02850286, 0x02870288, 0x0289028A, 0x028B028C, 0x028D028E, 0x028F0290, 0x02910292, 0x02930294, 0x02950296, 0x02970298, 0x0299029A, 0x029B029C, 0x029D029E, 0x029F02A0, 0x02A102A2, 0x02A302A4, 0x02A502A6, 0x02A702A8, 0x02A902AA, 0x02AB02AC, 0x02AD02AE, 0x02AF02B0, 0x02B102B2, 0x02B302B4, 0x02B502B6, 0x02B702B8, 0x02B902BA, 0x02BB02BC, 0x02BD02BE, 0x02BF02C0, 0x02C102C2, 0x02C302C4, 0x02C502C6, 0x02C702C8, 0x02C902CA, 0x02CB02CC, 0x02CD02CE, 0x02CF02D0, 0x02D102D2, 0x02D302D4, 0x02D502D6, 0x02D702D8, 0x02D902DA, 0x02DB02DC, 0x02DD02DE, 0x02DF02E0, 0x02E102E2, 0x02E302E4, 0x02E502E6, 0x02E702E8, 0x02E902EA, 0x02EB02EC, 0x02ED02EE, 0x02EF02F0, 0x02F102F2, 0x02F302F4, 0x02F502F6, 0x02F702F8, 0x02F902FA, 0x02FB02FC, 0x02FD02FE, 0x02FF0300, 0x03010302, 0x03030304, 0x03050306, 0x03070308, 0x0309030A, 0x030B030C, 0x030D030E, 0x030F0310, 0x03110312, 0x03130314, 0x03150316, 0x03170318, 0x0319031A, 0x031B031C, 0x031D031E, 0x031F0320, 0x03210322, 0x03230324, 0x03250326, 0x03270328, 0x0329032A, 0x032B032C, 0x032D032E, 0x032F0330, 0x03310332, 0x03330334, 0x03350336, 0x03370338, 0x0339033A, 0x033B033C, 0x033D033E, 0x033F0340, 0x03410342, 0x03430344, 0x03450346, 0x03470348, 0x0349034A, 0x034B034C, 0x034D034E, 0x034F0350, 0x03510352, 0x03530354, 0x03550356, 0x03570358, 0x0359035A, 0x035B035C, 0x035D035E, 0x035F0360, 0x03610362, 0x03630364, 0x03650366, 0x03670368, 0x0369036A, 0x036B036C, 0x036D036E, 0x036F0370, 0x03710372, 0x03730374, 0x03750376, 0x03770378, 0x0379037A, 0x037B037C, 0x037D037E, 0x037F0380, 0x03810382, 0x03830384, 0x03850386, 0x03870388, 0x0389038A, 0x038B038C, 0x038D038E, 0x038F0390, 0x03910392, 0x03930394, 0x03950396, 0x03970398, 0x0399039A, 0x039B039C, 0x039D039E, 0x039F03A0, 0x03A103A2, 0x03A303A4, 0x03A503A6, 0x03A703A8, 0x03A903AA, 0x03AB03AC, 0x03AD03AE, 0x03AF03B0, 0x03B103B2, 0x03B303B4, 0x03B503B6, 0x03B703B8, 0x03B903BA, 0x03BB03BC, 0x03BD03BE, 0x03BF03C0, 0x03C103C2, 0x03C303C4, 0x03C503C6, 0x03C703C8, 0x03C903CA, 0x03CB03CC, 0x03CD03CE, 0x03CF03D0, 0x03D103D2, 0x03D303D4, 0x03D503D6, 0x03D703D8, 0x03D903DA, 0x03DB03DC, 0x03DD03DE, 0x03DF03E0, 0x03E103E2, 0x03E303E4, 0x03E503E6, 0x03E703E8, 0x03E903EA, 0x03EB03EC, 0x03ED03EE, 0x03EF03F0, 0x03F103F2, 0x03F303F4, 0x03F503F6, 0x03F703F8, 0x03F903FA, 0x03FB03FC, 0x03FD03FE, 0x03FF0400, 0x04010402, 0x04030404, 0x04050406, 0x04070408, 0x0409040A, 0x040B040C, 0x040D040E, 0x040F0410, 0x04110412, 0x04130414, 0x04150416, 0x04170418, 0x0419041A, 0x041B041C, 0x041D041E, 0x041F0420, 0x04210422, 0x04230424, 0x04250426, 0x04270428, 0x0429042A, 0x042B042C, 0x042D042E, 0x042F0430, 0x04310432, 0x04330434, 0x04350436, 0x04370438, 0x0439043A, 0x043B043C, 0x043D043E, 0x043F0440, 0x04410442, 0x04430444, 0x04450446, 0x04470448, 0x0449044A, 0x044B044C, 0x044D044E, 0x044F0450, 0x04510452, 0x04530454, 0x04550456, 0x04570458, 0x0459045A, 0x045B045C, 0x045D045E, 0x045F0460, 0x04610462, 0x04630464, 0x04650466, 0x04670468, 0x0469046A, 0x046B046C, 0x046D046E, 0x046F0470, 0x04710472, 0x04730474, 0x04750476, 0x04770478, 0x0479047A, 0x047B047C, 0x047D047E, 0x047F0480, 0x04810482, 0x04830484, 0x04850486, 0x04870488, 0x0489048A, 0x048B048C, 0x048D048E, 0x048F0490, 0x04910492, 0x04930494, 0x04950496, 0x04970498, 0x0499049A, 0x049B049C, 0x049D049E, 0x049F04A0, 0x04A104A2, 0x04A304A4, 0x04A504A6, 0x04A704A8, 0x04A904AA, 0x04AB04AC, 0x04AD04AE, 0x04AF04B0, 0x04B104B2, 0x04B304B4, 0x04B504B6, 0x04B704B8, 0x04B904BA, 0x04BB04BC, 0x04BD04BE, 0x04BF04C0, 0x04C104C2, 0x04C304C4, 0x04C504C6, 0x04C704C8, 0x04C904CA, 0x04CB04CC, 0x04CD04CE, 0x04CF04D0, 0x04D104D2, 0x04D304D4, 0x04D504D6, 0x04D704D8, 0x04D904DA, 0x04DB04DC, 0x04DD04DE, 0x04DF04E0, 0x04E104E2, 0x04E304E4, 0x04E504E6, 0x04E704E8, 0x04E904EA, 0x04EB04EC, 0x04ED04EE, 0x04EF04F0, 0x04F104F2, 0x04F304F4, 0x04F504F6, 0x04F704F8, 0x04F904FA, 0x04FB04FC, 0x04FD04FE, 0x04FF0500, 0x05010502, 0x05030504, 0x05050506, 0x05070508, 0x0509050A, 0x050B050C, 0x050D050E, 0x050F0510, 0x05110512, 0x05130514, 0x05150516, 0x05170518, 0x0519051A, 0x051B051C, 0x051D051E, 0x051F0520, 0x05210522, 0x05230524, 0x05250526, 0x05270528, 0x0529052A, 0x052B052C, 0x052D052E, 0x052F0530, 0x05310532, 0x05330534, 0x05350536, 0x05370538, 0x0539053A, 0x053B053C, 0x053D053E, 0x053F0540, 0x05410542, 0x05430544, 0x05450546, 0x05470548, 0x0549054A, 0x054B054C, 0x054D054E, 0x054F0550, 0x05510552, 0x05530554, 0x05550556, 0x05570558, 0x0559055A, 0x055B055C, 0x055D055E, 0x055F0560, 0x05610562, 0x05630564, 0x05650566, 0x05670568, 0x0569056A, 0x056B056C, 0x056D056E, 0x056F0570, 0x05710572, 0x05730574, 0x05750576, 0x05770578, 0x0579057A, 0x057B057C, 0x057D057E, 0x057F0580, 0x05810582, 0x05830584, 0x05850586, 0x05870588, 0x0589058A, 0x058B058C, 0x058D058E, 0x058F0590, 0x05910592, 0x05930594, 0x05950596, 0x05970598, 0x0599059A, 0x059B059C, 0x059D059E, 0x059F05A0, 0x05A105A2, 0x05A305A4, 0x05A505A6, 0x05A705A8, 0x05A905AA, 0x05AB05AC, 0x05AD05AE, 0x05AF05B0, 0x05B105B2, 0x05B305B4, 0x05B505B6, 0x05B705B8, 0x05B905BA, 0x05BB05BC, 0x05BD05BE, 0x05BF05C0, 0x05C105C2, 0x05C305C4, 0x05C505C6, 0x05C705C8, 0x05C905CA, 0x05CB05CC, 0x05CD05CE, 0x05CF05D0, 0x05D105D2, 0x05D305D4, 0x05D505D6, 0x05D705D8, 0x05D905DA, 0x05DB05DC, 0x05DD05DE, 0x05DF05E0, 0x05E105E2, 0x05E305E4, 0x05E505E6, 0x05E705E8, 0x05E905EA, 0x05EB05EC, 0x05ED05EE, 0x05EF05F0, 0x05F105F2, 0x05F305F4, 0x05F505F6, 0x05F705F8, 0x05F905FA, 0x05FB05FC, 0x05FD05FE, 0x05FF0600, 0x06010602, 0x06030604, 0x06050606, 0x06070608, 0x0609060A, 0x060B060C, 0x060D060E, 0x060F0610, 0x06110612, 0x06130614, 0x06150616, 0x06170618, 0x0619061A, 0x061B061C, 0x061D061E, 0x061F0620, 0x06210622, 0x06230624, 0x06250626, 0x06270628, 0x0629062A, 0x062B062C, 0x062D062E, 0x062F0630, 0x06310632, 0x06330634, 0x06350636, 0x06370638, 0x0639063A, 0x063B063C, 0x063D063E, 0x063F0640, 0x06410642, 0x06430644, 0x06450646, 0x06470648, 0x0649064A, 0x064B064C, 0x064D064E, 0x064F0650, 0x06510652, 0x06530654, 0x06550656, 0x06570658, 0x0659065A, 0x065B065C, 0x065D065E, 0x065F0660, 0x06610662, 0x06630664, 0x06650666, 0x06670668, 0x0669066A, 0x066B066C, 0x066D066E, 0x066F0670, 0x06710672, 0x06730674, 0x06750676, 0x06770678, 0x0679067A, 0x067B067C, 0x067D067E, 0x067F0680, 0x06810682, 0x06830684, 0x06850686, 0x06870688, 0x0689068A, 0x068B068C, 0x068D068E, 0x068F0690, 0x06910692, 0x06930694, 0x06950696, 0x06970698, 0x0699069A, 0x069B069C, 0x069D069E, 0x069F06A0, 0x06A106A2, 0x06A306A4, 0x06A506A6, 0x06A706A8, 0x06A906AA, 0x06AB06AC, 0x06AD06AE, 0x06AF06B0, 0x06B106B2, 0x06B306B4, 0x06B506B6, 0x06B706B8, 0x06B906BA, 0x06BB06BC, 0x06BD06BE, 0x06BF06C0, 0x06C106C2, 0x06C306C4, 0x06C506C6, 0x06C706C8, 0x06C906CA, 0x06CB06CC, 0x06CD06CE, 0x06CF06D0, 0x06D106D2, 0x06D306D4, 0x06D506D6, 0x06D706D8, 0x06D906DA, 0x06DB06DC, 0x06DD06DE, 0x06DF06E0, 0x06E106E2, 0x06E306E4, 0x06E506E6, 0x06E706E8, 0x06E906EA, 0x06EB06EC, 0x06ED06EE, 0x06EF06F0, 0x06F106F2, 0x06F306F4, 0x06F506F6, 0x06F706F8, 0x06F906FA, 0x06FB06FC, 0x06FD06FE, 0x06FF0700, 0x07010702, 0x07030704, 0x07050706, 0x07070708, 0x0709070A, 0x070B070C, 0x070D070E, 0x070F0710, 0x07110712, 0x07130714, 0x07150716, 0x07170718, 0x0719071A, 0x071B071C, 0x071D071E, 0x071F0720, 0x07210722, 0x07230724, 0x07250726, 0x07270728, 0x0729072A, 0x072B072C, 0x072D072E, 0x072F0730, 0x07310732, 0x07330734, 0x07350736, 0x07370738, 0x0739073A, 0x073B073C, 0x073D073E, 0x073F0740, 0x07410742, 0x07430744, 0x07450746, 0x07470748, 0x0749074A, 0x074B074C, 0x074D074E, 0x074F0750, 0x07510752, 0x07530754, 0x07550756, 0x07570758, 0x0759075A, 0x075B075C, 0x075D075E, 0x075F0760, 0x07610762, 0x07630764, 0x07650766, 0x07670768, 0x0769076A, 0x076B076C, 0x076D076E, 0x076F0770, 0x07710772, 0x07730774, 0x07750776, 0x07770778, 0x0779077A, 0x077B077C, 0x077D077E, 0x077F0780, 0x07810782, 0x07830784, 0x07850786, 0x07870788, 0x0789078A, 0x078B078C, 0x078D078E, 0x078F0790, 0x07910792, 0x07930794, 0x07950796, 0x07970798, 0x0799079A, 0x079B079C, 0x079D079E, 0x079F07A0, 0x07A107A2, 0x07A307A4, 0x07A507A6, 0x07A707A8, 0x07A907AA, 0x07AB07AC, 0x07AD07AE, 0x07AF07B0, 0x07B107B2, 0x07B307B4, 0x07B507B6, 0x07B707B8, 0x07B907BA, 0x07BB07BC, 0x07BD07BE, 0x07BF07C0, 0x07C107C2, 0x07C307C4, 0x07C507C6, 0x07C707C8, 0x07C907CA, 0x07CB07CC, 0x07CD07CE, 0x07CF07D0, 0x07D107D2, 0x07D307D4, 0x07D507D6, 0x07D707D8, 0x07D907DA, 0x07DB07DC, 0x07DD07DE, 0x07DF07E0, 0x07E107E2, 0x07E307E4, 0x07E507E6, 0x07E707E8, 0x07E907EA, 0x07EB07EC, 0x07ED07EE, 0x07EF07F0, 0x07F107F2, 0x07F307F4, 0x07F507F6, 0x07F707F8, 0x07F907FA, 0x07FB07FC, 0x07FD07FE, 0x07FF0800, 0x08010802, 0x08030804, 0x08050806, 0x08070808, 0x0809080A, 0x080B080C, 0x080D080E, 0x080F0810, 0x08110812, 0x08130814, 0x08150816, 0x08170818, 0x0819081A, 0x081B081C, 0x081D081E, 0x081F0820, 0x08210822, 0x08230824, 0x08250826, 0x08270828, 0x0829082A, 0x082B082C, 0x082D082E, 0x082F0830, 0x08310832, 0x08330834, 0x08350836, 0x08370838, 0x0839083A, 0x083B083C, 0x083D083E, 0x083F0840, 0x08410842, 0x08430844, 0x08450846, 0x08470848, 0x0849084A, 0x084B084C, 0x084D084E, 0x084F0850, 0x08510852, 0x08530854, 0x08550856, 0x08570858, 0x0859085A, 0x085B085C, 0x085D085E, 0x085F0860, 0x08610862, 0x08630864, 0x08650866, 0x08670868, 0x0869086A, 0x086B086C, 0x086D086E, 0x086F0870, 0x08710872, 0x08730874, 0x08750876, 0x08770878, 0x0879087A, 0x087B087C, 0x087D087E, 0x087F0880, 0x08810882, 0x08830884, 0x08850886, 0x08870888, 0x0889088A, 0x088B088C, 0x088D088E, 0x088F0890, 0x08910892, 0x08930894, 0x08950896, 0x08970898, 0x0899089A, 0x089B089C, 0x089D089E, 0x089F08A0, 0x08A108A2, 0x08A308A4, 0x08A508A6, 0x08A708A8, 0x08A908AA, 0x08AB08AC, 0x08AD08AE, 0x08AF08B0, 0x08B108B2, 0x08B308B4, 0x08B508B6, 0x08B708B8, 0x08B908BA, 0x08BB08BC, 0x08BD08BE, 0x08BF08C0, 0x08C108C2, 0x08C308C4, 0x08C508C6, 0x08C708C8, 0x08C908CA, 0x08CB08CC, 0x08CD08CE, 0x08CF08D0, 0x08D108D2, 0x08D308D4, 0x08D508D6, 0x08D708D8, 0x08D908DA, 0x08DB08DC, 0x08DD08DE, 0x08DF08E0, 0x08E108E2, 0x08E308E4, 0x08E508E6, 0x08E708E8, 0x08E908EA, 0x08EB08EC, 0x08ED08EE, 0x08EF08F0, 0x08F108F2, 0x08F308F4, 0x08F508F6, 0x08F708F8, 0x08F908FA, 0x08FB08FC, 0x08FD08FE, 0x08FF0900, 0x09010902, 0x09030904, 0x09050906, 0x09070908, 0x0909090A, 0x090B090C, 0x090D090E, 0x090F0910, 0x09110912, 0x09130914, 0x09150916, 0x09170918, 0x0919091A, 0x091B091C, 0x091D091E, 0x091F0920, 0x09210922, 0x09230924, 0x09250926, 0x09270928, 0x0929092A, 0x092B092C, 0x092D092E, 0x092F0930, 0x09310932, 0x09330934, 0x09350936, 0x09370938, 0x0939093A, 0x093B093C, 0x093D093E, 0x093F0940, 0x09410942, 0x09430944, 0x09450946, 0x09470948, 0x0949094A, 0x094B094C, 0x094D094E, 0x094F0950, 0x09510952, 0x09530954, 0x09550956, 0x09570958, 0x0959095A, 0x095B095C, 0x095D095E, 0x095F0960, 0x09610962, 0x09630964, 0x09650966, 0x09670968, 0x0969096A, 0x096B096C, 0x096D096E, 0x096F0970, 0x09710972, 0x09730974, 0x09750976, 0x09770978, 0x0979097A, 0x097B097C, 0x097D097E, 0x097F0980, 0x09810982, 0x09830984, 0x09850986, 0x09870988, 0x0989098A, 0x098B098C, 0x098D098E, 0x098F0990, 0x09910992, 0x09930994, 0x09950996, 0x09970998, 0x0999099A, 0x099B099C, 0x099D099E, 0x099F09A0, 0x09A109A2, 0x09A309A4, 0x09A509A6, 0x09A709A8, 0x09A909AA, 0x09AB09AC, 0x09AD09AE, 0x09AF09B0, 0x09B109B2, 0x09B309B4, 0x09B509B6, 0x09B709B8, 0x09B909BA, 0x09BB09BC, 0x09BD09BE, 0x09BF09C0, 0x09C109C2, 0x09C309C4, 0x09C509C6, 0x09C709C8, 0x09C909CA, 0x09CB09CC, 0x09CD09CE, 0x09CF09D0, 0x09D109D2, 0x09D309D4, 0x09D509D6, 0x09D709D8, 0x09D909DA, 0x09DB09DC, 0x09DD09DE, 0x09DF09E0, 0x09E109E2, 0x09E309E4, 0x09E509E6, 0x09E709E8, 0x09E909EA, 0x09EB09EC, 0x09ED09EE, 0x09EF09F0, 0x09F109F2, 0x09F309F4, 0x09F509F6, 0x09F709F8, 0x09F909FA, 0x09FB09FC, 0x09FD09FE, 0x09FF0A00};
	u32 B[2560];
	matrix_SA_mult(S, A, B);
#endif

#if ENABLE_TEST_MATRIX_AS
//	u32 A2[1280] = {0x00010002, 0x00030004, 0x00050006, 0x00070008, 0x0009000A, 0x000B000C, 0x000D000E, 0x000F0010, 0x00110012, 0x00130014, 0x00150016, 0x00170018, 0x0019001A, 0x001B001C, 0x001D001E, 0x001F0020, 0x00210022, 0x00230024, 0x00250026, 0x00270028, 0x0029002A, 0x002B002C, 0x002D002E, 0x002F0030, 0x00310032, 0x00330034, 0x00350036, 0x00370038, 0x0039003A, 0x003B003C, 0x003D003E, 0x003F0040, 0x00410042, 0x00430044, 0x00450046, 0x00470048, 0x0049004A, 0x004B004C, 0x004D004E, 0x004F0050, 0x00510052, 0x00530054, 0x00550056, 0x00570058, 0x0059005A, 0x005B005C, 0x005D005E, 0x005F0060, 0x00610062, 0x00630064, 0x00650066, 0x00670068, 0x0069006A, 0x006B006C, 0x006D006E, 0x006F0070, 0x00710072, 0x00730074, 0x00750076, 0x00770078, 0x0079007A, 0x007B007C, 0x007D007E, 0x007F0080, 0x00810082, 0x00830084, 0x00850086, 0x00870088, 0x0089008A, 0x008B008C, 0x008D008E, 0x008F0090, 0x00910092, 0x00930094, 0x00950096, 0x00970098, 0x0099009A, 0x009B009C, 0x009D009E, 0x009F00A0, 0x00A100A2, 0x00A300A4, 0x00A500A6, 0x00A700A8, 0x00A900AA, 0x00AB00AC, 0x00AD00AE, 0x00AF00B0, 0x00B100B2, 0x00B300B4, 0x00B500B6, 0x00B700B8, 0x00B900BA, 0x00BB00BC, 0x00BD00BE, 0x00BF00C0, 0x00C100C2, 0x00C300C4, 0x00C500C6, 0x00C700C8, 0x00C900CA, 0x00CB00CC, 0x00CD00CE, 0x00CF00D0, 0x00D100D2, 0x00D300D4, 0x00D500D6, 0x00D700D8, 0x00D900DA, 0x00DB00DC, 0x00DD00DE, 0x00DF00E0, 0x00E100E2, 0x00E300E4, 0x00E500E6, 0x00E700E8, 0x00E900EA, 0x00EB00EC, 0x00ED00EE, 0x00EF00F0, 0x00F100F2, 0x00F300F4, 0x00F500F6, 0x00F700F8, 0x00F900FA, 0x00FB00FC, 0x00FD00FE, 0x00FF0100, 0x01010102, 0x01030104, 0x01050106, 0x01070108, 0x0109010A, 0x010B010C, 0x010D010E, 0x010F0110, 0x01110112, 0x01130114, 0x01150116, 0x01170118, 0x0119011A, 0x011B011C, 0x011D011E, 0x011F0120, 0x01210122, 0x01230124, 0x01250126, 0x01270128, 0x0129012A, 0x012B012C, 0x012D012E, 0x012F0130, 0x01310132, 0x01330134, 0x01350136, 0x01370138, 0x0139013A, 0x013B013C, 0x013D013E, 0x013F0140, 0x01410142, 0x01430144, 0x01450146, 0x01470148, 0x0149014A, 0x014B014C, 0x014D014E, 0x014F0150, 0x01510152, 0x01530154, 0x01550156, 0x01570158, 0x0159015A, 0x015B015C, 0x015D015E, 0x015F0160, 0x01610162, 0x01630164, 0x01650166, 0x01670168, 0x0169016A, 0x016B016C, 0x016D016E, 0x016F0170, 0x01710172, 0x01730174, 0x01750176, 0x01770178, 0x0179017A, 0x017B017C, 0x017D017E, 0x017F0180, 0x01810182, 0x01830184, 0x01850186, 0x01870188, 0x0189018A, 0x018B018C, 0x018D018E, 0x018F0190, 0x01910192, 0x01930194, 0x01950196, 0x01970198, 0x0199019A, 0x019B019C, 0x019D019E, 0x019F01A0, 0x01A101A2, 0x01A301A4, 0x01A501A6, 0x01A701A8, 0x01A901AA, 0x01AB01AC, 0x01AD01AE, 0x01AF01B0, 0x01B101B2, 0x01B301B4, 0x01B501B6, 0x01B701B8, 0x01B901BA, 0x01BB01BC, 0x01BD01BE, 0x01BF01C0, 0x01C101C2, 0x01C301C4, 0x01C501C6, 0x01C701C8, 0x01C901CA, 0x01CB01CC, 0x01CD01CE, 0x01CF01D0, 0x01D101D2, 0x01D301D4, 0x01D501D6, 0x01D701D8, 0x01D901DA, 0x01DB01DC, 0x01DD01DE, 0x01DF01E0, 0x01E101E2, 0x01E301E4, 0x01E501E6, 0x01E701E8, 0x01E901EA, 0x01EB01EC, 0x01ED01EE, 0x01EF01F0, 0x01F101F2, 0x01F301F4, 0x01F501F6, 0x01F701F8, 0x01F901FA, 0x01FB01FC, 0x01FD01FE, 0x01FF0200, 0x02010202, 0x02030204, 0x02050206, 0x02070208, 0x0209020A, 0x020B020C, 0x020D020E, 0x020F0210, 0x02110212, 0x02130214, 0x02150216, 0x02170218, 0x0219021A, 0x021B021C, 0x021D021E, 0x021F0220, 0x02210222, 0x02230224, 0x02250226, 0x02270228, 0x0229022A, 0x022B022C, 0x022D022E, 0x022F0230, 0x02310232, 0x02330234, 0x02350236, 0x02370238, 0x0239023A, 0x023B023C, 0x023D023E, 0x023F0240, 0x02410242, 0x02430244, 0x02450246, 0x02470248, 0x0249024A, 0x024B024C, 0x024D024E, 0x024F0250, 0x02510252, 0x02530254, 0x02550256, 0x02570258, 0x0259025A, 0x025B025C, 0x025D025E, 0x025F0260, 0x02610262, 0x02630264, 0x02650266, 0x02670268, 0x0269026A, 0x026B026C, 0x026D026E, 0x026F0270, 0x02710272, 0x02730274, 0x02750276, 0x02770278, 0x0279027A, 0x027B027C, 0x027D027E, 0x027F0280, 0x02810282, 0x02830284, 0x02850286, 0x02870288, 0x0289028A, 0x028B028C, 0x028D028E, 0x028F0290, 0x02910292, 0x02930294, 0x02950296, 0x02970298, 0x0299029A, 0x029B029C, 0x029D029E, 0x029F02A0, 0x02A102A2, 0x02A302A4, 0x02A502A6, 0x02A702A8, 0x02A902AA, 0x02AB02AC, 0x02AD02AE, 0x02AF02B0, 0x02B102B2, 0x02B302B4, 0x02B502B6, 0x02B702B8, 0x02B902BA, 0x02BB02BC, 0x02BD02BE, 0x02BF02C0, 0x02C102C2, 0x02C302C4, 0x02C502C6, 0x02C702C8, 0x02C902CA, 0x02CB02CC, 0x02CD02CE, 0x02CF02D0, 0x02D102D2, 0x02D302D4, 0x02D502D6, 0x02D702D8, 0x02D902DA, 0x02DB02DC, 0x02DD02DE, 0x02DF02E0, 0x02E102E2, 0x02E302E4, 0x02E502E6, 0x02E702E8, 0x02E902EA, 0x02EB02EC, 0x02ED02EE, 0x02EF02F0, 0x02F102F2, 0x02F302F4, 0x02F502F6, 0x02F702F8, 0x02F902FA, 0x02FB02FC, 0x02FD02FE, 0x02FF0300, 0x03010302, 0x03030304, 0x03050306, 0x03070308, 0x0309030A, 0x030B030C, 0x030D030E, 0x030F0310, 0x03110312, 0x03130314, 0x03150316, 0x03170318, 0x0319031A, 0x031B031C, 0x031D031E, 0x031F0320, 0x03210322, 0x03230324, 0x03250326, 0x03270328, 0x0329032A, 0x032B032C, 0x032D032E, 0x032F0330, 0x03310332, 0x03330334, 0x03350336, 0x03370338, 0x0339033A, 0x033B033C, 0x033D033E, 0x033F0340, 0x03410342, 0x03430344, 0x03450346, 0x03470348, 0x0349034A, 0x034B034C, 0x034D034E, 0x034F0350, 0x03510352, 0x03530354, 0x03550356, 0x03570358, 0x0359035A, 0x035B035C, 0x035D035E, 0x035F0360, 0x03610362, 0x03630364, 0x03650366, 0x03670368, 0x0369036A, 0x036B036C, 0x036D036E, 0x036F0370, 0x03710372, 0x03730374, 0x03750376, 0x03770378, 0x0379037A, 0x037B037C, 0x037D037E, 0x037F0380, 0x03810382, 0x03830384, 0x03850386, 0x03870388, 0x0389038A, 0x038B038C, 0x038D038E, 0x038F0390, 0x03910392, 0x03930394, 0x03950396, 0x03970398, 0x0399039A, 0x039B039C, 0x039D039E, 0x039F03A0, 0x03A103A2, 0x03A303A4, 0x03A503A6, 0x03A703A8, 0x03A903AA, 0x03AB03AC, 0x03AD03AE, 0x03AF03B0, 0x03B103B2, 0x03B303B4, 0x03B503B6, 0x03B703B8, 0x03B903BA, 0x03BB03BC, 0x03BD03BE, 0x03BF03C0, 0x03C103C2, 0x03C303C4, 0x03C503C6, 0x03C703C8, 0x03C903CA, 0x03CB03CC, 0x03CD03CE, 0x03CF03D0, 0x03D103D2, 0x03D303D4, 0x03D503D6, 0x03D703D8, 0x03D903DA, 0x03DB03DC, 0x03DD03DE, 0x03DF03E0, 0x03E103E2, 0x03E303E4, 0x03E503E6, 0x03E703E8, 0x03E903EA, 0x03EB03EC, 0x03ED03EE, 0x03EF03F0, 0x03F103F2, 0x03F303F4, 0x03F503F6, 0x03F703F8, 0x03F903FA, 0x03FB03FC, 0x03FD03FE, 0x03FF0400, 0x04010402, 0x04030404, 0x04050406, 0x04070408, 0x0409040A, 0x040B040C, 0x040D040E, 0x040F0410, 0x04110412, 0x04130414, 0x04150416, 0x04170418, 0x0419041A, 0x041B041C, 0x041D041E, 0x041F0420, 0x04210422, 0x04230424, 0x04250426, 0x04270428, 0x0429042A, 0x042B042C, 0x042D042E, 0x042F0430, 0x04310432, 0x04330434, 0x04350436, 0x04370438, 0x0439043A, 0x043B043C, 0x043D043E, 0x043F0440, 0x04410442, 0x04430444, 0x04450446, 0x04470448, 0x0449044A, 0x044B044C, 0x044D044E, 0x044F0450, 0x04510452, 0x04530454, 0x04550456, 0x04570458, 0x0459045A, 0x045B045C, 0x045D045E, 0x045F0460, 0x04610462, 0x04630464, 0x04650466, 0x04670468, 0x0469046A, 0x046B046C, 0x046D046E, 0x046F0470, 0x04710472, 0x04730474, 0x04750476, 0x04770478, 0x0479047A, 0x047B047C, 0x047D047E, 0x047F0480, 0x04810482, 0x04830484, 0x04850486, 0x04870488, 0x0489048A, 0x048B048C, 0x048D048E, 0x048F0490, 0x04910492, 0x04930494, 0x04950496, 0x04970498, 0x0499049A, 0x049B049C, 0x049D049E, 0x049F04A0, 0x04A104A2, 0x04A304A4, 0x04A504A6, 0x04A704A8, 0x04A904AA, 0x04AB04AC, 0x04AD04AE, 0x04AF04B0, 0x04B104B2, 0x04B304B4, 0x04B504B6, 0x04B704B8, 0x04B904BA, 0x04BB04BC, 0x04BD04BE, 0x04BF04C0, 0x04C104C2, 0x04C304C4, 0x04C504C6, 0x04C704C8, 0x04C904CA, 0x04CB04CC, 0x04CD04CE, 0x04CF04D0, 0x04D104D2, 0x04D304D4, 0x04D504D6, 0x04D704D8, 0x04D904DA, 0x04DB04DC, 0x04DD04DE, 0x04DF04E0, 0x04E104E2, 0x04E304E4, 0x04E504E6, 0x04E704E8, 0x04E904EA, 0x04EB04EC, 0x04ED04EE, 0x04EF04F0, 0x04F104F2, 0x04F304F4, 0x04F504F6, 0x04F704F8, 0x04F904FA, 0x04FB04FC, 0x04FD04FE, 0x04FF0500, 0x05010502, 0x05030504, 0x05050506, 0x05070508, 0x0509050A, 0x050B050C, 0x050D050E, 0x050F0510, 0x05110512, 0x05130514, 0x05150516, 0x05170518, 0x0519051A, 0x051B051C, 0x051D051E, 0x051F0520, 0x05210522, 0x05230524, 0x05250526, 0x05270528, 0x0529052A, 0x052B052C, 0x052D052E, 0x052F0530, 0x05310532, 0x05330534, 0x05350536, 0x05370538, 0x0539053A, 0x053B053C, 0x053D053E, 0x053F0540, 0x05410542, 0x05430544, 0x05450546, 0x05470548, 0x0549054A, 0x054B054C, 0x054D054E, 0x054F0550, 0x05510552, 0x05530554, 0x05550556, 0x05570558, 0x0559055A, 0x055B055C, 0x055D055E, 0x055F0560, 0x05610562, 0x05630564, 0x05650566, 0x05670568, 0x0569056A, 0x056B056C, 0x056D056E, 0x056F0570, 0x05710572, 0x05730574, 0x05750576, 0x05770578, 0x0579057A, 0x057B057C, 0x057D057E, 0x057F0580, 0x05810582, 0x05830584, 0x05850586, 0x05870588, 0x0589058A, 0x058B058C, 0x058D058E, 0x058F0590, 0x05910592, 0x05930594, 0x05950596, 0x05970598, 0x0599059A, 0x059B059C, 0x059D059E, 0x059F05A0, 0x05A105A2, 0x05A305A4, 0x05A505A6, 0x05A705A8, 0x05A905AA, 0x05AB05AC, 0x05AD05AE, 0x05AF05B0, 0x05B105B2, 0x05B305B4, 0x05B505B6, 0x05B705B8, 0x05B905BA, 0x05BB05BC, 0x05BD05BE, 0x05BF05C0, 0x05C105C2, 0x05C305C4, 0x05C505C6, 0x05C705C8, 0x05C905CA, 0x05CB05CC, 0x05CD05CE, 0x05CF05D0, 0x05D105D2, 0x05D305D4, 0x05D505D6, 0x05D705D8, 0x05D905DA, 0x05DB05DC, 0x05DD05DE, 0x05DF05E0, 0x05E105E2, 0x05E305E4, 0x05E505E6, 0x05E705E8, 0x05E905EA, 0x05EB05EC, 0x05ED05EE, 0x05EF05F0, 0x05F105F2, 0x05F305F4, 0x05F505F6, 0x05F705F8, 0x05F905FA, 0x05FB05FC, 0x05FD05FE, 0x05FF0600, 0x06010602, 0x06030604, 0x06050606, 0x06070608, 0x0609060A, 0x060B060C, 0x060D060E, 0x060F0610, 0x06110612, 0x06130614, 0x06150616, 0x06170618, 0x0619061A, 0x061B061C, 0x061D061E, 0x061F0620, 0x06210622, 0x06230624, 0x06250626, 0x06270628, 0x0629062A, 0x062B062C, 0x062D062E, 0x062F0630, 0x06310632, 0x06330634, 0x06350636, 0x06370638, 0x0639063A, 0x063B063C, 0x063D063E, 0x063F0640, 0x06410642, 0x06430644, 0x06450646, 0x06470648, 0x0649064A, 0x064B064C, 0x064D064E, 0x064F0650, 0x06510652, 0x06530654, 0x06550656, 0x06570658, 0x0659065A, 0x065B065C, 0x065D065E, 0x065F0660, 0x06610662, 0x06630664, 0x06650666, 0x06670668, 0x0669066A, 0x066B066C, 0x066D066E, 0x066F0670, 0x06710672, 0x06730674, 0x06750676, 0x06770678, 0x0679067A, 0x067B067C, 0x067D067E, 0x067F0680, 0x06810682, 0x06830684, 0x06850686, 0x06870688, 0x0689068A, 0x068B068C, 0x068D068E, 0x068F0690, 0x06910692, 0x06930694, 0x06950696, 0x06970698, 0x0699069A, 0x069B069C, 0x069D069E, 0x069F06A0, 0x06A106A2, 0x06A306A4, 0x06A506A6, 0x06A706A8, 0x06A906AA, 0x06AB06AC, 0x06AD06AE, 0x06AF06B0, 0x06B106B2, 0x06B306B4, 0x06B506B6, 0x06B706B8, 0x06B906BA, 0x06BB06BC, 0x06BD06BE, 0x06BF06C0, 0x06C106C2, 0x06C306C4, 0x06C506C6, 0x06C706C8, 0x06C906CA, 0x06CB06CC, 0x06CD06CE, 0x06CF06D0, 0x06D106D2, 0x06D306D4, 0x06D506D6, 0x06D706D8, 0x06D906DA, 0x06DB06DC, 0x06DD06DE, 0x06DF06E0, 0x06E106E2, 0x06E306E4, 0x06E506E6, 0x06E706E8, 0x06E906EA, 0x06EB06EC, 0x06ED06EE, 0x06EF06F0, 0x06F106F2, 0x06F306F4, 0x06F506F6, 0x06F706F8, 0x06F906FA, 0x06FB06FC, 0x06FD06FE, 0x06FF0700, 0x07010702, 0x07030704, 0x07050706, 0x07070708, 0x0709070A, 0x070B070C, 0x070D070E, 0x070F0710, 0x07110712, 0x07130714, 0x07150716, 0x07170718, 0x0719071A, 0x071B071C, 0x071D071E, 0x071F0720, 0x07210722, 0x07230724, 0x07250726, 0x07270728, 0x0729072A, 0x072B072C, 0x072D072E, 0x072F0730, 0x07310732, 0x07330734, 0x07350736, 0x07370738, 0x0739073A, 0x073B073C, 0x073D073E, 0x073F0740, 0x07410742, 0x07430744, 0x07450746, 0x07470748, 0x0749074A, 0x074B074C, 0x074D074E, 0x074F0750, 0x07510752, 0x07530754, 0x07550756, 0x07570758, 0x0759075A, 0x075B075C, 0x075D075E, 0x075F0760, 0x07610762, 0x07630764, 0x07650766, 0x07670768, 0x0769076A, 0x076B076C, 0x076D076E, 0x076F0770, 0x07710772, 0x07730774, 0x07750776, 0x07770778, 0x0779077A, 0x077B077C, 0x077D077E, 0x077F0780, 0x07810782, 0x07830784, 0x07850786, 0x07870788, 0x0789078A, 0x078B078C, 0x078D078E, 0x078F0790, 0x07910792, 0x07930794, 0x07950796, 0x07970798, 0x0799079A, 0x079B079C, 0x079D079E, 0x079F07A0, 0x07A107A2, 0x07A307A4, 0x07A507A6, 0x07A707A8, 0x07A907AA, 0x07AB07AC, 0x07AD07AE, 0x07AF07B0, 0x07B107B2, 0x07B307B4, 0x07B507B6, 0x07B707B8, 0x07B907BA, 0x07BB07BC, 0x07BD07BE, 0x07BF07C0, 0x07C107C2, 0x07C307C4, 0x07C507C6, 0x07C707C8, 0x07C907CA, 0x07CB07CC, 0x07CD07CE, 0x07CF07D0,
//					0x07D107D2, 0x07D307D4, 0x07D507D6, 0x07D707D8, 0x07D907DA, 0x07DB07DC, 0x07DD07DE, 0x07DF07E0, 0x07E107E2, 0x07E307E4, 0x07E507E6, 0x07E707E8, 0x07E907EA, 0x07EB07EC, 0x07ED07EE, 0x07EF07F0, 0x07F107F2, 0x07F307F4, 0x07F507F6, 0x07F707F8, 0x07F907FA, 0x07FB07FC, 0x07FD07FE, 0x07FF0800, 0x08010802, 0x08030804, 0x08050806, 0x08070808, 0x0809080A, 0x080B080C, 0x080D080E, 0x080F0810, 0x08110812, 0x08130814, 0x08150816, 0x08170818, 0x0819081A, 0x081B081C, 0x081D081E, 0x081F0820, 0x08210822, 0x08230824, 0x08250826, 0x08270828, 0x0829082A, 0x082B082C, 0x082D082E, 0x082F0830, 0x08310832, 0x08330834, 0x08350836, 0x08370838, 0x0839083A, 0x083B083C, 0x083D083E, 0x083F0840, 0x08410842, 0x08430844, 0x08450846, 0x08470848, 0x0849084A, 0x084B084C, 0x084D084E, 0x084F0850, 0x08510852, 0x08530854, 0x08550856, 0x08570858, 0x0859085A, 0x085B085C, 0x085D085E, 0x085F0860, 0x08610862, 0x08630864, 0x08650866, 0x08670868, 0x0869086A, 0x086B086C, 0x086D086E, 0x086F0870, 0x08710872, 0x08730874, 0x08750876, 0x08770878, 0x0879087A, 0x087B087C, 0x087D087E, 0x087F0880, 0x08810882, 0x08830884, 0x08850886, 0x08870888, 0x0889088A, 0x088B088C, 0x088D088E, 0x088F0890, 0x08910892, 0x08930894, 0x08950896, 0x08970898, 0x0899089A, 0x089B089C, 0x089D089E, 0x089F08A0, 0x08A108A2, 0x08A308A4, 0x08A508A6, 0x08A708A8, 0x08A908AA, 0x08AB08AC, 0x08AD08AE, 0x08AF08B0, 0x08B108B2, 0x08B308B4, 0x08B508B6, 0x08B708B8, 0x08B908BA, 0x08BB08BC, 0x08BD08BE, 0x08BF08C0, 0x08C108C2, 0x08C308C4, 0x08C508C6, 0x08C708C8, 0x08C908CA, 0x08CB08CC, 0x08CD08CE, 0x08CF08D0, 0x08D108D2, 0x08D308D4, 0x08D508D6, 0x08D708D8, 0x08D908DA, 0x08DB08DC, 0x08DD08DE, 0x08DF08E0, 0x08E108E2, 0x08E308E4, 0x08E508E6, 0x08E708E8, 0x08E908EA, 0x08EB08EC, 0x08ED08EE, 0x08EF08F0, 0x08F108F2, 0x08F308F4, 0x08F508F6, 0x08F708F8, 0x08F908FA, 0x08FB08FC, 0x08FD08FE, 0x08FF0900, 0x09010902, 0x09030904, 0x09050906, 0x09070908, 0x0909090A, 0x090B090C, 0x090D090E, 0x090F0910, 0x09110912, 0x09130914, 0x09150916, 0x09170918, 0x0919091A, 0x091B091C, 0x091D091E, 0x091F0920, 0x09210922, 0x09230924, 0x09250926, 0x09270928, 0x0929092A, 0x092B092C, 0x092D092E, 0x092F0930, 0x09310932, 0x09330934, 0x09350936, 0x09370938, 0x0939093A, 0x093B093C, 0x093D093E, 0x093F0940, 0x09410942, 0x09430944, 0x09450946, 0x09470948, 0x0949094A, 0x094B094C, 0x094D094E, 0x094F0950, 0x09510952, 0x09530954, 0x09550956, 0x09570958, 0x0959095A, 0x095B095C, 0x095D095E, 0x095F0960, 0x09610962, 0x09630964, 0x09650966, 0x09670968, 0x0969096A, 0x096B096C, 0x096D096E, 0x096F0970, 0x09710972, 0x09730974, 0x09750976, 0x09770978, 0x0979097A, 0x097B097C, 0x097D097E, 0x097F0980, 0x09810982, 0x09830984, 0x09850986, 0x09870988, 0x0989098A, 0x098B098C, 0x098D098E, 0x098F0990, 0x09910992, 0x09930994, 0x09950996, 0x09970998, 0x0999099A, 0x099B099C, 0x099D099E, 0x099F09A0, 0x09A109A2, 0x09A309A4, 0x09A509A6, 0x09A709A8, 0x09A909AA, 0x09AB09AC, 0x09AD09AE, 0x09AF09B0, 0x09B109B2, 0x09B309B4, 0x09B509B6, 0x09B709B8, 0x09B909BA, 0x09BB09BC, 0x09BD09BE, 0x09BF09C0, 0x09C109C2, 0x09C309C4, 0x09C509C6, 0x09C709C8, 0x09C909CA, 0x09CB09CC, 0x09CD09CE, 0x09CF09D0, 0x09D109D2, 0x09D309D4, 0x09D509D6, 0x09D709D8, 0x09D909DA, 0x09DB09DC, 0x09DD09DE, 0x09DF09E0, 0x09E109E2, 0x09E309E4, 0x09E509E6, 0x09E709E8, 0x09E909EA, 0x09EB09EC, 0x09ED09EE, 0x09EF09F0, 0x09F109F2, 0x09F309F4, 0x09F509F6, 0x09F709F8, 0x09F909FA, 0x09FB09FC, 0x09FD09FE, 0x09FF0A00};
//	u32 S2[2560] = {0x00010002, 0x00030004, 0x00050006, 0x00070008, 0x0009000A, 0x000B000C, 0x000D000E, 0x000F0010, 0x00110012, 0x00130014, 0x00150016, 0x00170018, 0x0019001A, 0x001B001C, 0x001D001E, 0x001F0020, 0x00210022, 0x00230024, 0x00250026, 0x00270028, 0x0029002A, 0x002B002C, 0x002D002E, 0x002F0030, 0x00310032, 0x00330034, 0x00350036, 0x00370038, 0x0039003A, 0x003B003C, 0x003D003E, 0x003F0040, 0x00410042, 0x00430044, 0x00450046, 0x00470048, 0x0049004A, 0x004B004C, 0x004D004E, 0x004F0050, 0x00510052, 0x00530054, 0x00550056, 0x00570058, 0x0059005A, 0x005B005C, 0x005D005E, 0x005F0060, 0x00610062, 0x00630064, 0x00650066, 0x00670068, 0x0069006A, 0x006B006C, 0x006D006E, 0x006F0070, 0x00710072, 0x00730074, 0x00750076, 0x00770078, 0x0079007A, 0x007B007C, 0x007D007E, 0x007F0080, 0x00810082, 0x00830084, 0x00850086, 0x00870088, 0x0089008A, 0x008B008C, 0x008D008E, 0x008F0090, 0x00910092, 0x00930094, 0x00950096, 0x00970098, 0x0099009A, 0x009B009C, 0x009D009E, 0x009F00A0, 0x00A100A2, 0x00A300A4, 0x00A500A6, 0x00A700A8, 0x00A900AA, 0x00AB00AC, 0x00AD00AE, 0x00AF00B0, 0x00B100B2, 0x00B300B4, 0x00B500B6, 0x00B700B8, 0x00B900BA, 0x00BB00BC, 0x00BD00BE, 0x00BF00C0, 0x00C100C2, 0x00C300C4, 0x00C500C6, 0x00C700C8, 0x00C900CA, 0x00CB00CC, 0x00CD00CE, 0x00CF00D0, 0x00D100D2, 0x00D300D4, 0x00D500D6, 0x00D700D8, 0x00D900DA, 0x00DB00DC, 0x00DD00DE, 0x00DF00E0, 0x00E100E2, 0x00E300E4, 0x00E500E6, 0x00E700E8, 0x00E900EA, 0x00EB00EC, 0x00ED00EE, 0x00EF00F0, 0x00F100F2, 0x00F300F4, 0x00F500F6, 0x00F700F8, 0x00F900FA, 0x00FB00FC, 0x00FD00FE, 0x00FF0100, 0x01010102, 0x01030104, 0x01050106, 0x01070108, 0x0109010A, 0x010B010C, 0x010D010E, 0x010F0110, 0x01110112, 0x01130114, 0x01150116, 0x01170118, 0x0119011A, 0x011B011C, 0x011D011E, 0x011F0120, 0x01210122, 0x01230124, 0x01250126, 0x01270128, 0x0129012A, 0x012B012C, 0x012D012E, 0x012F0130, 0x01310132, 0x01330134, 0x01350136, 0x01370138, 0x0139013A, 0x013B013C, 0x013D013E, 0x013F0140, 0x01410142, 0x01430144, 0x01450146, 0x01470148, 0x0149014A, 0x014B014C, 0x014D014E, 0x014F0150, 0x01510152, 0x01530154, 0x01550156, 0x01570158, 0x0159015A, 0x015B015C, 0x015D015E, 0x015F0160, 0x01610162, 0x01630164, 0x01650166, 0x01670168, 0x0169016A, 0x016B016C, 0x016D016E, 0x016F0170, 0x01710172, 0x01730174, 0x01750176, 0x01770178, 0x0179017A, 0x017B017C, 0x017D017E, 0x017F0180, 0x01810182, 0x01830184, 0x01850186, 0x01870188, 0x0189018A, 0x018B018C, 0x018D018E, 0x018F0190, 0x01910192, 0x01930194, 0x01950196, 0x01970198, 0x0199019A, 0x019B019C, 0x019D019E, 0x019F01A0, 0x01A101A2, 0x01A301A4, 0x01A501A6, 0x01A701A8, 0x01A901AA, 0x01AB01AC, 0x01AD01AE, 0x01AF01B0, 0x01B101B2, 0x01B301B4, 0x01B501B6, 0x01B701B8, 0x01B901BA, 0x01BB01BC, 0x01BD01BE, 0x01BF01C0, 0x01C101C2, 0x01C301C4, 0x01C501C6, 0x01C701C8, 0x01C901CA, 0x01CB01CC, 0x01CD01CE, 0x01CF01D0, 0x01D101D2, 0x01D301D4, 0x01D501D6, 0x01D701D8, 0x01D901DA, 0x01DB01DC, 0x01DD01DE, 0x01DF01E0, 0x01E101E2, 0x01E301E4, 0x01E501E6, 0x01E701E8, 0x01E901EA, 0x01EB01EC, 0x01ED01EE, 0x01EF01F0, 0x01F101F2, 0x01F301F4, 0x01F501F6, 0x01F701F8, 0x01F901FA, 0x01FB01FC, 0x01FD01FE, 0x01FF0200, 0x02010202, 0x02030204, 0x02050206, 0x02070208, 0x0209020A, 0x020B020C, 0x020D020E, 0x020F0210, 0x02110212, 0x02130214, 0x02150216, 0x02170218, 0x0219021A, 0x021B021C, 0x021D021E, 0x021F0220, 0x02210222, 0x02230224, 0x02250226, 0x02270228, 0x0229022A, 0x022B022C, 0x022D022E, 0x022F0230, 0x02310232, 0x02330234, 0x02350236, 0x02370238, 0x0239023A, 0x023B023C, 0x023D023E, 0x023F0240, 0x02410242, 0x02430244, 0x02450246, 0x02470248, 0x0249024A, 0x024B024C, 0x024D024E, 0x024F0250, 0x02510252, 0x02530254, 0x02550256, 0x02570258, 0x0259025A, 0x025B025C, 0x025D025E, 0x025F0260, 0x02610262, 0x02630264, 0x02650266, 0x02670268, 0x0269026A, 0x026B026C, 0x026D026E, 0x026F0270, 0x02710272, 0x02730274, 0x02750276, 0x02770278, 0x0279027A, 0x027B027C, 0x027D027E, 0x027F0280, 0x02810282, 0x02830284, 0x02850286, 0x02870288, 0x0289028A, 0x028B028C, 0x028D028E, 0x028F0290, 0x02910292, 0x02930294, 0x02950296, 0x02970298, 0x0299029A, 0x029B029C, 0x029D029E, 0x029F02A0, 0x02A102A2, 0x02A302A4, 0x02A502A6, 0x02A702A8, 0x02A902AA, 0x02AB02AC, 0x02AD02AE, 0x02AF02B0, 0x02B102B2, 0x02B302B4, 0x02B502B6, 0x02B702B8, 0x02B902BA, 0x02BB02BC, 0x02BD02BE, 0x02BF02C0, 0x02C102C2, 0x02C302C4, 0x02C502C6, 0x02C702C8, 0x02C902CA, 0x02CB02CC, 0x02CD02CE, 0x02CF02D0, 0x02D102D2, 0x02D302D4, 0x02D502D6, 0x02D702D8, 0x02D902DA, 0x02DB02DC, 0x02DD02DE, 0x02DF02E0, 0x02E102E2, 0x02E302E4, 0x02E502E6, 0x02E702E8, 0x02E902EA, 0x02EB02EC, 0x02ED02EE, 0x02EF02F0, 0x02F102F2, 0x02F302F4, 0x02F502F6, 0x02F702F8, 0x02F902FA, 0x02FB02FC, 0x02FD02FE, 0x02FF0300, 0x03010302, 0x03030304, 0x03050306, 0x03070308, 0x0309030A, 0x030B030C, 0x030D030E, 0x030F0310, 0x03110312, 0x03130314, 0x03150316, 0x03170318, 0x0319031A, 0x031B031C, 0x031D031E, 0x031F0320, 0x03210322, 0x03230324, 0x03250326, 0x03270328, 0x0329032A, 0x032B032C, 0x032D032E, 0x032F0330, 0x03310332, 0x03330334, 0x03350336, 0x03370338, 0x0339033A, 0x033B033C, 0x033D033E, 0x033F0340, 0x03410342, 0x03430344, 0x03450346, 0x03470348, 0x0349034A, 0x034B034C, 0x034D034E, 0x034F0350, 0x03510352, 0x03530354, 0x03550356, 0x03570358, 0x0359035A, 0x035B035C, 0x035D035E, 0x035F0360, 0x03610362, 0x03630364, 0x03650366, 0x03670368, 0x0369036A, 0x036B036C, 0x036D036E, 0x036F0370, 0x03710372, 0x03730374, 0x03750376, 0x03770378, 0x0379037A, 0x037B037C, 0x037D037E, 0x037F0380, 0x03810382, 0x03830384, 0x03850386, 0x03870388, 0x0389038A, 0x038B038C, 0x038D038E, 0x038F0390, 0x03910392, 0x03930394, 0x03950396, 0x03970398, 0x0399039A, 0x039B039C, 0x039D039E, 0x039F03A0, 0x03A103A2, 0x03A303A4, 0x03A503A6, 0x03A703A8, 0x03A903AA, 0x03AB03AC, 0x03AD03AE, 0x03AF03B0, 0x03B103B2, 0x03B303B4, 0x03B503B6, 0x03B703B8, 0x03B903BA, 0x03BB03BC, 0x03BD03BE, 0x03BF03C0, 0x03C103C2, 0x03C303C4, 0x03C503C6, 0x03C703C8, 0x03C903CA, 0x03CB03CC, 0x03CD03CE, 0x03CF03D0, 0x03D103D2, 0x03D303D4, 0x03D503D6, 0x03D703D8, 0x03D903DA, 0x03DB03DC, 0x03DD03DE, 0x03DF03E0, 0x03E103E2, 0x03E303E4, 0x03E503E6, 0x03E703E8, 0x03E903EA, 0x03EB03EC, 0x03ED03EE, 0x03EF03F0, 0x03F103F2, 0x03F303F4, 0x03F503F6, 0x03F703F8, 0x03F903FA, 0x03FB03FC, 0x03FD03FE, 0x03FF0400, 0x04010402, 0x04030404, 0x04050406, 0x04070408, 0x0409040A, 0x040B040C, 0x040D040E, 0x040F0410, 0x04110412, 0x04130414, 0x04150416, 0x04170418, 0x0419041A, 0x041B041C, 0x041D041E, 0x041F0420, 0x04210422, 0x04230424, 0x04250426, 0x04270428, 0x0429042A, 0x042B042C, 0x042D042E, 0x042F0430, 0x04310432, 0x04330434, 0x04350436, 0x04370438, 0x0439043A, 0x043B043C, 0x043D043E, 0x043F0440, 0x04410442, 0x04430444, 0x04450446, 0x04470448, 0x0449044A, 0x044B044C, 0x044D044E, 0x044F0450, 0x04510452, 0x04530454, 0x04550456, 0x04570458, 0x0459045A, 0x045B045C, 0x045D045E, 0x045F0460, 0x04610462, 0x04630464, 0x04650466, 0x04670468, 0x0469046A, 0x046B046C, 0x046D046E, 0x046F0470, 0x04710472, 0x04730474, 0x04750476, 0x04770478, 0x0479047A, 0x047B047C, 0x047D047E, 0x047F0480, 0x04810482, 0x04830484, 0x04850486, 0x04870488, 0x0489048A, 0x048B048C, 0x048D048E, 0x048F0490, 0x04910492, 0x04930494, 0x04950496, 0x04970498, 0x0499049A, 0x049B049C, 0x049D049E, 0x049F04A0, 0x04A104A2, 0x04A304A4, 0x04A504A6, 0x04A704A8, 0x04A904AA, 0x04AB04AC, 0x04AD04AE, 0x04AF04B0, 0x04B104B2, 0x04B304B4, 0x04B504B6, 0x04B704B8, 0x04B904BA, 0x04BB04BC, 0x04BD04BE, 0x04BF04C0, 0x04C104C2, 0x04C304C4, 0x04C504C6, 0x04C704C8, 0x04C904CA, 0x04CB04CC, 0x04CD04CE, 0x04CF04D0, 0x04D104D2, 0x04D304D4, 0x04D504D6, 0x04D704D8, 0x04D904DA, 0x04DB04DC, 0x04DD04DE, 0x04DF04E0, 0x04E104E2, 0x04E304E4, 0x04E504E6, 0x04E704E8, 0x04E904EA, 0x04EB04EC, 0x04ED04EE, 0x04EF04F0, 0x04F104F2, 0x04F304F4, 0x04F504F6, 0x04F704F8, 0x04F904FA, 0x04FB04FC, 0x04FD04FE, 0x04FF0500, 0x05010502, 0x05030504, 0x05050506, 0x05070508, 0x0509050A, 0x050B050C, 0x050D050E, 0x050F0510, 0x05110512, 0x05130514, 0x05150516, 0x05170518, 0x0519051A, 0x051B051C, 0x051D051E, 0x051F0520, 0x05210522, 0x05230524, 0x05250526, 0x05270528, 0x0529052A, 0x052B052C, 0x052D052E, 0x052F0530, 0x05310532, 0x05330534, 0x05350536, 0x05370538, 0x0539053A, 0x053B053C, 0x053D053E, 0x053F0540, 0x05410542, 0x05430544, 0x05450546, 0x05470548, 0x0549054A, 0x054B054C, 0x054D054E, 0x054F0550, 0x05510552, 0x05530554, 0x05550556, 0x05570558, 0x0559055A, 0x055B055C, 0x055D055E, 0x055F0560, 0x05610562, 0x05630564, 0x05650566, 0x05670568, 0x0569056A, 0x056B056C, 0x056D056E, 0x056F0570, 0x05710572, 0x05730574, 0x05750576, 0x05770578, 0x0579057A, 0x057B057C, 0x057D057E, 0x057F0580, 0x05810582, 0x05830584, 0x05850586, 0x05870588, 0x0589058A, 0x058B058C, 0x058D058E, 0x058F0590, 0x05910592, 0x05930594, 0x05950596, 0x05970598, 0x0599059A, 0x059B059C, 0x059D059E, 0x059F05A0, 0x05A105A2, 0x05A305A4, 0x05A505A6, 0x05A705A8, 0x05A905AA, 0x05AB05AC, 0x05AD05AE, 0x05AF05B0, 0x05B105B2, 0x05B305B4, 0x05B505B6, 0x05B705B8, 0x05B905BA, 0x05BB05BC, 0x05BD05BE, 0x05BF05C0, 0x05C105C2, 0x05C305C4, 0x05C505C6, 0x05C705C8, 0x05C905CA, 0x05CB05CC, 0x05CD05CE, 0x05CF05D0, 0x05D105D2, 0x05D305D4, 0x05D505D6, 0x05D705D8, 0x05D905DA, 0x05DB05DC, 0x05DD05DE, 0x05DF05E0, 0x05E105E2, 0x05E305E4, 0x05E505E6, 0x05E705E8, 0x05E905EA, 0x05EB05EC, 0x05ED05EE, 0x05EF05F0, 0x05F105F2, 0x05F305F4, 0x05F505F6, 0x05F705F8, 0x05F905FA, 0x05FB05FC, 0x05FD05FE, 0x05FF0600, 0x06010602, 0x06030604, 0x06050606, 0x06070608, 0x0609060A, 0x060B060C, 0x060D060E, 0x060F0610, 0x06110612, 0x06130614, 0x06150616, 0x06170618, 0x0619061A, 0x061B061C, 0x061D061E, 0x061F0620, 0x06210622, 0x06230624, 0x06250626, 0x06270628, 0x0629062A, 0x062B062C, 0x062D062E, 0x062F0630, 0x06310632, 0x06330634, 0x06350636, 0x06370638, 0x0639063A, 0x063B063C, 0x063D063E, 0x063F0640, 0x06410642, 0x06430644, 0x06450646, 0x06470648, 0x0649064A, 0x064B064C, 0x064D064E, 0x064F0650, 0x06510652, 0x06530654, 0x06550656, 0x06570658, 0x0659065A, 0x065B065C, 0x065D065E, 0x065F0660, 0x06610662, 0x06630664, 0x06650666, 0x06670668, 0x0669066A, 0x066B066C, 0x066D066E, 0x066F0670, 0x06710672, 0x06730674, 0x06750676, 0x06770678, 0x0679067A, 0x067B067C, 0x067D067E, 0x067F0680, 0x06810682, 0x06830684, 0x06850686, 0x06870688, 0x0689068A, 0x068B068C, 0x068D068E, 0x068F0690, 0x06910692, 0x06930694, 0x06950696, 0x06970698, 0x0699069A, 0x069B069C, 0x069D069E, 0x069F06A0, 0x06A106A2, 0x06A306A4, 0x06A506A6, 0x06A706A8, 0x06A906AA, 0x06AB06AC, 0x06AD06AE, 0x06AF06B0, 0x06B106B2, 0x06B306B4, 0x06B506B6, 0x06B706B8, 0x06B906BA, 0x06BB06BC, 0x06BD06BE, 0x06BF06C0, 0x06C106C2, 0x06C306C4, 0x06C506C6, 0x06C706C8, 0x06C906CA, 0x06CB06CC, 0x06CD06CE, 0x06CF06D0, 0x06D106D2, 0x06D306D4, 0x06D506D6, 0x06D706D8, 0x06D906DA, 0x06DB06DC, 0x06DD06DE, 0x06DF06E0, 0x06E106E2, 0x06E306E4, 0x06E506E6, 0x06E706E8, 0x06E906EA, 0x06EB06EC, 0x06ED06EE, 0x06EF06F0, 0x06F106F2, 0x06F306F4, 0x06F506F6, 0x06F706F8, 0x06F906FA, 0x06FB06FC, 0x06FD06FE, 0x06FF0700, 0x07010702, 0x07030704, 0x07050706, 0x07070708, 0x0709070A, 0x070B070C, 0x070D070E, 0x070F0710, 0x07110712, 0x07130714, 0x07150716, 0x07170718, 0x0719071A, 0x071B071C, 0x071D071E, 0x071F0720, 0x07210722, 0x07230724, 0x07250726, 0x07270728, 0x0729072A, 0x072B072C, 0x072D072E, 0x072F0730, 0x07310732, 0x07330734, 0x07350736, 0x07370738, 0x0739073A, 0x073B073C, 0x073D073E, 0x073F0740, 0x07410742, 0x07430744, 0x07450746, 0x07470748, 0x0749074A, 0x074B074C, 0x074D074E, 0x074F0750, 0x07510752, 0x07530754, 0x07550756, 0x07570758, 0x0759075A, 0x075B075C, 0x075D075E, 0x075F0760, 0x07610762, 0x07630764, 0x07650766, 0x07670768, 0x0769076A, 0x076B076C, 0x076D076E, 0x076F0770, 0x07710772, 0x07730774, 0x07750776, 0x07770778, 0x0779077A, 0x077B077C, 0x077D077E, 0x077F0780, 0x07810782, 0x07830784, 0x07850786, 0x07870788, 0x0789078A, 0x078B078C, 0x078D078E, 0x078F0790, 0x07910792, 0x07930794, 0x07950796, 0x07970798, 0x0799079A, 0x079B079C, 0x079D079E, 0x079F07A0, 0x07A107A2, 0x07A307A4, 0x07A507A6, 0x07A707A8, 0x07A907AA, 0x07AB07AC, 0x07AD07AE, 0x07AF07B0, 0x07B107B2, 0x07B307B4, 0x07B507B6, 0x07B707B8, 0x07B907BA, 0x07BB07BC, 0x07BD07BE, 0x07BF07C0, 0x07C107C2, 0x07C307C4, 0x07C507C6, 0x07C707C8, 0x07C907CA, 0x07CB07CC, 0x07CD07CE, 0x07CF07D0,
//					0x07D107D2, 0x07D307D4, 0x07D507D6, 0x07D707D8, 0x07D907DA, 0x07DB07DC, 0x07DD07DE, 0x07DF07E0, 0x07E107E2, 0x07E307E4, 0x07E507E6, 0x07E707E8, 0x07E907EA, 0x07EB07EC, 0x07ED07EE, 0x07EF07F0, 0x07F107F2, 0x07F307F4, 0x07F507F6, 0x07F707F8, 0x07F907FA, 0x07FB07FC, 0x07FD07FE, 0x07FF0800, 0x08010802, 0x08030804, 0x08050806, 0x08070808, 0x0809080A, 0x080B080C, 0x080D080E, 0x080F0810, 0x08110812, 0x08130814, 0x08150816, 0x08170818, 0x0819081A, 0x081B081C, 0x081D081E, 0x081F0820, 0x08210822, 0x08230824, 0x08250826, 0x08270828, 0x0829082A, 0x082B082C, 0x082D082E, 0x082F0830, 0x08310832, 0x08330834, 0x08350836, 0x08370838, 0x0839083A, 0x083B083C, 0x083D083E, 0x083F0840, 0x08410842, 0x08430844, 0x08450846, 0x08470848, 0x0849084A, 0x084B084C, 0x084D084E, 0x084F0850, 0x08510852, 0x08530854, 0x08550856, 0x08570858, 0x0859085A, 0x085B085C, 0x085D085E, 0x085F0860, 0x08610862, 0x08630864, 0x08650866, 0x08670868, 0x0869086A, 0x086B086C, 0x086D086E, 0x086F0870, 0x08710872, 0x08730874, 0x08750876, 0x08770878, 0x0879087A, 0x087B087C, 0x087D087E, 0x087F0880, 0x08810882, 0x08830884, 0x08850886, 0x08870888, 0x0889088A, 0x088B088C, 0x088D088E, 0x088F0890, 0x08910892, 0x08930894, 0x08950896, 0x08970898, 0x0899089A, 0x089B089C, 0x089D089E, 0x089F08A0, 0x08A108A2, 0x08A308A4, 0x08A508A6, 0x08A708A8, 0x08A908AA, 0x08AB08AC, 0x08AD08AE, 0x08AF08B0, 0x08B108B2, 0x08B308B4, 0x08B508B6, 0x08B708B8, 0x08B908BA, 0x08BB08BC, 0x08BD08BE, 0x08BF08C0, 0x08C108C2, 0x08C308C4, 0x08C508C6, 0x08C708C8, 0x08C908CA, 0x08CB08CC, 0x08CD08CE, 0x08CF08D0, 0x08D108D2, 0x08D308D4, 0x08D508D6, 0x08D708D8, 0x08D908DA, 0x08DB08DC, 0x08DD08DE, 0x08DF08E0, 0x08E108E2, 0x08E308E4, 0x08E508E6, 0x08E708E8, 0x08E908EA, 0x08EB08EC, 0x08ED08EE, 0x08EF08F0, 0x08F108F2, 0x08F308F4, 0x08F508F6, 0x08F708F8, 0x08F908FA, 0x08FB08FC, 0x08FD08FE, 0x08FF0900, 0x09010902, 0x09030904, 0x09050906, 0x09070908, 0x0909090A, 0x090B090C, 0x090D090E, 0x090F0910, 0x09110912, 0x09130914, 0x09150916, 0x09170918, 0x0919091A, 0x091B091C, 0x091D091E, 0x091F0920, 0x09210922, 0x09230924, 0x09250926, 0x09270928, 0x0929092A, 0x092B092C, 0x092D092E, 0x092F0930, 0x09310932, 0x09330934, 0x09350936, 0x09370938, 0x0939093A, 0x093B093C, 0x093D093E, 0x093F0940, 0x09410942, 0x09430944, 0x09450946, 0x09470948, 0x0949094A, 0x094B094C, 0x094D094E, 0x094F0950, 0x09510952, 0x09530954, 0x09550956, 0x09570958, 0x0959095A, 0x095B095C, 0x095D095E, 0x095F0960, 0x09610962, 0x09630964, 0x09650966, 0x09670968, 0x0969096A, 0x096B096C, 0x096D096E, 0x096F0970, 0x09710972, 0x09730974, 0x09750976, 0x09770978, 0x0979097A, 0x097B097C, 0x097D097E, 0x097F0980, 0x09810982, 0x09830984, 0x09850986, 0x09870988, 0x0989098A, 0x098B098C, 0x098D098E, 0x098F0990, 0x09910992, 0x09930994, 0x09950996, 0x09970998, 0x0999099A, 0x099B099C, 0x099D099E, 0x099F09A0, 0x09A109A2, 0x09A309A4, 0x09A509A6, 0x09A709A8, 0x09A909AA, 0x09AB09AC, 0x09AD09AE, 0x09AF09B0, 0x09B109B2, 0x09B309B4, 0x09B509B6, 0x09B709B8, 0x09B909BA, 0x09BB09BC, 0x09BD09BE, 0x09BF09C0, 0x09C109C2, 0x09C309C4, 0x09C509C6, 0x09C709C8, 0x09C909CA, 0x09CB09CC, 0x09CD09CE, 0x09CF09D0, 0x09D109D2, 0x09D309D4, 0x09D509D6, 0x09D709D8, 0x09D909DA, 0x09DB09DC, 0x09DD09DE, 0x09DF09E0, 0x09E109E2, 0x09E309E4, 0x09E509E6, 0x09E709E8, 0x09E909EA, 0x09EB09EC, 0x09ED09EE, 0x09EF09F0, 0x09F109F2, 0x09F309F4, 0x09F509F6, 0x09F709F8, 0x09F909FA, 0x09FB09FC, 0x09FD09FE, 0x09FF0A00, 0x0A010A02, 0x0A030A04, 0x0A050A06, 0x0A070A08, 0x0A090A0A, 0x0A0B0A0C, 0x0A0D0A0E, 0x0A0F0A10, 0x0A110A12, 0x0A130A14, 0x0A150A16, 0x0A170A18, 0x0A190A1A, 0x0A1B0A1C, 0x0A1D0A1E, 0x0A1F0A20, 0x0A210A22, 0x0A230A24, 0x0A250A26, 0x0A270A28, 0x0A290A2A, 0x0A2B0A2C, 0x0A2D0A2E, 0x0A2F0A30, 0x0A310A32, 0x0A330A34, 0x0A350A36, 0x0A370A38, 0x0A390A3A, 0x0A3B0A3C, 0x0A3D0A3E, 0x0A3F0A40, 0x0A410A42, 0x0A430A44, 0x0A450A46, 0x0A470A48, 0x0A490A4A, 0x0A4B0A4C, 0x0A4D0A4E, 0x0A4F0A50, 0x0A510A52, 0x0A530A54, 0x0A550A56, 0x0A570A58, 0x0A590A5A, 0x0A5B0A5C, 0x0A5D0A5E, 0x0A5F0A60, 0x0A610A62, 0x0A630A64, 0x0A650A66, 0x0A670A68, 0x0A690A6A, 0x0A6B0A6C, 0x0A6D0A6E, 0x0A6F0A70, 0x0A710A72, 0x0A730A74, 0x0A750A76, 0x0A770A78, 0x0A790A7A, 0x0A7B0A7C, 0x0A7D0A7E, 0x0A7F0A80, 0x0A810A82, 0x0A830A84, 0x0A850A86, 0x0A870A88, 0x0A890A8A, 0x0A8B0A8C, 0x0A8D0A8E, 0x0A8F0A90, 0x0A910A92, 0x0A930A94, 0x0A950A96, 0x0A970A98, 0x0A990A9A, 0x0A9B0A9C, 0x0A9D0A9E, 0x0A9F0AA0, 0x0AA10AA2, 0x0AA30AA4, 0x0AA50AA6, 0x0AA70AA8, 0x0AA90AAA, 0x0AAB0AAC, 0x0AAD0AAE, 0x0AAF0AB0, 0x0AB10AB2, 0x0AB30AB4, 0x0AB50AB6, 0x0AB70AB8, 0x0AB90ABA, 0x0ABB0ABC, 0x0ABD0ABE, 0x0ABF0AC0, 0x0AC10AC2, 0x0AC30AC4, 0x0AC50AC6, 0x0AC70AC8, 0x0AC90ACA, 0x0ACB0ACC, 0x0ACD0ACE, 0x0ACF0AD0, 0x0AD10AD2, 0x0AD30AD4, 0x0AD50AD6, 0x0AD70AD8, 0x0AD90ADA, 0x0ADB0ADC, 0x0ADD0ADE, 0x0ADF0AE0, 0x0AE10AE2, 0x0AE30AE4, 0x0AE50AE6, 0x0AE70AE8, 0x0AE90AEA, 0x0AEB0AEC, 0x0AED0AEE, 0x0AEF0AF0, 0x0AF10AF2, 0x0AF30AF4, 0x0AF50AF6, 0x0AF70AF8, 0x0AF90AFA, 0x0AFB0AFC, 0x0AFD0AFE, 0x0AFF0B00, 0x0B010B02, 0x0B030B04, 0x0B050B06, 0x0B070B08, 0x0B090B0A, 0x0B0B0B0C, 0x0B0D0B0E, 0x0B0F0B10, 0x0B110B12, 0x0B130B14, 0x0B150B16, 0x0B170B18, 0x0B190B1A, 0x0B1B0B1C, 0x0B1D0B1E, 0x0B1F0B20, 0x0B210B22, 0x0B230B24, 0x0B250B26, 0x0B270B28, 0x0B290B2A, 0x0B2B0B2C, 0x0B2D0B2E, 0x0B2F0B30, 0x0B310B32, 0x0B330B34, 0x0B350B36, 0x0B370B38, 0x0B390B3A, 0x0B3B0B3C, 0x0B3D0B3E, 0x0B3F0B40, 0x0B410B42, 0x0B430B44, 0x0B450B46, 0x0B470B48, 0x0B490B4A, 0x0B4B0B4C, 0x0B4D0B4E, 0x0B4F0B50, 0x0B510B52, 0x0B530B54, 0x0B550B56, 0x0B570B58, 0x0B590B5A, 0x0B5B0B5C, 0x0B5D0B5E, 0x0B5F0B60, 0x0B610B62, 0x0B630B64, 0x0B650B66, 0x0B670B68, 0x0B690B6A, 0x0B6B0B6C, 0x0B6D0B6E, 0x0B6F0B70, 0x0B710B72, 0x0B730B74, 0x0B750B76, 0x0B770B78, 0x0B790B7A, 0x0B7B0B7C, 0x0B7D0B7E, 0x0B7F0B80, 0x0B810B82, 0x0B830B84, 0x0B850B86, 0x0B870B88, 0x0B890B8A, 0x0B8B0B8C, 0x0B8D0B8E, 0x0B8F0B90, 0x0B910B92, 0x0B930B94, 0x0B950B96, 0x0B970B98, 0x0B990B9A, 0x0B9B0B9C, 0x0B9D0B9E, 0x0B9F0BA0, 0x0BA10BA2, 0x0BA30BA4, 0x0BA50BA6, 0x0BA70BA8, 0x0BA90BAA, 0x0BAB0BAC, 0x0BAD0BAE, 0x0BAF0BB0, 0x0BB10BB2, 0x0BB30BB4, 0x0BB50BB6, 0x0BB70BB8, 0x0BB90BBA, 0x0BBB0BBC, 0x0BBD0BBE, 0x0BBF0BC0, 0x0BC10BC2, 0x0BC30BC4, 0x0BC50BC6, 0x0BC70BC8, 0x0BC90BCA, 0x0BCB0BCC, 0x0BCD0BCE, 0x0BCF0BD0, 0x0BD10BD2, 0x0BD30BD4, 0x0BD50BD6, 0x0BD70BD8, 0x0BD90BDA, 0x0BDB0BDC, 0x0BDD0BDE, 0x0BDF0BE0, 0x0BE10BE2, 0x0BE30BE4, 0x0BE50BE6, 0x0BE70BE8, 0x0BE90BEA, 0x0BEB0BEC, 0x0BED0BEE, 0x0BEF0BF0, 0x0BF10BF2, 0x0BF30BF4, 0x0BF50BF6, 0x0BF70BF8, 0x0BF90BFA, 0x0BFB0BFC, 0x0BFD0BFE, 0x0BFF0C00, 0x0C010C02, 0x0C030C04, 0x0C050C06, 0x0C070C08, 0x0C090C0A, 0x0C0B0C0C, 0x0C0D0C0E, 0x0C0F0C10, 0x0C110C12, 0x0C130C14, 0x0C150C16, 0x0C170C18, 0x0C190C1A, 0x0C1B0C1C, 0x0C1D0C1E, 0x0C1F0C20, 0x0C210C22, 0x0C230C24, 0x0C250C26, 0x0C270C28, 0x0C290C2A, 0x0C2B0C2C, 0x0C2D0C2E, 0x0C2F0C30, 0x0C310C32, 0x0C330C34, 0x0C350C36, 0x0C370C38, 0x0C390C3A, 0x0C3B0C3C, 0x0C3D0C3E, 0x0C3F0C40, 0x0C410C42, 0x0C430C44, 0x0C450C46, 0x0C470C48, 0x0C490C4A, 0x0C4B0C4C, 0x0C4D0C4E, 0x0C4F0C50, 0x0C510C52, 0x0C530C54, 0x0C550C56, 0x0C570C58, 0x0C590C5A, 0x0C5B0C5C, 0x0C5D0C5E, 0x0C5F0C60, 0x0C610C62, 0x0C630C64, 0x0C650C66, 0x0C670C68, 0x0C690C6A, 0x0C6B0C6C, 0x0C6D0C6E, 0x0C6F0C70, 0x0C710C72, 0x0C730C74, 0x0C750C76, 0x0C770C78, 0x0C790C7A, 0x0C7B0C7C, 0x0C7D0C7E, 0x0C7F0C80, 0x0C810C82, 0x0C830C84, 0x0C850C86, 0x0C870C88, 0x0C890C8A, 0x0C8B0C8C, 0x0C8D0C8E, 0x0C8F0C90, 0x0C910C92, 0x0C930C94, 0x0C950C96, 0x0C970C98, 0x0C990C9A, 0x0C9B0C9C, 0x0C9D0C9E, 0x0C9F0CA0, 0x0CA10CA2, 0x0CA30CA4, 0x0CA50CA6, 0x0CA70CA8, 0x0CA90CAA, 0x0CAB0CAC, 0x0CAD0CAE, 0x0CAF0CB0, 0x0CB10CB2, 0x0CB30CB4, 0x0CB50CB6, 0x0CB70CB8, 0x0CB90CBA, 0x0CBB0CBC, 0x0CBD0CBE, 0x0CBF0CC0, 0x0CC10CC2, 0x0CC30CC4, 0x0CC50CC6, 0x0CC70CC8, 0x0CC90CCA, 0x0CCB0CCC, 0x0CCD0CCE, 0x0CCF0CD0, 0x0CD10CD2, 0x0CD30CD4, 0x0CD50CD6, 0x0CD70CD8, 0x0CD90CDA, 0x0CDB0CDC, 0x0CDD0CDE, 0x0CDF0CE0, 0x0CE10CE2, 0x0CE30CE4, 0x0CE50CE6, 0x0CE70CE8, 0x0CE90CEA, 0x0CEB0CEC, 0x0CED0CEE, 0x0CEF0CF0, 0x0CF10CF2, 0x0CF30CF4, 0x0CF50CF6, 0x0CF70CF8, 0x0CF90CFA, 0x0CFB0CFC, 0x0CFD0CFE, 0x0CFF0D00, 0x0D010D02, 0x0D030D04, 0x0D050D06, 0x0D070D08, 0x0D090D0A, 0x0D0B0D0C, 0x0D0D0D0E, 0x0D0F0D10, 0x0D110D12, 0x0D130D14, 0x0D150D16, 0x0D170D18, 0x0D190D1A, 0x0D1B0D1C, 0x0D1D0D1E, 0x0D1F0D20, 0x0D210D22, 0x0D230D24, 0x0D250D26, 0x0D270D28, 0x0D290D2A, 0x0D2B0D2C, 0x0D2D0D2E, 0x0D2F0D30, 0x0D310D32, 0x0D330D34, 0x0D350D36, 0x0D370D38, 0x0D390D3A, 0x0D3B0D3C, 0x0D3D0D3E, 0x0D3F0D40, 0x0D410D42, 0x0D430D44, 0x0D450D46, 0x0D470D48, 0x0D490D4A, 0x0D4B0D4C, 0x0D4D0D4E, 0x0D4F0D50, 0x0D510D52, 0x0D530D54, 0x0D550D56, 0x0D570D58, 0x0D590D5A, 0x0D5B0D5C, 0x0D5D0D5E, 0x0D5F0D60, 0x0D610D62, 0x0D630D64, 0x0D650D66, 0x0D670D68, 0x0D690D6A, 0x0D6B0D6C, 0x0D6D0D6E, 0x0D6F0D70, 0x0D710D72, 0x0D730D74, 0x0D750D76, 0x0D770D78, 0x0D790D7A, 0x0D7B0D7C, 0x0D7D0D7E, 0x0D7F0D80, 0x0D810D82, 0x0D830D84, 0x0D850D86, 0x0D870D88, 0x0D890D8A, 0x0D8B0D8C, 0x0D8D0D8E, 0x0D8F0D90, 0x0D910D92, 0x0D930D94, 0x0D950D96, 0x0D970D98, 0x0D990D9A, 0x0D9B0D9C, 0x0D9D0D9E, 0x0D9F0DA0, 0x0DA10DA2, 0x0DA30DA4, 0x0DA50DA6, 0x0DA70DA8, 0x0DA90DAA, 0x0DAB0DAC, 0x0DAD0DAE, 0x0DAF0DB0, 0x0DB10DB2, 0x0DB30DB4, 0x0DB50DB6, 0x0DB70DB8, 0x0DB90DBA, 0x0DBB0DBC, 0x0DBD0DBE, 0x0DBF0DC0, 0x0DC10DC2, 0x0DC30DC4, 0x0DC50DC6, 0x0DC70DC8, 0x0DC90DCA, 0x0DCB0DCC, 0x0DCD0DCE, 0x0DCF0DD0, 0x0DD10DD2, 0x0DD30DD4, 0x0DD50DD6, 0x0DD70DD8, 0x0DD90DDA, 0x0DDB0DDC, 0x0DDD0DDE, 0x0DDF0DE0, 0x0DE10DE2, 0x0DE30DE4, 0x0DE50DE6, 0x0DE70DE8, 0x0DE90DEA, 0x0DEB0DEC, 0x0DED0DEE, 0x0DEF0DF0, 0x0DF10DF2, 0x0DF30DF4, 0x0DF50DF6, 0x0DF70DF8, 0x0DF90DFA, 0x0DFB0DFC, 0x0DFD0DFE, 0x0DFF0E00, 0x0E010E02, 0x0E030E04, 0x0E050E06, 0x0E070E08, 0x0E090E0A, 0x0E0B0E0C, 0x0E0D0E0E, 0x0E0F0E10, 0x0E110E12, 0x0E130E14, 0x0E150E16, 0x0E170E18, 0x0E190E1A, 0x0E1B0E1C, 0x0E1D0E1E, 0x0E1F0E20, 0x0E210E22, 0x0E230E24, 0x0E250E26, 0x0E270E28, 0x0E290E2A, 0x0E2B0E2C, 0x0E2D0E2E, 0x0E2F0E30, 0x0E310E32, 0x0E330E34, 0x0E350E36, 0x0E370E38, 0x0E390E3A, 0x0E3B0E3C, 0x0E3D0E3E, 0x0E3F0E40, 0x0E410E42, 0x0E430E44, 0x0E450E46, 0x0E470E48, 0x0E490E4A, 0x0E4B0E4C, 0x0E4D0E4E, 0x0E4F0E50, 0x0E510E52, 0x0E530E54, 0x0E550E56, 0x0E570E58, 0x0E590E5A, 0x0E5B0E5C, 0x0E5D0E5E, 0x0E5F0E60, 0x0E610E62, 0x0E630E64, 0x0E650E66, 0x0E670E68, 0x0E690E6A, 0x0E6B0E6C, 0x0E6D0E6E, 0x0E6F0E70, 0x0E710E72, 0x0E730E74, 0x0E750E76, 0x0E770E78, 0x0E790E7A, 0x0E7B0E7C, 0x0E7D0E7E, 0x0E7F0E80, 0x0E810E82, 0x0E830E84, 0x0E850E86, 0x0E870E88, 0x0E890E8A, 0x0E8B0E8C, 0x0E8D0E8E, 0x0E8F0E90, 0x0E910E92, 0x0E930E94, 0x0E950E96, 0x0E970E98, 0x0E990E9A, 0x0E9B0E9C, 0x0E9D0E9E, 0x0E9F0EA0, 0x0EA10EA2, 0x0EA30EA4, 0x0EA50EA6, 0x0EA70EA8, 0x0EA90EAA, 0x0EAB0EAC, 0x0EAD0EAE, 0x0EAF0EB0, 0x0EB10EB2, 0x0EB30EB4, 0x0EB50EB6, 0x0EB70EB8, 0x0EB90EBA, 0x0EBB0EBC, 0x0EBD0EBE, 0x0EBF0EC0, 0x0EC10EC2, 0x0EC30EC4, 0x0EC50EC6, 0x0EC70EC8, 0x0EC90ECA, 0x0ECB0ECC, 0x0ECD0ECE, 0x0ECF0ED0, 0x0ED10ED2, 0x0ED30ED4, 0x0ED50ED6, 0x0ED70ED8, 0x0ED90EDA, 0x0EDB0EDC, 0x0EDD0EDE, 0x0EDF0EE0, 0x0EE10EE2, 0x0EE30EE4, 0x0EE50EE6, 0x0EE70EE8, 0x0EE90EEA, 0x0EEB0EEC, 0x0EED0EEE, 0x0EEF0EF0, 0x0EF10EF2, 0x0EF30EF4, 0x0EF50EF6, 0x0EF70EF8, 0x0EF90EFA, 0x0EFB0EFC, 0x0EFD0EFE, 0x0EFF0F00, 0x0F010F02, 0x0F030F04, 0x0F050F06, 0x0F070F08, 0x0F090F0A, 0x0F0B0F0C, 0x0F0D0F0E, 0x0F0F0F10, 0x0F110F12, 0x0F130F14, 0x0F150F16, 0x0F170F18, 0x0F190F1A, 0x0F1B0F1C, 0x0F1D0F1E, 0x0F1F0F20, 0x0F210F22, 0x0F230F24, 0x0F250F26, 0x0F270F28, 0x0F290F2A, 0x0F2B0F2C, 0x0F2D0F2E, 0x0F2F0F30, 0x0F310F32, 0x0F330F34, 0x0F350F36, 0x0F370F38, 0x0F390F3A, 0x0F3B0F3C, 0x0F3D0F3E, 0x0F3F0F40, 0x0F410F42, 0x0F430F44, 0x0F450F46, 0x0F470F48, 0x0F490F4A, 0x0F4B0F4C, 0x0F4D0F4E, 0x0F4F0F50, 0x0F510F52, 0x0F530F54, 0x0F550F56, 0x0F570F58, 0x0F590F5A, 0x0F5B0F5C, 0x0F5D0F5E, 0x0F5F0F60, 0x0F610F62, 0x0F630F64, 0x0F650F66, 0x0F670F68, 0x0F690F6A, 0x0F6B0F6C, 0x0F6D0F6E, 0x0F6F0F70, 0x0F710F72, 0x0F730F74, 0x0F750F76, 0x0F770F78, 0x0F790F7A, 0x0F7B0F7C, 0x0F7D0F7E, 0x0F7F0F80, 0x0F810F82, 0x0F830F84, 0x0F850F86, 0x0F870F88, 0x0F890F8A, 0x0F8B0F8C, 0x0F8D0F8E, 0x0F8F0F90, 0x0F910F92, 0x0F930F94, 0x0F950F96, 0x0F970F98, 0x0F990F9A, 0x0F9B0F9C, 0x0F9D0F9E, 0x0F9F0FA0,
//					0x0FA10FA2, 0x0FA30FA4, 0x0FA50FA6, 0x0FA70FA8, 0x0FA90FAA, 0x0FAB0FAC, 0x0FAD0FAE, 0x0FAF0FB0, 0x0FB10FB2, 0x0FB30FB4, 0x0FB50FB6, 0x0FB70FB8, 0x0FB90FBA, 0x0FBB0FBC, 0x0FBD0FBE, 0x0FBF0FC0, 0x0FC10FC2, 0x0FC30FC4, 0x0FC50FC6, 0x0FC70FC8, 0x0FC90FCA, 0x0FCB0FCC, 0x0FCD0FCE, 0x0FCF0FD0, 0x0FD10FD2, 0x0FD30FD4, 0x0FD50FD6, 0x0FD70FD8, 0x0FD90FDA, 0x0FDB0FDC, 0x0FDD0FDE, 0x0FDF0FE0, 0x0FE10FE2, 0x0FE30FE4, 0x0FE50FE6, 0x0FE70FE8, 0x0FE90FEA, 0x0FEB0FEC, 0x0FED0FEE, 0x0FEF0FF0, 0x0FF10FF2, 0x0FF30FF4, 0x0FF50FF6, 0x0FF70FF8, 0x0FF90FFA, 0x0FFB0FFC, 0x0FFD0FFE, 0x0FFF1000, 0x10011002, 0x10031004, 0x10051006, 0x10071008, 0x1009100A, 0x100B100C, 0x100D100E, 0x100F1010, 0x10111012, 0x10131014, 0x10151016, 0x10171018, 0x1019101A, 0x101B101C, 0x101D101E, 0x101F1020, 0x10211022, 0x10231024, 0x10251026, 0x10271028, 0x1029102A, 0x102B102C, 0x102D102E, 0x102F1030, 0x10311032, 0x10331034, 0x10351036, 0x10371038, 0x1039103A, 0x103B103C, 0x103D103E, 0x103F1040, 0x10411042, 0x10431044, 0x10451046, 0x10471048, 0x1049104A, 0x104B104C, 0x104D104E, 0x104F1050, 0x10511052, 0x10531054, 0x10551056, 0x10571058, 0x1059105A, 0x105B105C, 0x105D105E, 0x105F1060, 0x10611062, 0x10631064, 0x10651066, 0x10671068, 0x1069106A, 0x106B106C, 0x106D106E, 0x106F1070, 0x10711072, 0x10731074, 0x10751076, 0x10771078, 0x1079107A, 0x107B107C, 0x107D107E, 0x107F1080, 0x10811082, 0x10831084, 0x10851086, 0x10871088, 0x1089108A, 0x108B108C, 0x108D108E, 0x108F1090, 0x10911092, 0x10931094, 0x10951096, 0x10971098, 0x1099109A, 0x109B109C, 0x109D109E, 0x109F10A0, 0x10A110A2, 0x10A310A4, 0x10A510A6, 0x10A710A8, 0x10A910AA, 0x10AB10AC, 0x10AD10AE, 0x10AF10B0, 0x10B110B2, 0x10B310B4, 0x10B510B6, 0x10B710B8, 0x10B910BA, 0x10BB10BC, 0x10BD10BE, 0x10BF10C0, 0x10C110C2, 0x10C310C4, 0x10C510C6, 0x10C710C8, 0x10C910CA, 0x10CB10CC, 0x10CD10CE, 0x10CF10D0, 0x10D110D2, 0x10D310D4, 0x10D510D6, 0x10D710D8, 0x10D910DA, 0x10DB10DC, 0x10DD10DE, 0x10DF10E0, 0x10E110E2, 0x10E310E4, 0x10E510E6, 0x10E710E8, 0x10E910EA, 0x10EB10EC, 0x10ED10EE, 0x10EF10F0, 0x10F110F2, 0x10F310F4, 0x10F510F6, 0x10F710F8, 0x10F910FA, 0x10FB10FC, 0x10FD10FE, 0x10FF1100, 0x11011102, 0x11031104, 0x11051106, 0x11071108, 0x1109110A, 0x110B110C, 0x110D110E, 0x110F1110, 0x11111112, 0x11131114, 0x11151116, 0x11171118, 0x1119111A, 0x111B111C, 0x111D111E, 0x111F1120, 0x11211122, 0x11231124, 0x11251126, 0x11271128, 0x1129112A, 0x112B112C, 0x112D112E, 0x112F1130, 0x11311132, 0x11331134, 0x11351136, 0x11371138, 0x1139113A, 0x113B113C, 0x113D113E, 0x113F1140, 0x11411142, 0x11431144, 0x11451146, 0x11471148, 0x1149114A, 0x114B114C, 0x114D114E, 0x114F1150, 0x11511152, 0x11531154, 0x11551156, 0x11571158, 0x1159115A, 0x115B115C, 0x115D115E, 0x115F1160, 0x11611162, 0x11631164, 0x11651166, 0x11671168, 0x1169116A, 0x116B116C, 0x116D116E, 0x116F1170, 0x11711172, 0x11731174, 0x11751176, 0x11771178, 0x1179117A, 0x117B117C, 0x117D117E, 0x117F1180, 0x11811182, 0x11831184, 0x11851186, 0x11871188, 0x1189118A, 0x118B118C, 0x118D118E, 0x118F1190, 0x11911192, 0x11931194, 0x11951196, 0x11971198, 0x1199119A, 0x119B119C, 0x119D119E, 0x119F11A0, 0x11A111A2, 0x11A311A4, 0x11A511A6, 0x11A711A8, 0x11A911AA, 0x11AB11AC, 0x11AD11AE, 0x11AF11B0, 0x11B111B2, 0x11B311B4, 0x11B511B6, 0x11B711B8, 0x11B911BA, 0x11BB11BC, 0x11BD11BE, 0x11BF11C0, 0x11C111C2, 0x11C311C4, 0x11C511C6, 0x11C711C8, 0x11C911CA, 0x11CB11CC, 0x11CD11CE, 0x11CF11D0, 0x11D111D2, 0x11D311D4, 0x11D511D6, 0x11D711D8, 0x11D911DA, 0x11DB11DC, 0x11DD11DE, 0x11DF11E0, 0x11E111E2, 0x11E311E4, 0x11E511E6, 0x11E711E8, 0x11E911EA, 0x11EB11EC, 0x11ED11EE, 0x11EF11F0, 0x11F111F2, 0x11F311F4, 0x11F511F6, 0x11F711F8, 0x11F911FA, 0x11FB11FC, 0x11FD11FE, 0x11FF1200, 0x12011202, 0x12031204, 0x12051206, 0x12071208, 0x1209120A, 0x120B120C, 0x120D120E, 0x120F1210, 0x12111212, 0x12131214, 0x12151216, 0x12171218, 0x1219121A, 0x121B121C, 0x121D121E, 0x121F1220, 0x12211222, 0x12231224, 0x12251226, 0x12271228, 0x1229122A, 0x122B122C, 0x122D122E, 0x122F1230, 0x12311232, 0x12331234, 0x12351236, 0x12371238, 0x1239123A, 0x123B123C, 0x123D123E, 0x123F1240, 0x12411242, 0x12431244, 0x12451246, 0x12471248, 0x1249124A, 0x124B124C, 0x124D124E, 0x124F1250, 0x12511252, 0x12531254, 0x12551256, 0x12571258, 0x1259125A, 0x125B125C, 0x125D125E, 0x125F1260, 0x12611262, 0x12631264, 0x12651266, 0x12671268, 0x1269126A, 0x126B126C, 0x126D126E, 0x126F1270, 0x12711272, 0x12731274, 0x12751276, 0x12771278, 0x1279127A, 0x127B127C, 0x127D127E, 0x127F1280, 0x12811282, 0x12831284, 0x12851286, 0x12871288, 0x1289128A, 0x128B128C, 0x128D128E, 0x128F1290, 0x12911292, 0x12931294, 0x12951296, 0x12971298, 0x1299129A, 0x129B129C, 0x129D129E, 0x129F12A0, 0x12A112A2, 0x12A312A4, 0x12A512A6, 0x12A712A8, 0x12A912AA, 0x12AB12AC, 0x12AD12AE, 0x12AF12B0, 0x12B112B2, 0x12B312B4, 0x12B512B6, 0x12B712B8, 0x12B912BA, 0x12BB12BC, 0x12BD12BE, 0x12BF12C0, 0x12C112C2, 0x12C312C4, 0x12C512C6, 0x12C712C8, 0x12C912CA, 0x12CB12CC, 0x12CD12CE, 0x12CF12D0, 0x12D112D2, 0x12D312D4, 0x12D512D6, 0x12D712D8, 0x12D912DA, 0x12DB12DC, 0x12DD12DE, 0x12DF12E0, 0x12E112E2, 0x12E312E4, 0x12E512E6, 0x12E712E8, 0x12E912EA, 0x12EB12EC, 0x12ED12EE, 0x12EF12F0, 0x12F112F2, 0x12F312F4, 0x12F512F6, 0x12F712F8, 0x12F912FA, 0x12FB12FC, 0x12FD12FE, 0x12FF1300, 0x13011302, 0x13031304, 0x13051306, 0x13071308, 0x1309130A, 0x130B130C, 0x130D130E, 0x130F1310, 0x13111312, 0x13131314, 0x13151316, 0x13171318, 0x1319131A, 0x131B131C, 0x131D131E, 0x131F1320, 0x13211322, 0x13231324, 0x13251326, 0x13271328, 0x1329132A, 0x132B132C, 0x132D132E, 0x132F1330, 0x13311332, 0x13331334, 0x13351336, 0x13371338, 0x1339133A, 0x133B133C, 0x133D133E, 0x133F1340, 0x13411342, 0x13431344, 0x13451346, 0x13471348, 0x1349134A, 0x134B134C, 0x134D134E, 0x134F1350, 0x13511352, 0x13531354, 0x13551356, 0x13571358, 0x1359135A, 0x135B135C, 0x135D135E, 0x135F1360, 0x13611362, 0x13631364, 0x13651366, 0x13671368, 0x1369136A, 0x136B136C, 0x136D136E, 0x136F1370, 0x13711372, 0x13731374, 0x13751376, 0x13771378, 0x1379137A, 0x137B137C, 0x137D137E, 0x137F1380, 0x13811382, 0x13831384, 0x13851386, 0x13871388, 0x1389138A, 0x138B138C, 0x138D138E, 0x138F1390, 0x13911392, 0x13931394, 0x13951396, 0x13971398, 0x1399139A, 0x139B139C, 0x139D139E, 0x139F13A0, 0x13A113A2, 0x13A313A4, 0x13A513A6, 0x13A713A8, 0x13A913AA, 0x13AB13AC, 0x13AD13AE, 0x13AF13B0, 0x13B113B2, 0x13B313B4, 0x13B513B6, 0x13B713B8, 0x13B913BA, 0x13BB13BC, 0x13BD13BE, 0x13BF13C0, 0x13C113C2, 0x13C313C4, 0x13C513C6, 0x13C713C8, 0x13C913CA, 0x13CB13CC, 0x13CD13CE, 0x13CF13D0, 0x13D113D2, 0x13D313D4, 0x13D513D6, 0x13D713D8, 0x13D913DA, 0x13DB13DC, 0x13DD13DE, 0x13DF13E0, 0x13E113E2, 0x13E313E4, 0x13E513E6, 0x13E713E8, 0x13E913EA, 0x13EB13EC, 0x13ED13EE, 0x13EF13F0, 0x13F113F2, 0x13F313F4, 0x13F513F6, 0x13F713F8, 0x13F913FA, 0x13FB13FC, 0x13FD13FE, 0x13FF1400 };
	u32 A2[1280] = {0x00020001, 0x00040003, 0x00060005, 0x00080007, 0x000A0009, 0x000C000B, 0x000E000D, 0x0010000F, 0x00120011, 0x00140013, 0x00160015, 0x00180017, 0x001A0019, 0x001C001B, 0x001E001D, 0x0020001F, 0x00220021, 0x00240023, 0x00260025, 0x00280027, 0x002A0029, 0x002C002B, 0x002E002D, 0x0030002F, 0x00320031, 0x00340033, 0x00360035, 0x00380037, 0x003A0039, 0x003C003B, 0x003E003D, 0x0040003F, 0x00420041, 0x00440043, 0x00460045, 0x00480047, 0x004A0049, 0x004C004B, 0x004E004D, 0x0050004F, 0x00520051, 0x00540053, 0x00560055, 0x00580057, 0x005A0059, 0x005C005B, 0x005E005D, 0x0060005F, 0x00620061, 0x00640063, 0x00660065, 0x00680067, 0x006A0069, 0x006C006B, 0x006E006D, 0x0070006F, 0x00720071, 0x00740073, 0x00760075, 0x00780077, 0x007A0079, 0x007C007B, 0x007E007D, 0x0080007F, 0x00820081, 0x00840083, 0x00860085, 0x00880087, 0x008A0089, 0x008C008B, 0x008E008D, 0x0090008F, 0x00920091, 0x00940093, 0x00960095, 0x00980097, 0x009A0099, 0x009C009B, 0x009E009D, 0x00A0009F, 0x00A200A1, 0x00A400A3, 0x00A600A5, 0x00A800A7, 0x00AA00A9, 0x00AC00AB, 0x00AE00AD, 0x00B000AF, 0x00B200B1, 0x00B400B3, 0x00B600B5, 0x00B800B7, 0x00BA00B9, 0x00BC00BB, 0x00BE00BD, 0x00C000BF, 0x00C200C1, 0x00C400C3, 0x00C600C5, 0x00C800C7, 0x00CA00C9, 0x00CC00CB, 0x00CE00CD, 0x00D000CF, 0x00D200D1, 0x00D400D3, 0x00D600D5, 0x00D800D7, 0x00DA00D9, 0x00DC00DB, 0x00DE00DD, 0x00E000DF, 0x00E200E1, 0x00E400E3, 0x00E600E5, 0x00E800E7, 0x00EA00E9, 0x00EC00EB, 0x00EE00ED, 0x00F000EF, 0x00F200F1, 0x00F400F3, 0x00F600F5, 0x00F800F7, 0x00FA00F9, 0x00FC00FB, 0x00FE00FD, 0x010000FF, 0x01020101, 0x01040103, 0x01060105, 0x01080107, 0x010A0109, 0x010C010B, 0x010E010D, 0x0110010F, 0x01120111, 0x01140113, 0x01160115, 0x01180117, 0x011A0119, 0x011C011B, 0x011E011D, 0x0120011F, 0x01220121, 0x01240123, 0x01260125, 0x01280127, 0x012A0129, 0x012C012B, 0x012E012D, 0x0130012F, 0x01320131, 0x01340133, 0x01360135, 0x01380137, 0x013A0139, 0x013C013B, 0x013E013D, 0x0140013F, 0x01420141, 0x01440143, 0x01460145, 0x01480147, 0x014A0149, 0x014C014B, 0x014E014D, 0x0150014F, 0x01520151, 0x01540153, 0x01560155, 0x01580157, 0x015A0159, 0x015C015B, 0x015E015D, 0x0160015F, 0x01620161, 0x01640163, 0x01660165, 0x01680167, 0x016A0169, 0x016C016B, 0x016E016D, 0x0170016F, 0x01720171, 0x01740173, 0x01760175, 0x01780177, 0x017A0179, 0x017C017B, 0x017E017D, 0x0180017F, 0x01820181, 0x01840183, 0x01860185, 0x01880187, 0x018A0189, 0x018C018B, 0x018E018D, 0x0190018F, 0x01920191, 0x01940193, 0x01960195, 0x01980197, 0x019A0199, 0x019C019B, 0x019E019D, 0x01A0019F, 0x01A201A1, 0x01A401A3, 0x01A601A5, 0x01A801A7, 0x01AA01A9, 0x01AC01AB, 0x01AE01AD, 0x01B001AF, 0x01B201B1, 0x01B401B3, 0x01B601B5, 0x01B801B7, 0x01BA01B9, 0x01BC01BB, 0x01BE01BD, 0x01C001BF, 0x01C201C1, 0x01C401C3, 0x01C601C5, 0x01C801C7, 0x01CA01C9, 0x01CC01CB, 0x01CE01CD, 0x01D001CF, 0x01D201D1, 0x01D401D3, 0x01D601D5, 0x01D801D7, 0x01DA01D9, 0x01DC01DB, 0x01DE01DD, 0x01E001DF, 0x01E201E1, 0x01E401E3, 0x01E601E5, 0x01E801E7, 0x01EA01E9, 0x01EC01EB, 0x01EE01ED, 0x01F001EF, 0x01F201F1, 0x01F401F3, 0x01F601F5, 0x01F801F7, 0x01FA01F9, 0x01FC01FB, 0x01FE01FD, 0x020001FF, 0x02020201, 0x02040203, 0x02060205, 0x02080207, 0x020A0209, 0x020C020B, 0x020E020D, 0x0210020F, 0x02120211, 0x02140213, 0x02160215, 0x02180217, 0x021A0219, 0x021C021B, 0x021E021D, 0x0220021F, 0x02220221, 0x02240223, 0x02260225, 0x02280227, 0x022A0229, 0x022C022B, 0x022E022D, 0x0230022F, 0x02320231, 0x02340233, 0x02360235, 0x02380237, 0x023A0239, 0x023C023B, 0x023E023D, 0x0240023F, 0x02420241, 0x02440243, 0x02460245, 0x02480247, 0x024A0249, 0x024C024B, 0x024E024D, 0x0250024F, 0x02520251, 0x02540253, 0x02560255, 0x02580257, 0x025A0259, 0x025C025B, 0x025E025D, 0x0260025F, 0x02620261, 0x02640263, 0x02660265, 0x02680267, 0x026A0269, 0x026C026B, 0x026E026D, 0x0270026F, 0x02720271, 0x02740273, 0x02760275, 0x02780277, 0x027A0279, 0x027C027B, 0x027E027D, 0x0280027F, 0x02820281, 0x02840283, 0x02860285, 0x02880287, 0x028A0289, 0x028C028B, 0x028E028D, 0x0290028F, 0x02920291, 0x02940293, 0x02960295, 0x02980297, 0x029A0299, 0x029C029B, 0x029E029D, 0x02A0029F, 0x02A202A1, 0x02A402A3, 0x02A602A5, 0x02A802A7, 0x02AA02A9, 0x02AC02AB, 0x02AE02AD, 0x02B002AF, 0x02B202B1, 0x02B402B3, 0x02B602B5, 0x02B802B7, 0x02BA02B9, 0x02BC02BB, 0x02BE02BD, 0x02C002BF, 0x02C202C1, 0x02C402C3, 0x02C602C5, 0x02C802C7, 0x02CA02C9, 0x02CC02CB, 0x02CE02CD, 0x02D002CF, 0x02D202D1, 0x02D402D3, 0x02D602D5, 0x02D802D7, 0x02DA02D9, 0x02DC02DB, 0x02DE02DD, 0x02E002DF, 0x02E202E1, 0x02E402E3, 0x02E602E5, 0x02E802E7, 0x02EA02E9, 0x02EC02EB, 0x02EE02ED, 0x02F002EF, 0x02F202F1, 0x02F402F3, 0x02F602F5, 0x02F802F7, 0x02FA02F9, 0x02FC02FB, 0x02FE02FD, 0x030002FF, 0x03020301, 0x03040303, 0x03060305, 0x03080307, 0x030A0309, 0x030C030B, 0x030E030D, 0x0310030F, 0x03120311, 0x03140313, 0x03160315, 0x03180317, 0x031A0319, 0x031C031B, 0x031E031D, 0x0320031F, 0x03220321, 0x03240323, 0x03260325, 0x03280327, 0x032A0329, 0x032C032B, 0x032E032D, 0x0330032F, 0x03320331, 0x03340333, 0x03360335, 0x03380337, 0x033A0339, 0x033C033B, 0x033E033D, 0x0340033F, 0x03420341, 0x03440343, 0x03460345, 0x03480347, 0x034A0349, 0x034C034B, 0x034E034D, 0x0350034F, 0x03520351, 0x03540353, 0x03560355, 0x03580357, 0x035A0359, 0x035C035B, 0x035E035D, 0x0360035F, 0x03620361, 0x03640363, 0x03660365, 0x03680367, 0x036A0369, 0x036C036B, 0x036E036D, 0x0370036F, 0x03720371, 0x03740373, 0x03760375, 0x03780377, 0x037A0379, 0x037C037B, 0x037E037D, 0x0380037F, 0x03820381, 0x03840383, 0x03860385, 0x03880387, 0x038A0389, 0x038C038B, 0x038E038D, 0x0390038F, 0x03920391, 0x03940393, 0x03960395, 0x03980397, 0x039A0399, 0x039C039B, 0x039E039D, 0x03A0039F, 0x03A203A1, 0x03A403A3, 0x03A603A5, 0x03A803A7, 0x03AA03A9, 0x03AC03AB, 0x03AE03AD, 0x03B003AF, 0x03B203B1, 0x03B403B3, 0x03B603B5, 0x03B803B7, 0x03BA03B9, 0x03BC03BB, 0x03BE03BD, 0x03C003BF, 0x03C203C1, 0x03C403C3, 0x03C603C5, 0x03C803C7, 0x03CA03C9, 0x03CC03CB, 0x03CE03CD, 0x03D003CF, 0x03D203D1, 0x03D403D3, 0x03D603D5, 0x03D803D7, 0x03DA03D9, 0x03DC03DB, 0x03DE03DD, 0x03E003DF, 0x03E203E1, 0x03E403E3, 0x03E603E5, 0x03E803E7, 0x03EA03E9, 0x03EC03EB, 0x03EE03ED, 0x03F003EF, 0x03F203F1, 0x03F403F3, 0x03F603F5, 0x03F803F7, 0x03FA03F9, 0x03FC03FB, 0x03FE03FD, 0x040003FF, 0x04020401, 0x04040403, 0x04060405, 0x04080407, 0x040A0409, 0x040C040B, 0x040E040D, 0x0410040F, 0x04120411, 0x04140413, 0x04160415, 0x04180417, 0x041A0419, 0x041C041B, 0x041E041D, 0x0420041F, 0x04220421, 0x04240423, 0x04260425, 0x04280427, 0x042A0429, 0x042C042B, 0x042E042D, 0x0430042F, 0x04320431, 0x04340433, 0x04360435, 0x04380437, 0x043A0439, 0x043C043B, 0x043E043D, 0x0440043F, 0x04420441, 0x04440443, 0x04460445, 0x04480447, 0x044A0449, 0x044C044B, 0x044E044D, 0x0450044F, 0x04520451, 0x04540453, 0x04560455, 0x04580457, 0x045A0459, 0x045C045B, 0x045E045D, 0x0460045F, 0x04620461, 0x04640463, 0x04660465, 0x04680467, 0x046A0469, 0x046C046B, 0x046E046D, 0x0470046F, 0x04720471, 0x04740473, 0x04760475, 0x04780477, 0x047A0479, 0x047C047B, 0x047E047D, 0x0480047F, 0x04820481, 0x04840483, 0x04860485, 0x04880487, 0x048A0489, 0x048C048B, 0x048E048D, 0x0490048F, 0x04920491, 0x04940493, 0x04960495, 0x04980497, 0x049A0499, 0x049C049B, 0x049E049D, 0x04A0049F, 0x04A204A1, 0x04A404A3, 0x04A604A5, 0x04A804A7, 0x04AA04A9, 0x04AC04AB, 0x04AE04AD, 0x04B004AF, 0x04B204B1, 0x04B404B3, 0x04B604B5, 0x04B804B7, 0x04BA04B9, 0x04BC04BB, 0x04BE04BD, 0x04C004BF, 0x04C204C1, 0x04C404C3, 0x04C604C5, 0x04C804C7, 0x04CA04C9, 0x04CC04CB, 0x04CE04CD, 0x04D004CF, 0x04D204D1, 0x04D404D3, 0x04D604D5, 0x04D804D7, 0x04DA04D9, 0x04DC04DB, 0x04DE04DD, 0x04E004DF, 0x04E204E1, 0x04E404E3, 0x04E604E5, 0x04E804E7, 0x04EA04E9, 0x04EC04EB, 0x04EE04ED, 0x04F004EF, 0x04F204F1, 0x04F404F3, 0x04F604F5, 0x04F804F7, 0x04FA04F9, 0x04FC04FB, 0x04FE04FD, 0x050004FF, 0x05020501, 0x05040503, 0x05060505, 0x05080507, 0x050A0509, 0x050C050B, 0x050E050D, 0x0510050F, 0x05120511, 0x05140513, 0x05160515, 0x05180517, 0x051A0519, 0x051C051B, 0x051E051D, 0x0520051F, 0x05220521, 0x05240523, 0x05260525, 0x05280527, 0x052A0529, 0x052C052B, 0x052E052D, 0x0530052F, 0x05320531, 0x05340533, 0x05360535, 0x05380537, 0x053A0539, 0x053C053B, 0x053E053D, 0x0540053F, 0x05420541, 0x05440543, 0x05460545, 0x05480547, 0x054A0549, 0x054C054B, 0x054E054D, 0x0550054F, 0x05520551, 0x05540553, 0x05560555, 0x05580557, 0x055A0559, 0x055C055B, 0x055E055D, 0x0560055F, 0x05620561, 0x05640563, 0x05660565, 0x05680567, 0x056A0569, 0x056C056B, 0x056E056D, 0x0570056F, 0x05720571, 0x05740573, 0x05760575, 0x05780577, 0x057A0579, 0x057C057B, 0x057E057D, 0x0580057F, 0x05820581, 0x05840583, 0x05860585, 0x05880587, 0x058A0589, 0x058C058B, 0x058E058D, 0x0590058F, 0x05920591, 0x05940593, 0x05960595, 0x05980597, 0x059A0599, 0x059C059B, 0x059E059D, 0x05A0059F, 0x05A205A1, 0x05A405A3, 0x05A605A5, 0x05A805A7, 0x05AA05A9, 0x05AC05AB, 0x05AE05AD, 0x05B005AF, 0x05B205B1, 0x05B405B3, 0x05B605B5, 0x05B805B7, 0x05BA05B9, 0x05BC05BB, 0x05BE05BD, 0x05C005BF, 0x05C205C1, 0x05C405C3, 0x05C605C5, 0x05C805C7, 0x05CA05C9, 0x05CC05CB, 0x05CE05CD, 0x05D005CF, 0x05D205D1, 0x05D405D3, 0x05D605D5, 0x05D805D7, 0x05DA05D9, 0x05DC05DB, 0x05DE05DD, 0x05E005DF, 0x05E205E1, 0x05E405E3, 0x05E605E5, 0x05E805E7, 0x05EA05E9, 0x05EC05EB, 0x05EE05ED, 0x05F005EF, 0x05F205F1, 0x05F405F3, 0x05F605F5, 0x05F805F7, 0x05FA05F9, 0x05FC05FB, 0x05FE05FD, 0x060005FF, 0x06020601, 0x06040603, 0x06060605, 0x06080607, 0x060A0609, 0x060C060B, 0x060E060D, 0x0610060F, 0x06120611, 0x06140613, 0x06160615, 0x06180617, 0x061A0619, 0x061C061B, 0x061E061D, 0x0620061F, 0x06220621, 0x06240623, 0x06260625, 0x06280627, 0x062A0629, 0x062C062B, 0x062E062D, 0x0630062F, 0x06320631, 0x06340633, 0x06360635, 0x06380637, 0x063A0639, 0x063C063B, 0x063E063D, 0x0640063F, 0x06420641, 0x06440643, 0x06460645, 0x06480647, 0x064A0649, 0x064C064B, 0x064E064D, 0x0650064F, 0x06520651, 0x06540653, 0x06560655, 0x06580657, 0x065A0659, 0x065C065B, 0x065E065D, 0x0660065F, 0x06620661, 0x06640663, 0x06660665, 0x06680667, 0x066A0669, 0x066C066B, 0x066E066D, 0x0670066F, 0x06720671, 0x06740673, 0x06760675, 0x06780677, 0x067A0679, 0x067C067B, 0x067E067D, 0x0680067F, 0x06820681, 0x06840683, 0x06860685, 0x06880687, 0x068A0689, 0x068C068B, 0x068E068D, 0x0690068F, 0x06920691, 0x06940693, 0x06960695, 0x06980697, 0x069A0699, 0x069C069B, 0x069E069D, 0x06A0069F, 0x06A206A1, 0x06A406A3, 0x06A606A5, 0x06A806A7, 0x06AA06A9, 0x06AC06AB, 0x06AE06AD, 0x06B006AF, 0x06B206B1, 0x06B406B3, 0x06B606B5, 0x06B806B7, 0x06BA06B9, 0x06BC06BB, 0x06BE06BD, 0x06C006BF, 0x06C206C1, 0x06C406C3, 0x06C606C5, 0x06C806C7, 0x06CA06C9, 0x06CC06CB, 0x06CE06CD, 0x06D006CF, 0x06D206D1, 0x06D406D3, 0x06D606D5, 0x06D806D7, 0x06DA06D9, 0x06DC06DB, 0x06DE06DD, 0x06E006DF, 0x06E206E1, 0x06E406E3, 0x06E606E5, 0x06E806E7, 0x06EA06E9, 0x06EC06EB, 0x06EE06ED, 0x06F006EF, 0x06F206F1, 0x06F406F3, 0x06F606F5, 0x06F806F7, 0x06FA06F9, 0x06FC06FB, 0x06FE06FD, 0x070006FF, 0x07020701, 0x07040703, 0x07060705, 0x07080707, 0x070A0709, 0x070C070B, 0x070E070D, 0x0710070F, 0x07120711, 0x07140713, 0x07160715, 0x07180717, 0x071A0719, 0x071C071B, 0x071E071D, 0x0720071F, 0x07220721, 0x07240723, 0x07260725, 0x07280727, 0x072A0729, 0x072C072B, 0x072E072D, 0x0730072F, 0x07320731, 0x07340733, 0x07360735, 0x07380737, 0x073A0739, 0x073C073B, 0x073E073D, 0x0740073F, 0x07420741, 0x07440743, 0x07460745, 0x07480747, 0x074A0749, 0x074C074B, 0x074E074D, 0x0750074F, 0x07520751, 0x07540753, 0x07560755, 0x07580757, 0x075A0759, 0x075C075B, 0x075E075D, 0x0760075F, 0x07620761, 0x07640763, 0x07660765, 0x07680767, 0x076A0769, 0x076C076B, 0x076E076D, 0x0770076F, 0x07720771, 0x07740773, 0x07760775, 0x07780777, 0x077A0779, 0x077C077B, 0x077E077D, 0x0780077F, 0x07820781, 0x07840783, 0x07860785, 0x07880787, 0x078A0789, 0x078C078B, 0x078E078D, 0x0790078F, 0x07920791, 0x07940793, 0x07960795, 0x07980797, 0x079A0799, 0x079C079B, 0x079E079D, 0x07A0079F, 0x07A207A1, 0x07A407A3, 0x07A607A5, 0x07A807A7, 0x07AA07A9, 0x07AC07AB, 0x07AE07AD, 0x07B007AF, 0x07B207B1, 0x07B407B3, 0x07B607B5, 0x07B807B7, 0x07BA07B9, 0x07BC07BB, 0x07BE07BD, 0x07C007BF, 0x07C207C1, 0x07C407C3, 0x07C607C5, 0x07C807C7, 0x07CA07C9, 0x07CC07CB, 0x07CE07CD, 0x07D007CF,
				   0x07D207D1, 0x07D407D3, 0x07D607D5, 0x07D807D7, 0x07DA07D9, 0x07DC07DB, 0x07DE07DD, 0x07E007DF, 0x07E207E1, 0x07E407E3, 0x07E607E5, 0x07E807E7, 0x07EA07E9, 0x07EC07EB, 0x07EE07ED, 0x07F007EF, 0x07F207F1, 0x07F407F3, 0x07F607F5, 0x07F807F7, 0x07FA07F9, 0x07FC07FB, 0x07FE07FD, 0x080007FF, 0x08020801, 0x08040803, 0x08060805, 0x08080807, 0x080A0809, 0x080C080B, 0x080E080D, 0x0810080F, 0x08120811, 0x08140813, 0x08160815, 0x08180817, 0x081A0819, 0x081C081B, 0x081E081D, 0x0820081F, 0x08220821, 0x08240823, 0x08260825, 0x08280827, 0x082A0829, 0x082C082B, 0x082E082D, 0x0830082F, 0x08320831, 0x08340833, 0x08360835, 0x08380837, 0x083A0839, 0x083C083B, 0x083E083D, 0x0840083F, 0x08420841, 0x08440843, 0x08460845, 0x08480847, 0x084A0849, 0x084C084B, 0x084E084D, 0x0850084F, 0x08520851, 0x08540853, 0x08560855, 0x08580857, 0x085A0859, 0x085C085B, 0x085E085D, 0x0860085F, 0x08620861, 0x08640863, 0x08660865, 0x08680867, 0x086A0869, 0x086C086B, 0x086E086D, 0x0870086F, 0x08720871, 0x08740873, 0x08760875, 0x08780877, 0x087A0879, 0x087C087B, 0x087E087D, 0x0880087F, 0x08820881, 0x08840883, 0x08860885, 0x08880887, 0x088A0889, 0x088C088B, 0x088E088D, 0x0890088F, 0x08920891, 0x08940893, 0x08960895, 0x08980897, 0x089A0899, 0x089C089B, 0x089E089D, 0x08A0089F, 0x08A208A1, 0x08A408A3, 0x08A608A5, 0x08A808A7, 0x08AA08A9, 0x08AC08AB, 0x08AE08AD, 0x08B008AF, 0x08B208B1, 0x08B408B3, 0x08B608B5, 0x08B808B7, 0x08BA08B9, 0x08BC08BB, 0x08BE08BD, 0x08C008BF, 0x08C208C1, 0x08C408C3, 0x08C608C5, 0x08C808C7, 0x08CA08C9, 0x08CC08CB, 0x08CE08CD, 0x08D008CF, 0x08D208D1, 0x08D408D3, 0x08D608D5, 0x08D808D7, 0x08DA08D9, 0x08DC08DB, 0x08DE08DD, 0x08E008DF, 0x08E208E1, 0x08E408E3, 0x08E608E5, 0x08E808E7, 0x08EA08E9, 0x08EC08EB, 0x08EE08ED, 0x08F008EF, 0x08F208F1, 0x08F408F3, 0x08F608F5, 0x08F808F7, 0x08FA08F9, 0x08FC08FB, 0x08FE08FD, 0x090008FF, 0x09020901, 0x09040903, 0x09060905, 0x09080907, 0x090A0909, 0x090C090B, 0x090E090D, 0x0910090F, 0x09120911, 0x09140913, 0x09160915, 0x09180917, 0x091A0919, 0x091C091B, 0x091E091D, 0x0920091F, 0x09220921, 0x09240923, 0x09260925, 0x09280927, 0x092A0929, 0x092C092B, 0x092E092D, 0x0930092F, 0x09320931, 0x09340933, 0x09360935, 0x09380937, 0x093A0939, 0x093C093B, 0x093E093D, 0x0940093F, 0x09420941, 0x09440943, 0x09460945, 0x09480947, 0x094A0949, 0x094C094B, 0x094E094D, 0x0950094F, 0x09520951, 0x09540953, 0x09560955, 0x09580957, 0x095A0959, 0x095C095B, 0x095E095D, 0x0960095F, 0x09620961, 0x09640963, 0x09660965, 0x09680967, 0x096A0969, 0x096C096B, 0x096E096D, 0x0970096F, 0x09720971, 0x09740973, 0x09760975, 0x09780977, 0x097A0979, 0x097C097B, 0x097E097D, 0x0980097F, 0x09820981, 0x09840983, 0x09860985, 0x09880987, 0x098A0989, 0x098C098B, 0x098E098D, 0x0990098F, 0x09920991, 0x09940993, 0x09960995, 0x09980997, 0x099A0999, 0x099C099B, 0x099E099D, 0x09A0099F, 0x09A209A1, 0x09A409A3, 0x09A609A5, 0x09A809A7, 0x09AA09A9, 0x09AC09AB, 0x09AE09AD, 0x09B009AF, 0x09B209B1, 0x09B409B3, 0x09B609B5, 0x09B809B7, 0x09BA09B9, 0x09BC09BB, 0x09BE09BD, 0x09C009BF, 0x09C209C1, 0x09C409C3, 0x09C609C5, 0x09C809C7, 0x09CA09C9, 0x09CC09CB, 0x09CE09CD, 0x09D009CF, 0x09D209D1, 0x09D409D3, 0x09D609D5, 0x09D809D7, 0x09DA09D9, 0x09DC09DB, 0x09DE09DD, 0x09E009DF, 0x09E209E1, 0x09E409E3, 0x09E609E5, 0x09E809E7, 0x09EA09E9, 0x09EC09EB, 0x09EE09ED, 0x09F009EF, 0x09F209F1, 0x09F409F3, 0x09F609F5, 0x09F809F7, 0x09FA09F9, 0x09FC09FB, 0x09FE09FD, 0x0A0009FF};
	u32 S2[2560] = {0x00020001, 0x00040003, 0x00060005, 0x00080007, 0x000A0009, 0x000C000B, 0x000E000D, 0x0010000F, 0x00120011, 0x00140013, 0x00160015, 0x00180017, 0x001A0019, 0x001C001B, 0x001E001D, 0x0020001F, 0x00220021, 0x00240023, 0x00260025, 0x00280027, 0x002A0029, 0x002C002B, 0x002E002D, 0x0030002F, 0x00320031, 0x00340033, 0x00360035, 0x00380037, 0x003A0039, 0x003C003B, 0x003E003D, 0x0040003F, 0x00420041, 0x00440043, 0x00460045, 0x00480047, 0x004A0049, 0x004C004B, 0x004E004D, 0x0050004F, 0x00520051, 0x00540053, 0x00560055, 0x00580057, 0x005A0059, 0x005C005B, 0x005E005D, 0x0060005F, 0x00620061, 0x00640063, 0x00660065, 0x00680067, 0x006A0069, 0x006C006B, 0x006E006D, 0x0070006F, 0x00720071, 0x00740073, 0x00760075, 0x00780077, 0x007A0079, 0x007C007B, 0x007E007D, 0x0080007F, 0x00820081, 0x00840083, 0x00860085, 0x00880087, 0x008A0089, 0x008C008B, 0x008E008D, 0x0090008F, 0x00920091, 0x00940093, 0x00960095, 0x00980097, 0x009A0099, 0x009C009B, 0x009E009D, 0x00A0009F, 0x00A200A1, 0x00A400A3, 0x00A600A5, 0x00A800A7, 0x00AA00A9, 0x00AC00AB, 0x00AE00AD, 0x00B000AF, 0x00B200B1, 0x00B400B3, 0x00B600B5, 0x00B800B7, 0x00BA00B9, 0x00BC00BB, 0x00BE00BD, 0x00C000BF, 0x00C200C1, 0x00C400C3, 0x00C600C5, 0x00C800C7, 0x00CA00C9, 0x00CC00CB, 0x00CE00CD, 0x00D000CF, 0x00D200D1, 0x00D400D3, 0x00D600D5, 0x00D800D7, 0x00DA00D9, 0x00DC00DB, 0x00DE00DD, 0x00E000DF, 0x00E200E1, 0x00E400E3, 0x00E600E5, 0x00E800E7, 0x00EA00E9, 0x00EC00EB, 0x00EE00ED, 0x00F000EF, 0x00F200F1, 0x00F400F3, 0x00F600F5, 0x00F800F7, 0x00FA00F9, 0x00FC00FB, 0x00FE00FD, 0x010000FF, 0x01020101, 0x01040103, 0x01060105, 0x01080107, 0x010A0109, 0x010C010B, 0x010E010D, 0x0110010F, 0x01120111, 0x01140113, 0x01160115, 0x01180117, 0x011A0119, 0x011C011B, 0x011E011D, 0x0120011F, 0x01220121, 0x01240123, 0x01260125, 0x01280127, 0x012A0129, 0x012C012B, 0x012E012D, 0x0130012F, 0x01320131, 0x01340133, 0x01360135, 0x01380137, 0x013A0139, 0x013C013B, 0x013E013D, 0x0140013F, 0x01420141, 0x01440143, 0x01460145, 0x01480147, 0x014A0149, 0x014C014B, 0x014E014D, 0x0150014F, 0x01520151, 0x01540153, 0x01560155, 0x01580157, 0x015A0159, 0x015C015B, 0x015E015D, 0x0160015F, 0x01620161, 0x01640163, 0x01660165, 0x01680167, 0x016A0169, 0x016C016B, 0x016E016D, 0x0170016F, 0x01720171, 0x01740173, 0x01760175, 0x01780177, 0x017A0179, 0x017C017B, 0x017E017D, 0x0180017F, 0x01820181, 0x01840183, 0x01860185, 0x01880187, 0x018A0189, 0x018C018B, 0x018E018D, 0x0190018F, 0x01920191, 0x01940193, 0x01960195, 0x01980197, 0x019A0199, 0x019C019B, 0x019E019D, 0x01A0019F, 0x01A201A1, 0x01A401A3, 0x01A601A5, 0x01A801A7, 0x01AA01A9, 0x01AC01AB, 0x01AE01AD, 0x01B001AF, 0x01B201B1, 0x01B401B3, 0x01B601B5, 0x01B801B7, 0x01BA01B9, 0x01BC01BB, 0x01BE01BD, 0x01C001BF, 0x01C201C1, 0x01C401C3, 0x01C601C5, 0x01C801C7, 0x01CA01C9, 0x01CC01CB, 0x01CE01CD, 0x01D001CF, 0x01D201D1, 0x01D401D3, 0x01D601D5, 0x01D801D7, 0x01DA01D9, 0x01DC01DB, 0x01DE01DD, 0x01E001DF, 0x01E201E1, 0x01E401E3, 0x01E601E5, 0x01E801E7, 0x01EA01E9, 0x01EC01EB, 0x01EE01ED, 0x01F001EF, 0x01F201F1, 0x01F401F3, 0x01F601F5, 0x01F801F7, 0x01FA01F9, 0x01FC01FB, 0x01FE01FD, 0x020001FF, 0x02020201, 0x02040203, 0x02060205, 0x02080207, 0x020A0209, 0x020C020B, 0x020E020D, 0x0210020F, 0x02120211, 0x02140213, 0x02160215, 0x02180217, 0x021A0219, 0x021C021B, 0x021E021D, 0x0220021F, 0x02220221, 0x02240223, 0x02260225, 0x02280227, 0x022A0229, 0x022C022B, 0x022E022D, 0x0230022F, 0x02320231, 0x02340233, 0x02360235, 0x02380237, 0x023A0239, 0x023C023B, 0x023E023D, 0x0240023F, 0x02420241, 0x02440243, 0x02460245, 0x02480247, 0x024A0249, 0x024C024B, 0x024E024D, 0x0250024F, 0x02520251, 0x02540253, 0x02560255, 0x02580257, 0x025A0259, 0x025C025B, 0x025E025D, 0x0260025F, 0x02620261, 0x02640263, 0x02660265, 0x02680267, 0x026A0269, 0x026C026B, 0x026E026D, 0x0270026F, 0x02720271, 0x02740273, 0x02760275, 0x02780277, 0x027A0279, 0x027C027B, 0x027E027D, 0x0280027F, 0x02820281, 0x02840283, 0x02860285, 0x02880287, 0x028A0289, 0x028C028B, 0x028E028D, 0x0290028F, 0x02920291, 0x02940293, 0x02960295, 0x02980297, 0x029A0299, 0x029C029B, 0x029E029D, 0x02A0029F, 0x02A202A1, 0x02A402A3, 0x02A602A5, 0x02A802A7, 0x02AA02A9, 0x02AC02AB, 0x02AE02AD, 0x02B002AF, 0x02B202B1, 0x02B402B3, 0x02B602B5, 0x02B802B7, 0x02BA02B9, 0x02BC02BB, 0x02BE02BD, 0x02C002BF, 0x02C202C1, 0x02C402C3, 0x02C602C5, 0x02C802C7, 0x02CA02C9, 0x02CC02CB, 0x02CE02CD, 0x02D002CF, 0x02D202D1, 0x02D402D3, 0x02D602D5, 0x02D802D7, 0x02DA02D9, 0x02DC02DB, 0x02DE02DD, 0x02E002DF, 0x02E202E1, 0x02E402E3, 0x02E602E5, 0x02E802E7, 0x02EA02E9, 0x02EC02EB, 0x02EE02ED, 0x02F002EF, 0x02F202F1, 0x02F402F3, 0x02F602F5, 0x02F802F7, 0x02FA02F9, 0x02FC02FB, 0x02FE02FD, 0x030002FF, 0x03020301, 0x03040303, 0x03060305, 0x03080307, 0x030A0309, 0x030C030B, 0x030E030D, 0x0310030F, 0x03120311, 0x03140313, 0x03160315, 0x03180317, 0x031A0319, 0x031C031B, 0x031E031D, 0x0320031F, 0x03220321, 0x03240323, 0x03260325, 0x03280327, 0x032A0329, 0x032C032B, 0x032E032D, 0x0330032F, 0x03320331, 0x03340333, 0x03360335, 0x03380337, 0x033A0339, 0x033C033B, 0x033E033D, 0x0340033F, 0x03420341, 0x03440343, 0x03460345, 0x03480347, 0x034A0349, 0x034C034B, 0x034E034D, 0x0350034F, 0x03520351, 0x03540353, 0x03560355, 0x03580357, 0x035A0359, 0x035C035B, 0x035E035D, 0x0360035F, 0x03620361, 0x03640363, 0x03660365, 0x03680367, 0x036A0369, 0x036C036B, 0x036E036D, 0x0370036F, 0x03720371, 0x03740373, 0x03760375, 0x03780377, 0x037A0379, 0x037C037B, 0x037E037D, 0x0380037F, 0x03820381, 0x03840383, 0x03860385, 0x03880387, 0x038A0389, 0x038C038B, 0x038E038D, 0x0390038F, 0x03920391, 0x03940393, 0x03960395, 0x03980397, 0x039A0399, 0x039C039B, 0x039E039D, 0x03A0039F, 0x03A203A1, 0x03A403A3, 0x03A603A5, 0x03A803A7, 0x03AA03A9, 0x03AC03AB, 0x03AE03AD, 0x03B003AF, 0x03B203B1, 0x03B403B3, 0x03B603B5, 0x03B803B7, 0x03BA03B9, 0x03BC03BB, 0x03BE03BD, 0x03C003BF, 0x03C203C1, 0x03C403C3, 0x03C603C5, 0x03C803C7, 0x03CA03C9, 0x03CC03CB, 0x03CE03CD, 0x03D003CF, 0x03D203D1, 0x03D403D3, 0x03D603D5, 0x03D803D7, 0x03DA03D9, 0x03DC03DB, 0x03DE03DD, 0x03E003DF, 0x03E203E1, 0x03E403E3, 0x03E603E5, 0x03E803E7, 0x03EA03E9, 0x03EC03EB, 0x03EE03ED, 0x03F003EF, 0x03F203F1, 0x03F403F3, 0x03F603F5, 0x03F803F7, 0x03FA03F9, 0x03FC03FB, 0x03FE03FD, 0x040003FF, 0x04020401, 0x04040403, 0x04060405, 0x04080407, 0x040A0409, 0x040C040B, 0x040E040D, 0x0410040F, 0x04120411, 0x04140413, 0x04160415, 0x04180417, 0x041A0419, 0x041C041B, 0x041E041D, 0x0420041F, 0x04220421, 0x04240423, 0x04260425, 0x04280427, 0x042A0429, 0x042C042B, 0x042E042D, 0x0430042F, 0x04320431, 0x04340433, 0x04360435, 0x04380437, 0x043A0439, 0x043C043B, 0x043E043D, 0x0440043F, 0x04420441, 0x04440443, 0x04460445, 0x04480447, 0x044A0449, 0x044C044B, 0x044E044D, 0x0450044F, 0x04520451, 0x04540453, 0x04560455, 0x04580457, 0x045A0459, 0x045C045B, 0x045E045D, 0x0460045F, 0x04620461, 0x04640463, 0x04660465, 0x04680467, 0x046A0469, 0x046C046B, 0x046E046D, 0x0470046F, 0x04720471, 0x04740473, 0x04760475, 0x04780477, 0x047A0479, 0x047C047B, 0x047E047D, 0x0480047F, 0x04820481, 0x04840483, 0x04860485, 0x04880487, 0x048A0489, 0x048C048B, 0x048E048D, 0x0490048F, 0x04920491, 0x04940493, 0x04960495, 0x04980497, 0x049A0499, 0x049C049B, 0x049E049D, 0x04A0049F, 0x04A204A1, 0x04A404A3, 0x04A604A5, 0x04A804A7, 0x04AA04A9, 0x04AC04AB, 0x04AE04AD, 0x04B004AF, 0x04B204B1, 0x04B404B3, 0x04B604B5, 0x04B804B7, 0x04BA04B9, 0x04BC04BB, 0x04BE04BD, 0x04C004BF, 0x04C204C1, 0x04C404C3, 0x04C604C5, 0x04C804C7, 0x04CA04C9, 0x04CC04CB, 0x04CE04CD, 0x04D004CF, 0x04D204D1, 0x04D404D3, 0x04D604D5, 0x04D804D7, 0x04DA04D9, 0x04DC04DB, 0x04DE04DD, 0x04E004DF, 0x04E204E1, 0x04E404E3, 0x04E604E5, 0x04E804E7, 0x04EA04E9, 0x04EC04EB, 0x04EE04ED, 0x04F004EF, 0x04F204F1, 0x04F404F3, 0x04F604F5, 0x04F804F7, 0x04FA04F9, 0x04FC04FB, 0x04FE04FD, 0x050004FF, 0x05020501, 0x05040503, 0x05060505, 0x05080507, 0x050A0509, 0x050C050B, 0x050E050D, 0x0510050F, 0x05120511, 0x05140513, 0x05160515, 0x05180517, 0x051A0519, 0x051C051B, 0x051E051D, 0x0520051F, 0x05220521, 0x05240523, 0x05260525, 0x05280527, 0x052A0529, 0x052C052B, 0x052E052D, 0x0530052F, 0x05320531, 0x05340533, 0x05360535, 0x05380537, 0x053A0539, 0x053C053B, 0x053E053D, 0x0540053F, 0x05420541, 0x05440543, 0x05460545, 0x05480547, 0x054A0549, 0x054C054B, 0x054E054D, 0x0550054F, 0x05520551, 0x05540553, 0x05560555, 0x05580557, 0x055A0559, 0x055C055B, 0x055E055D, 0x0560055F, 0x05620561, 0x05640563, 0x05660565, 0x05680567, 0x056A0569, 0x056C056B, 0x056E056D, 0x0570056F, 0x05720571, 0x05740573, 0x05760575, 0x05780577, 0x057A0579, 0x057C057B, 0x057E057D, 0x0580057F, 0x05820581, 0x05840583, 0x05860585, 0x05880587, 0x058A0589, 0x058C058B, 0x058E058D, 0x0590058F, 0x05920591, 0x05940593, 0x05960595, 0x05980597, 0x059A0599, 0x059C059B, 0x059E059D, 0x05A0059F, 0x05A205A1, 0x05A405A3, 0x05A605A5, 0x05A805A7, 0x05AA05A9, 0x05AC05AB, 0x05AE05AD, 0x05B005AF, 0x05B205B1, 0x05B405B3, 0x05B605B5, 0x05B805B7, 0x05BA05B9, 0x05BC05BB, 0x05BE05BD, 0x05C005BF, 0x05C205C1, 0x05C405C3, 0x05C605C5, 0x05C805C7, 0x05CA05C9, 0x05CC05CB, 0x05CE05CD, 0x05D005CF, 0x05D205D1, 0x05D405D3, 0x05D605D5, 0x05D805D7, 0x05DA05D9, 0x05DC05DB, 0x05DE05DD, 0x05E005DF, 0x05E205E1, 0x05E405E3, 0x05E605E5, 0x05E805E7, 0x05EA05E9, 0x05EC05EB, 0x05EE05ED, 0x05F005EF, 0x05F205F1, 0x05F405F3, 0x05F605F5, 0x05F805F7, 0x05FA05F9, 0x05FC05FB, 0x05FE05FD, 0x060005FF, 0x06020601, 0x06040603, 0x06060605, 0x06080607, 0x060A0609, 0x060C060B, 0x060E060D, 0x0610060F, 0x06120611, 0x06140613, 0x06160615, 0x06180617, 0x061A0619, 0x061C061B, 0x061E061D, 0x0620061F, 0x06220621, 0x06240623, 0x06260625, 0x06280627, 0x062A0629, 0x062C062B, 0x062E062D, 0x0630062F, 0x06320631, 0x06340633, 0x06360635, 0x06380637, 0x063A0639, 0x063C063B, 0x063E063D, 0x0640063F, 0x06420641, 0x06440643, 0x06460645, 0x06480647, 0x064A0649, 0x064C064B, 0x064E064D, 0x0650064F, 0x06520651, 0x06540653, 0x06560655, 0x06580657, 0x065A0659, 0x065C065B, 0x065E065D, 0x0660065F, 0x06620661, 0x06640663, 0x06660665, 0x06680667, 0x066A0669, 0x066C066B, 0x066E066D, 0x0670066F, 0x06720671, 0x06740673, 0x06760675, 0x06780677, 0x067A0679, 0x067C067B, 0x067E067D, 0x0680067F, 0x06820681, 0x06840683, 0x06860685, 0x06880687, 0x068A0689, 0x068C068B, 0x068E068D, 0x0690068F, 0x06920691, 0x06940693, 0x06960695, 0x06980697, 0x069A0699, 0x069C069B, 0x069E069D, 0x06A0069F, 0x06A206A1, 0x06A406A3, 0x06A606A5, 0x06A806A7, 0x06AA06A9, 0x06AC06AB, 0x06AE06AD, 0x06B006AF, 0x06B206B1, 0x06B406B3, 0x06B606B5, 0x06B806B7, 0x06BA06B9, 0x06BC06BB, 0x06BE06BD, 0x06C006BF, 0x06C206C1, 0x06C406C3, 0x06C606C5, 0x06C806C7, 0x06CA06C9, 0x06CC06CB, 0x06CE06CD, 0x06D006CF, 0x06D206D1, 0x06D406D3, 0x06D606D5, 0x06D806D7, 0x06DA06D9, 0x06DC06DB, 0x06DE06DD, 0x06E006DF, 0x06E206E1, 0x06E406E3, 0x06E606E5, 0x06E806E7, 0x06EA06E9, 0x06EC06EB, 0x06EE06ED, 0x06F006EF, 0x06F206F1, 0x06F406F3, 0x06F606F5, 0x06F806F7, 0x06FA06F9, 0x06FC06FB, 0x06FE06FD, 0x070006FF, 0x07020701, 0x07040703, 0x07060705, 0x07080707, 0x070A0709, 0x070C070B, 0x070E070D, 0x0710070F, 0x07120711, 0x07140713, 0x07160715, 0x07180717, 0x071A0719, 0x071C071B, 0x071E071D, 0x0720071F, 0x07220721, 0x07240723, 0x07260725, 0x07280727, 0x072A0729, 0x072C072B, 0x072E072D, 0x0730072F, 0x07320731, 0x07340733, 0x07360735, 0x07380737, 0x073A0739, 0x073C073B, 0x073E073D, 0x0740073F, 0x07420741, 0x07440743, 0x07460745, 0x07480747, 0x074A0749, 0x074C074B, 0x074E074D, 0x0750074F, 0x07520751, 0x07540753, 0x07560755, 0x07580757, 0x075A0759, 0x075C075B, 0x075E075D, 0x0760075F, 0x07620761, 0x07640763, 0x07660765, 0x07680767, 0x076A0769, 0x076C076B, 0x076E076D, 0x0770076F, 0x07720771, 0x07740773, 0x07760775, 0x07780777, 0x077A0779, 0x077C077B, 0x077E077D, 0x0780077F, 0x07820781, 0x07840783, 0x07860785, 0x07880787, 0x078A0789, 0x078C078B, 0x078E078D, 0x0790078F, 0x07920791, 0x07940793, 0x07960795, 0x07980797, 0x079A0799, 0x079C079B, 0x079E079D, 0x07A0079F, 0x07A207A1, 0x07A407A3, 0x07A607A5, 0x07A807A7, 0x07AA07A9, 0x07AC07AB, 0x07AE07AD, 0x07B007AF, 0x07B207B1, 0x07B407B3, 0x07B607B5, 0x07B807B7, 0x07BA07B9, 0x07BC07BB, 0x07BE07BD, 0x07C007BF, 0x07C207C1, 0x07C407C3, 0x07C607C5, 0x07C807C7, 0x07CA07C9, 0x07CC07CB, 0x07CE07CD, 0x07D007CF,
				   0x07D207D1, 0x07D407D3, 0x07D607D5, 0x07D807D7, 0x07DA07D9, 0x07DC07DB, 0x07DE07DD, 0x07E007DF, 0x07E207E1, 0x07E407E3, 0x07E607E5, 0x07E807E7, 0x07EA07E9, 0x07EC07EB, 0x07EE07ED, 0x07F007EF, 0x07F207F1, 0x07F407F3, 0x07F607F5, 0x07F807F7, 0x07FA07F9, 0x07FC07FB, 0x07FE07FD, 0x080007FF, 0x08020801, 0x08040803, 0x08060805, 0x08080807, 0x080A0809, 0x080C080B, 0x080E080D, 0x0810080F, 0x08120811, 0x08140813, 0x08160815, 0x08180817, 0x081A0819, 0x081C081B, 0x081E081D, 0x0820081F, 0x08220821, 0x08240823, 0x08260825, 0x08280827, 0x082A0829, 0x082C082B, 0x082E082D, 0x0830082F, 0x08320831, 0x08340833, 0x08360835, 0x08380837, 0x083A0839, 0x083C083B, 0x083E083D, 0x0840083F, 0x08420841, 0x08440843, 0x08460845, 0x08480847, 0x084A0849, 0x084C084B, 0x084E084D, 0x0850084F, 0x08520851, 0x08540853, 0x08560855, 0x08580857, 0x085A0859, 0x085C085B, 0x085E085D, 0x0860085F, 0x08620861, 0x08640863, 0x08660865, 0x08680867, 0x086A0869, 0x086C086B, 0x086E086D, 0x0870086F, 0x08720871, 0x08740873, 0x08760875, 0x08780877, 0x087A0879, 0x087C087B, 0x087E087D, 0x0880087F, 0x08820881, 0x08840883, 0x08860885, 0x08880887, 0x088A0889, 0x088C088B, 0x088E088D, 0x0890088F, 0x08920891, 0x08940893, 0x08960895, 0x08980897, 0x089A0899, 0x089C089B, 0x089E089D, 0x08A0089F, 0x08A208A1, 0x08A408A3, 0x08A608A5, 0x08A808A7, 0x08AA08A9, 0x08AC08AB, 0x08AE08AD, 0x08B008AF, 0x08B208B1, 0x08B408B3, 0x08B608B5, 0x08B808B7, 0x08BA08B9, 0x08BC08BB, 0x08BE08BD, 0x08C008BF, 0x08C208C1, 0x08C408C3, 0x08C608C5, 0x08C808C7, 0x08CA08C9, 0x08CC08CB, 0x08CE08CD, 0x08D008CF, 0x08D208D1, 0x08D408D3, 0x08D608D5, 0x08D808D7, 0x08DA08D9, 0x08DC08DB, 0x08DE08DD, 0x08E008DF, 0x08E208E1, 0x08E408E3, 0x08E608E5, 0x08E808E7, 0x08EA08E9, 0x08EC08EB, 0x08EE08ED, 0x08F008EF, 0x08F208F1, 0x08F408F3, 0x08F608F5, 0x08F808F7, 0x08FA08F9, 0x08FC08FB, 0x08FE08FD, 0x090008FF, 0x09020901, 0x09040903, 0x09060905, 0x09080907, 0x090A0909, 0x090C090B, 0x090E090D, 0x0910090F, 0x09120911, 0x09140913, 0x09160915, 0x09180917, 0x091A0919, 0x091C091B, 0x091E091D, 0x0920091F, 0x09220921, 0x09240923, 0x09260925, 0x09280927, 0x092A0929, 0x092C092B, 0x092E092D, 0x0930092F, 0x09320931, 0x09340933, 0x09360935, 0x09380937, 0x093A0939, 0x093C093B, 0x093E093D, 0x0940093F, 0x09420941, 0x09440943, 0x09460945, 0x09480947, 0x094A0949, 0x094C094B, 0x094E094D, 0x0950094F, 0x09520951, 0x09540953, 0x09560955, 0x09580957, 0x095A0959, 0x095C095B, 0x095E095D, 0x0960095F, 0x09620961, 0x09640963, 0x09660965, 0x09680967, 0x096A0969, 0x096C096B, 0x096E096D, 0x0970096F, 0x09720971, 0x09740973, 0x09760975, 0x09780977, 0x097A0979, 0x097C097B, 0x097E097D, 0x0980097F, 0x09820981, 0x09840983, 0x09860985, 0x09880987, 0x098A0989, 0x098C098B, 0x098E098D, 0x0990098F, 0x09920991, 0x09940993, 0x09960995, 0x09980997, 0x099A0999, 0x099C099B, 0x099E099D, 0x09A0099F, 0x09A209A1, 0x09A409A3, 0x09A609A5, 0x09A809A7, 0x09AA09A9, 0x09AC09AB, 0x09AE09AD, 0x09B009AF, 0x09B209B1, 0x09B409B3, 0x09B609B5, 0x09B809B7, 0x09BA09B9, 0x09BC09BB, 0x09BE09BD, 0x09C009BF, 0x09C209C1, 0x09C409C3, 0x09C609C5, 0x09C809C7, 0x09CA09C9, 0x09CC09CB, 0x09CE09CD, 0x09D009CF, 0x09D209D1, 0x09D409D3, 0x09D609D5, 0x09D809D7, 0x09DA09D9, 0x09DC09DB, 0x09DE09DD, 0x09E009DF, 0x09E209E1, 0x09E409E3, 0x09E609E5, 0x09E809E7, 0x09EA09E9, 0x09EC09EB, 0x09EE09ED, 0x09F009EF, 0x09F209F1, 0x09F409F3, 0x09F609F5, 0x09F809F7, 0x09FA09F9, 0x09FC09FB, 0x09FE09FD, 0x0A0009FF, 0x0A020A01, 0x0A040A03, 0x0A060A05, 0x0A080A07, 0x0A0A0A09, 0x0A0C0A0B, 0x0A0E0A0D, 0x0A100A0F, 0x0A120A11, 0x0A140A13, 0x0A160A15, 0x0A180A17, 0x0A1A0A19, 0x0A1C0A1B, 0x0A1E0A1D, 0x0A200A1F, 0x0A220A21, 0x0A240A23, 0x0A260A25, 0x0A280A27, 0x0A2A0A29, 0x0A2C0A2B, 0x0A2E0A2D, 0x0A300A2F, 0x0A320A31, 0x0A340A33, 0x0A360A35, 0x0A380A37, 0x0A3A0A39, 0x0A3C0A3B, 0x0A3E0A3D, 0x0A400A3F, 0x0A420A41, 0x0A440A43, 0x0A460A45, 0x0A480A47, 0x0A4A0A49, 0x0A4C0A4B, 0x0A4E0A4D, 0x0A500A4F, 0x0A520A51, 0x0A540A53, 0x0A560A55, 0x0A580A57, 0x0A5A0A59, 0x0A5C0A5B, 0x0A5E0A5D, 0x0A600A5F, 0x0A620A61, 0x0A640A63, 0x0A660A65, 0x0A680A67, 0x0A6A0A69, 0x0A6C0A6B, 0x0A6E0A6D, 0x0A700A6F, 0x0A720A71, 0x0A740A73, 0x0A760A75, 0x0A780A77, 0x0A7A0A79, 0x0A7C0A7B, 0x0A7E0A7D, 0x0A800A7F, 0x0A820A81, 0x0A840A83, 0x0A860A85, 0x0A880A87, 0x0A8A0A89, 0x0A8C0A8B, 0x0A8E0A8D, 0x0A900A8F, 0x0A920A91, 0x0A940A93, 0x0A960A95, 0x0A980A97, 0x0A9A0A99, 0x0A9C0A9B, 0x0A9E0A9D, 0x0AA00A9F, 0x0AA20AA1, 0x0AA40AA3, 0x0AA60AA5, 0x0AA80AA7, 0x0AAA0AA9, 0x0AAC0AAB, 0x0AAE0AAD, 0x0AB00AAF, 0x0AB20AB1, 0x0AB40AB3, 0x0AB60AB5, 0x0AB80AB7, 0x0ABA0AB9, 0x0ABC0ABB, 0x0ABE0ABD, 0x0AC00ABF, 0x0AC20AC1, 0x0AC40AC3, 0x0AC60AC5, 0x0AC80AC7, 0x0ACA0AC9, 0x0ACC0ACB, 0x0ACE0ACD, 0x0AD00ACF, 0x0AD20AD1, 0x0AD40AD3, 0x0AD60AD5, 0x0AD80AD7, 0x0ADA0AD9, 0x0ADC0ADB, 0x0ADE0ADD, 0x0AE00ADF, 0x0AE20AE1, 0x0AE40AE3, 0x0AE60AE5, 0x0AE80AE7, 0x0AEA0AE9, 0x0AEC0AEB, 0x0AEE0AED, 0x0AF00AEF, 0x0AF20AF1, 0x0AF40AF3, 0x0AF60AF5, 0x0AF80AF7, 0x0AFA0AF9, 0x0AFC0AFB, 0x0AFE0AFD, 0x0B000AFF, 0x0B020B01, 0x0B040B03, 0x0B060B05, 0x0B080B07, 0x0B0A0B09, 0x0B0C0B0B, 0x0B0E0B0D, 0x0B100B0F, 0x0B120B11, 0x0B140B13, 0x0B160B15, 0x0B180B17, 0x0B1A0B19, 0x0B1C0B1B, 0x0B1E0B1D, 0x0B200B1F, 0x0B220B21, 0x0B240B23, 0x0B260B25, 0x0B280B27, 0x0B2A0B29, 0x0B2C0B2B, 0x0B2E0B2D, 0x0B300B2F, 0x0B320B31, 0x0B340B33, 0x0B360B35, 0x0B380B37, 0x0B3A0B39, 0x0B3C0B3B, 0x0B3E0B3D, 0x0B400B3F, 0x0B420B41, 0x0B440B43, 0x0B460B45, 0x0B480B47, 0x0B4A0B49, 0x0B4C0B4B, 0x0B4E0B4D, 0x0B500B4F, 0x0B520B51, 0x0B540B53, 0x0B560B55, 0x0B580B57, 0x0B5A0B59, 0x0B5C0B5B, 0x0B5E0B5D, 0x0B600B5F, 0x0B620B61, 0x0B640B63, 0x0B660B65, 0x0B680B67, 0x0B6A0B69, 0x0B6C0B6B, 0x0B6E0B6D, 0x0B700B6F, 0x0B720B71, 0x0B740B73, 0x0B760B75, 0x0B780B77, 0x0B7A0B79, 0x0B7C0B7B, 0x0B7E0B7D, 0x0B800B7F, 0x0B820B81, 0x0B840B83, 0x0B860B85, 0x0B880B87, 0x0B8A0B89, 0x0B8C0B8B, 0x0B8E0B8D, 0x0B900B8F, 0x0B920B91, 0x0B940B93, 0x0B960B95, 0x0B980B97, 0x0B9A0B99, 0x0B9C0B9B, 0x0B9E0B9D, 0x0BA00B9F, 0x0BA20BA1, 0x0BA40BA3, 0x0BA60BA5, 0x0BA80BA7, 0x0BAA0BA9, 0x0BAC0BAB, 0x0BAE0BAD, 0x0BB00BAF, 0x0BB20BB1, 0x0BB40BB3, 0x0BB60BB5, 0x0BB80BB7, 0x0BBA0BB9, 0x0BBC0BBB, 0x0BBE0BBD, 0x0BC00BBF, 0x0BC20BC1, 0x0BC40BC3, 0x0BC60BC5, 0x0BC80BC7, 0x0BCA0BC9, 0x0BCC0BCB, 0x0BCE0BCD, 0x0BD00BCF, 0x0BD20BD1, 0x0BD40BD3, 0x0BD60BD5, 0x0BD80BD7, 0x0BDA0BD9, 0x0BDC0BDB, 0x0BDE0BDD, 0x0BE00BDF, 0x0BE20BE1, 0x0BE40BE3, 0x0BE60BE5, 0x0BE80BE7, 0x0BEA0BE9, 0x0BEC0BEB, 0x0BEE0BED, 0x0BF00BEF, 0x0BF20BF1, 0x0BF40BF3, 0x0BF60BF5, 0x0BF80BF7, 0x0BFA0BF9, 0x0BFC0BFB, 0x0BFE0BFD, 0x0C000BFF, 0x0C020C01, 0x0C040C03, 0x0C060C05, 0x0C080C07, 0x0C0A0C09, 0x0C0C0C0B, 0x0C0E0C0D, 0x0C100C0F, 0x0C120C11, 0x0C140C13, 0x0C160C15, 0x0C180C17, 0x0C1A0C19, 0x0C1C0C1B, 0x0C1E0C1D, 0x0C200C1F, 0x0C220C21, 0x0C240C23, 0x0C260C25, 0x0C280C27, 0x0C2A0C29, 0x0C2C0C2B, 0x0C2E0C2D, 0x0C300C2F, 0x0C320C31, 0x0C340C33, 0x0C360C35, 0x0C380C37, 0x0C3A0C39, 0x0C3C0C3B, 0x0C3E0C3D, 0x0C400C3F, 0x0C420C41, 0x0C440C43, 0x0C460C45, 0x0C480C47, 0x0C4A0C49, 0x0C4C0C4B, 0x0C4E0C4D, 0x0C500C4F, 0x0C520C51, 0x0C540C53, 0x0C560C55, 0x0C580C57, 0x0C5A0C59, 0x0C5C0C5B, 0x0C5E0C5D, 0x0C600C5F, 0x0C620C61, 0x0C640C63, 0x0C660C65, 0x0C680C67, 0x0C6A0C69, 0x0C6C0C6B, 0x0C6E0C6D, 0x0C700C6F, 0x0C720C71, 0x0C740C73, 0x0C760C75, 0x0C780C77, 0x0C7A0C79, 0x0C7C0C7B, 0x0C7E0C7D, 0x0C800C7F, 0x0C820C81, 0x0C840C83, 0x0C860C85, 0x0C880C87, 0x0C8A0C89, 0x0C8C0C8B, 0x0C8E0C8D, 0x0C900C8F, 0x0C920C91, 0x0C940C93, 0x0C960C95, 0x0C980C97, 0x0C9A0C99, 0x0C9C0C9B, 0x0C9E0C9D, 0x0CA00C9F, 0x0CA20CA1, 0x0CA40CA3, 0x0CA60CA5, 0x0CA80CA7, 0x0CAA0CA9, 0x0CAC0CAB, 0x0CAE0CAD, 0x0CB00CAF, 0x0CB20CB1, 0x0CB40CB3, 0x0CB60CB5, 0x0CB80CB7, 0x0CBA0CB9, 0x0CBC0CBB, 0x0CBE0CBD, 0x0CC00CBF, 0x0CC20CC1, 0x0CC40CC3, 0x0CC60CC5, 0x0CC80CC7, 0x0CCA0CC9, 0x0CCC0CCB, 0x0CCE0CCD, 0x0CD00CCF, 0x0CD20CD1, 0x0CD40CD3, 0x0CD60CD5, 0x0CD80CD7, 0x0CDA0CD9, 0x0CDC0CDB, 0x0CDE0CDD, 0x0CE00CDF, 0x0CE20CE1, 0x0CE40CE3, 0x0CE60CE5, 0x0CE80CE7, 0x0CEA0CE9, 0x0CEC0CEB, 0x0CEE0CED, 0x0CF00CEF, 0x0CF20CF1, 0x0CF40CF3, 0x0CF60CF5, 0x0CF80CF7, 0x0CFA0CF9, 0x0CFC0CFB, 0x0CFE0CFD, 0x0D000CFF, 0x0D020D01, 0x0D040D03, 0x0D060D05, 0x0D080D07, 0x0D0A0D09, 0x0D0C0D0B, 0x0D0E0D0D, 0x0D100D0F, 0x0D120D11, 0x0D140D13, 0x0D160D15, 0x0D180D17, 0x0D1A0D19, 0x0D1C0D1B, 0x0D1E0D1D, 0x0D200D1F, 0x0D220D21, 0x0D240D23, 0x0D260D25, 0x0D280D27, 0x0D2A0D29, 0x0D2C0D2B, 0x0D2E0D2D, 0x0D300D2F, 0x0D320D31, 0x0D340D33, 0x0D360D35, 0x0D380D37, 0x0D3A0D39, 0x0D3C0D3B, 0x0D3E0D3D, 0x0D400D3F, 0x0D420D41, 0x0D440D43, 0x0D460D45, 0x0D480D47, 0x0D4A0D49, 0x0D4C0D4B, 0x0D4E0D4D, 0x0D500D4F, 0x0D520D51, 0x0D540D53, 0x0D560D55, 0x0D580D57, 0x0D5A0D59, 0x0D5C0D5B, 0x0D5E0D5D, 0x0D600D5F, 0x0D620D61, 0x0D640D63, 0x0D660D65, 0x0D680D67, 0x0D6A0D69, 0x0D6C0D6B, 0x0D6E0D6D, 0x0D700D6F, 0x0D720D71, 0x0D740D73, 0x0D760D75, 0x0D780D77, 0x0D7A0D79, 0x0D7C0D7B, 0x0D7E0D7D, 0x0D800D7F, 0x0D820D81, 0x0D840D83, 0x0D860D85, 0x0D880D87, 0x0D8A0D89, 0x0D8C0D8B, 0x0D8E0D8D, 0x0D900D8F, 0x0D920D91, 0x0D940D93, 0x0D960D95, 0x0D980D97, 0x0D9A0D99, 0x0D9C0D9B, 0x0D9E0D9D, 0x0DA00D9F, 0x0DA20DA1, 0x0DA40DA3, 0x0DA60DA5, 0x0DA80DA7, 0x0DAA0DA9, 0x0DAC0DAB, 0x0DAE0DAD, 0x0DB00DAF, 0x0DB20DB1, 0x0DB40DB3, 0x0DB60DB5, 0x0DB80DB7, 0x0DBA0DB9, 0x0DBC0DBB, 0x0DBE0DBD, 0x0DC00DBF, 0x0DC20DC1, 0x0DC40DC3, 0x0DC60DC5, 0x0DC80DC7, 0x0DCA0DC9, 0x0DCC0DCB, 0x0DCE0DCD, 0x0DD00DCF, 0x0DD20DD1, 0x0DD40DD3, 0x0DD60DD5, 0x0DD80DD7, 0x0DDA0DD9, 0x0DDC0DDB, 0x0DDE0DDD, 0x0DE00DDF, 0x0DE20DE1, 0x0DE40DE3, 0x0DE60DE5, 0x0DE80DE7, 0x0DEA0DE9, 0x0DEC0DEB, 0x0DEE0DED, 0x0DF00DEF, 0x0DF20DF1, 0x0DF40DF3, 0x0DF60DF5, 0x0DF80DF7, 0x0DFA0DF9, 0x0DFC0DFB, 0x0DFE0DFD, 0x0E000DFF, 0x0E020E01, 0x0E040E03, 0x0E060E05, 0x0E080E07, 0x0E0A0E09, 0x0E0C0E0B, 0x0E0E0E0D, 0x0E100E0F, 0x0E120E11, 0x0E140E13, 0x0E160E15, 0x0E180E17, 0x0E1A0E19, 0x0E1C0E1B, 0x0E1E0E1D, 0x0E200E1F, 0x0E220E21, 0x0E240E23, 0x0E260E25, 0x0E280E27, 0x0E2A0E29, 0x0E2C0E2B, 0x0E2E0E2D, 0x0E300E2F, 0x0E320E31, 0x0E340E33, 0x0E360E35, 0x0E380E37, 0x0E3A0E39, 0x0E3C0E3B, 0x0E3E0E3D, 0x0E400E3F, 0x0E420E41, 0x0E440E43, 0x0E460E45, 0x0E480E47, 0x0E4A0E49, 0x0E4C0E4B, 0x0E4E0E4D, 0x0E500E4F, 0x0E520E51, 0x0E540E53, 0x0E560E55, 0x0E580E57, 0x0E5A0E59, 0x0E5C0E5B, 0x0E5E0E5D, 0x0E600E5F, 0x0E620E61, 0x0E640E63, 0x0E660E65, 0x0E680E67, 0x0E6A0E69, 0x0E6C0E6B, 0x0E6E0E6D, 0x0E700E6F, 0x0E720E71, 0x0E740E73, 0x0E760E75, 0x0E780E77, 0x0E7A0E79, 0x0E7C0E7B, 0x0E7E0E7D, 0x0E800E7F, 0x0E820E81, 0x0E840E83, 0x0E860E85, 0x0E880E87, 0x0E8A0E89, 0x0E8C0E8B, 0x0E8E0E8D, 0x0E900E8F, 0x0E920E91, 0x0E940E93, 0x0E960E95, 0x0E980E97, 0x0E9A0E99, 0x0E9C0E9B, 0x0E9E0E9D, 0x0EA00E9F, 0x0EA20EA1, 0x0EA40EA3, 0x0EA60EA5, 0x0EA80EA7, 0x0EAA0EA9, 0x0EAC0EAB, 0x0EAE0EAD, 0x0EB00EAF, 0x0EB20EB1, 0x0EB40EB3, 0x0EB60EB5, 0x0EB80EB7, 0x0EBA0EB9, 0x0EBC0EBB, 0x0EBE0EBD, 0x0EC00EBF, 0x0EC20EC1, 0x0EC40EC3, 0x0EC60EC5, 0x0EC80EC7, 0x0ECA0EC9, 0x0ECC0ECB, 0x0ECE0ECD, 0x0ED00ECF, 0x0ED20ED1, 0x0ED40ED3, 0x0ED60ED5, 0x0ED80ED7, 0x0EDA0ED9, 0x0EDC0EDB, 0x0EDE0EDD, 0x0EE00EDF, 0x0EE20EE1, 0x0EE40EE3, 0x0EE60EE5, 0x0EE80EE7, 0x0EEA0EE9, 0x0EEC0EEB, 0x0EEE0EED, 0x0EF00EEF, 0x0EF20EF1, 0x0EF40EF3, 0x0EF60EF5, 0x0EF80EF7, 0x0EFA0EF9, 0x0EFC0EFB, 0x0EFE0EFD, 0x0F000EFF, 0x0F020F01, 0x0F040F03, 0x0F060F05, 0x0F080F07, 0x0F0A0F09, 0x0F0C0F0B, 0x0F0E0F0D, 0x0F100F0F, 0x0F120F11, 0x0F140F13, 0x0F160F15, 0x0F180F17, 0x0F1A0F19, 0x0F1C0F1B, 0x0F1E0F1D, 0x0F200F1F, 0x0F220F21, 0x0F240F23, 0x0F260F25, 0x0F280F27, 0x0F2A0F29, 0x0F2C0F2B, 0x0F2E0F2D, 0x0F300F2F, 0x0F320F31, 0x0F340F33, 0x0F360F35, 0x0F380F37, 0x0F3A0F39, 0x0F3C0F3B, 0x0F3E0F3D, 0x0F400F3F, 0x0F420F41, 0x0F440F43, 0x0F460F45, 0x0F480F47, 0x0F4A0F49, 0x0F4C0F4B, 0x0F4E0F4D, 0x0F500F4F, 0x0F520F51, 0x0F540F53, 0x0F560F55, 0x0F580F57, 0x0F5A0F59, 0x0F5C0F5B, 0x0F5E0F5D, 0x0F600F5F, 0x0F620F61, 0x0F640F63, 0x0F660F65, 0x0F680F67, 0x0F6A0F69, 0x0F6C0F6B, 0x0F6E0F6D, 0x0F700F6F, 0x0F720F71, 0x0F740F73, 0x0F760F75, 0x0F780F77, 0x0F7A0F79, 0x0F7C0F7B, 0x0F7E0F7D, 0x0F800F7F, 0x0F820F81, 0x0F840F83, 0x0F860F85, 0x0F880F87, 0x0F8A0F89, 0x0F8C0F8B, 0x0F8E0F8D, 0x0F900F8F, 0x0F920F91, 0x0F940F93, 0x0F960F95, 0x0F980F97, 0x0F9A0F99, 0x0F9C0F9B, 0x0F9E0F9D, 0x0FA00F9F,
				   0x0FA20FA1, 0x0FA40FA3, 0x0FA60FA5, 0x0FA80FA7, 0x0FAA0FA9, 0x0FAC0FAB, 0x0FAE0FAD, 0x0FB00FAF, 0x0FB20FB1, 0x0FB40FB3, 0x0FB60FB5, 0x0FB80FB7, 0x0FBA0FB9, 0x0FBC0FBB, 0x0FBE0FBD, 0x0FC00FBF, 0x0FC20FC1, 0x0FC40FC3, 0x0FC60FC5, 0x0FC80FC7, 0x0FCA0FC9, 0x0FCC0FCB, 0x0FCE0FCD, 0x0FD00FCF, 0x0FD20FD1, 0x0FD40FD3, 0x0FD60FD5, 0x0FD80FD7, 0x0FDA0FD9, 0x0FDC0FDB, 0x0FDE0FDD, 0x0FE00FDF, 0x0FE20FE1, 0x0FE40FE3, 0x0FE60FE5, 0x0FE80FE7, 0x0FEA0FE9, 0x0FEC0FEB, 0x0FEE0FED, 0x0FF00FEF, 0x0FF20FF1, 0x0FF40FF3, 0x0FF60FF5, 0x0FF80FF7, 0x0FFA0FF9, 0x0FFC0FFB, 0x0FFE0FFD, 0x10000FFF, 0x10021001, 0x10041003, 0x10061005, 0x10081007, 0x100A1009, 0x100C100B, 0x100E100D, 0x1010100F, 0x10121011, 0x10141013, 0x10161015, 0x10181017, 0x101A1019, 0x101C101B, 0x101E101D, 0x1020101F, 0x10221021, 0x10241023, 0x10261025, 0x10281027, 0x102A1029, 0x102C102B, 0x102E102D, 0x1030102F, 0x10321031, 0x10341033, 0x10361035, 0x10381037, 0x103A1039, 0x103C103B, 0x103E103D, 0x1040103F, 0x10421041, 0x10441043, 0x10461045, 0x10481047, 0x104A1049, 0x104C104B, 0x104E104D, 0x1050104F, 0x10521051, 0x10541053, 0x10561055, 0x10581057, 0x105A1059, 0x105C105B, 0x105E105D, 0x1060105F, 0x10621061, 0x10641063, 0x10661065, 0x10681067, 0x106A1069, 0x106C106B, 0x106E106D, 0x1070106F, 0x10721071, 0x10741073, 0x10761075, 0x10781077, 0x107A1079, 0x107C107B, 0x107E107D, 0x1080107F, 0x10821081, 0x10841083, 0x10861085, 0x10881087, 0x108A1089, 0x108C108B, 0x108E108D, 0x1090108F, 0x10921091, 0x10941093, 0x10961095, 0x10981097, 0x109A1099, 0x109C109B, 0x109E109D, 0x10A0109F, 0x10A210A1, 0x10A410A3, 0x10A610A5, 0x10A810A7, 0x10AA10A9, 0x10AC10AB, 0x10AE10AD, 0x10B010AF, 0x10B210B1, 0x10B410B3, 0x10B610B5, 0x10B810B7, 0x10BA10B9, 0x10BC10BB, 0x10BE10BD, 0x10C010BF, 0x10C210C1, 0x10C410C3, 0x10C610C5, 0x10C810C7, 0x10CA10C9, 0x10CC10CB, 0x10CE10CD, 0x10D010CF, 0x10D210D1, 0x10D410D3, 0x10D610D5, 0x10D810D7, 0x10DA10D9, 0x10DC10DB, 0x10DE10DD, 0x10E010DF, 0x10E210E1, 0x10E410E3, 0x10E610E5, 0x10E810E7, 0x10EA10E9, 0x10EC10EB, 0x10EE10ED, 0x10F010EF, 0x10F210F1, 0x10F410F3, 0x10F610F5, 0x10F810F7, 0x10FA10F9, 0x10FC10FB, 0x10FE10FD, 0x110010FF, 0x11021101, 0x11041103, 0x11061105, 0x11081107, 0x110A1109, 0x110C110B, 0x110E110D, 0x1110110F, 0x11121111, 0x11141113, 0x11161115, 0x11181117, 0x111A1119, 0x111C111B, 0x111E111D, 0x1120111F, 0x11221121, 0x11241123, 0x11261125, 0x11281127, 0x112A1129, 0x112C112B, 0x112E112D, 0x1130112F, 0x11321131, 0x11341133, 0x11361135, 0x11381137, 0x113A1139, 0x113C113B, 0x113E113D, 0x1140113F, 0x11421141, 0x11441143, 0x11461145, 0x11481147, 0x114A1149, 0x114C114B, 0x114E114D, 0x1150114F, 0x11521151, 0x11541153, 0x11561155, 0x11581157, 0x115A1159, 0x115C115B, 0x115E115D, 0x1160115F, 0x11621161, 0x11641163, 0x11661165, 0x11681167, 0x116A1169, 0x116C116B, 0x116E116D, 0x1170116F, 0x11721171, 0x11741173, 0x11761175, 0x11781177, 0x117A1179, 0x117C117B, 0x117E117D, 0x1180117F, 0x11821181, 0x11841183, 0x11861185, 0x11881187, 0x118A1189, 0x118C118B, 0x118E118D, 0x1190118F, 0x11921191, 0x11941193, 0x11961195, 0x11981197, 0x119A1199, 0x119C119B, 0x119E119D, 0x11A0119F, 0x11A211A1, 0x11A411A3, 0x11A611A5, 0x11A811A7, 0x11AA11A9, 0x11AC11AB, 0x11AE11AD, 0x11B011AF, 0x11B211B1, 0x11B411B3, 0x11B611B5, 0x11B811B7, 0x11BA11B9, 0x11BC11BB, 0x11BE11BD, 0x11C011BF, 0x11C211C1, 0x11C411C3, 0x11C611C5, 0x11C811C7, 0x11CA11C9, 0x11CC11CB, 0x11CE11CD, 0x11D011CF, 0x11D211D1, 0x11D411D3, 0x11D611D5, 0x11D811D7, 0x11DA11D9, 0x11DC11DB, 0x11DE11DD, 0x11E011DF, 0x11E211E1, 0x11E411E3, 0x11E611E5, 0x11E811E7, 0x11EA11E9, 0x11EC11EB, 0x11EE11ED, 0x11F011EF, 0x11F211F1, 0x11F411F3, 0x11F611F5, 0x11F811F7, 0x11FA11F9, 0x11FC11FB, 0x11FE11FD, 0x120011FF, 0x12021201, 0x12041203, 0x12061205, 0x12081207, 0x120A1209, 0x120C120B, 0x120E120D, 0x1210120F, 0x12121211, 0x12141213, 0x12161215, 0x12181217, 0x121A1219, 0x121C121B, 0x121E121D, 0x1220121F, 0x12221221, 0x12241223, 0x12261225, 0x12281227, 0x122A1229, 0x122C122B, 0x122E122D, 0x1230122F, 0x12321231, 0x12341233, 0x12361235, 0x12381237, 0x123A1239, 0x123C123B, 0x123E123D, 0x1240123F, 0x12421241, 0x12441243, 0x12461245, 0x12481247, 0x124A1249, 0x124C124B, 0x124E124D, 0x1250124F, 0x12521251, 0x12541253, 0x12561255, 0x12581257, 0x125A1259, 0x125C125B, 0x125E125D, 0x1260125F, 0x12621261, 0x12641263, 0x12661265, 0x12681267, 0x126A1269, 0x126C126B, 0x126E126D, 0x1270126F, 0x12721271, 0x12741273, 0x12761275, 0x12781277, 0x127A1279, 0x127C127B, 0x127E127D, 0x1280127F, 0x12821281, 0x12841283, 0x12861285, 0x12881287, 0x128A1289, 0x128C128B, 0x128E128D, 0x1290128F, 0x12921291, 0x12941293, 0x12961295, 0x12981297, 0x129A1299, 0x129C129B, 0x129E129D, 0x12A0129F, 0x12A212A1, 0x12A412A3, 0x12A612A5, 0x12A812A7, 0x12AA12A9, 0x12AC12AB, 0x12AE12AD, 0x12B012AF, 0x12B212B1, 0x12B412B3, 0x12B612B5, 0x12B812B7, 0x12BA12B9, 0x12BC12BB, 0x12BE12BD, 0x12C012BF, 0x12C212C1, 0x12C412C3, 0x12C612C5, 0x12C812C7, 0x12CA12C9, 0x12CC12CB, 0x12CE12CD, 0x12D012CF, 0x12D212D1, 0x12D412D3, 0x12D612D5, 0x12D812D7, 0x12DA12D9, 0x12DC12DB, 0x12DE12DD, 0x12E012DF, 0x12E212E1, 0x12E412E3, 0x12E612E5, 0x12E812E7, 0x12EA12E9, 0x12EC12EB, 0x12EE12ED, 0x12F012EF, 0x12F212F1, 0x12F412F3, 0x12F612F5, 0x12F812F7, 0x12FA12F9, 0x12FC12FB, 0x12FE12FD, 0x130012FF, 0x13021301, 0x13041303, 0x13061305, 0x13081307, 0x130A1309, 0x130C130B, 0x130E130D, 0x1310130F, 0x13121311, 0x13141313, 0x13161315, 0x13181317, 0x131A1319, 0x131C131B, 0x131E131D, 0x1320131F, 0x13221321, 0x13241323, 0x13261325, 0x13281327, 0x132A1329, 0x132C132B, 0x132E132D, 0x1330132F, 0x13321331, 0x13341333, 0x13361335, 0x13381337, 0x133A1339, 0x133C133B, 0x133E133D, 0x1340133F, 0x13421341, 0x13441343, 0x13461345, 0x13481347, 0x134A1349, 0x134C134B, 0x134E134D, 0x1350134F, 0x13521351, 0x13541353, 0x13561355, 0x13581357, 0x135A1359, 0x135C135B, 0x135E135D, 0x1360135F, 0x13621361, 0x13641363, 0x13661365, 0x13681367, 0x136A1369, 0x136C136B, 0x136E136D, 0x1370136F, 0x13721371, 0x13741373, 0x13761375, 0x13781377, 0x137A1379, 0x137C137B, 0x137E137D, 0x1380137F, 0x13821381, 0x13841383, 0x13861385, 0x13881387, 0x138A1389, 0x138C138B, 0x138E138D, 0x1390138F, 0x13921391, 0x13941393, 0x13961395, 0x13981397, 0x139A1399, 0x139C139B, 0x139E139D, 0x13A0139F, 0x13A213A1, 0x13A413A3, 0x13A613A5, 0x13A813A7, 0x13AA13A9, 0x13AC13AB, 0x13AE13AD, 0x13B013AF, 0x13B213B1, 0x13B413B3, 0x13B613B5, 0x13B813B7, 0x13BA13B9, 0x13BC13BB, 0x13BE13BD, 0x13C013BF, 0x13C213C1, 0x13C413C3, 0x13C613C5, 0x13C813C7, 0x13CA13C9, 0x13CC13CB, 0x13CE13CD, 0x13D013CF, 0x13D213D1, 0x13D413D3, 0x13D613D5, 0x13D813D7, 0x13DA13D9, 0x13DC13DB, 0x13DE13DD, 0x13E013DF, 0x13E213E1, 0x13E413E3, 0x13E613E5, 0x13E813E7, 0x13EA13E9, 0x13EC13EB, 0x13EE13ED, 0x13F013EF, 0x13F213F1, 0x13F413F3, 0x13F613F5, 0x13F813F7, 0x13FA13F9, 0x13FC13FB, 0x13FE13FD, 0x140013FF };

	u32 B2[2560];
	matrix_AS_mult(A2, S2, B2);
#endif

	// ------ Test Shake function ------
#if ENABLE_TEST_SHAKE
	unsigned long long ullInlen = 509;
	unsigned char ucShakeIn[9736] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
	0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
	0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
	0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
	0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
	0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
	unsigned long long ullOutlen = 406;
	unsigned char ucShakeOut[20608];
	unsigned char ucShakeOut[20608];

	print_debug(DEBUG_TEST_KEM, "Testing shake inlen: %llu | outlen: %llu\n", ullInlen, ullOutlen);

	shake128(&ucShakeOutSw[0], ullOutlen, ucShakeIn, ullInlen);
//	print_debug(DEBUG_TEST_KEM, "\nucShakeOut SW: ");
//	for (int i = 0; i < ullOutlen; i++)
//		print_debug(DEBUG_TEST_KEM, " 0x%02x ", ucShakeOutSw[i]);
//	print_debug(DEBUG_TEST_KEM, "\n");

	shake128_hw(&ucShakeOutHw[0], ullOutlen, ucShakeIn, ullInlen);
//	print_debug(DEBUG_TEST_KEM, "\nucShakeOut HW: ");
//	for (int i = 0; i < ullOutlen; i++)
//		print_debug(DEBUG_TEST_KEM, " 0x%02x ", ucShakeOutHw[i]);
//	print_debug(DEBUG_TEST_KEM, "\n");

	//Check error
	int err = my_memcmp(&ucShakeOutSw[0], &ucShakeOutHw[0], (int)ullOutlen);
	if(err != 0)
	{
		print_debug(DEBUG_TEST_KEM, "SHAKE error with ullOutlen = %llu\n", ullOutlen);
		exit(0);
	}

#endif
#endif

#if ENABLE_KEM_TEST
	// ------ KEM test ------
	uint8_t pk[CRYPTO_PUBLICKEYBYTES];
	uint8_t sk[CRYPTO_SECRETKEYBYTES];
	uint8_t ss_encap[CRYPTO_BYTES], ss_decap[CRYPTO_BYTES];
	uint8_t ct[CRYPTO_CIPHERTEXTBYTES];

	print_debug(DEBUG_TEST_KEM, "\n");
	print_debug(DEBUG_TEST_KEM, "=============================================================================================================================\n");
	print_debug(DEBUG_TEST_KEM, "Testing correctness of key encapsulation mechanism (KEM), system %s, tests for %d iterations\n", named_parameters, iterations);
	print_debug(DEBUG_TEST_KEM, "=============================================================================================================================\n");

	for (int i = 0; i < iterations; i++)
	{
		codeFeaturesType = KECCAK_SW_MATRIX_SA_SW_AS_SW;

		t_keypair_keccak_sw_matrix_sa_sw_as_sw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_keccak_sw_matrix_sa_sw_as_sw = get_cyclecount() - t_keypair_keccak_sw_matrix_sa_sw_as_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using Keccak SW and Matrix SA_SW AS_SW took exactly %d cycles or %d us (including function call)\n", t_keypair_keccak_sw_matrix_sa_sw_as_sw, (t_keypair_keccak_sw_matrix_sa_sw_as_sw)/666);

		t_enc_keccak_sw_matrix_sa_sw_as_sw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_keccak_sw_matrix_sa_sw_as_sw = get_cyclecount() - t_enc_keccak_sw_matrix_sa_sw_as_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using using Keccak SW and Matrix SA_SW AS_SW took exactly %d cycles or %d us (including function call)\n", t_enc_keccak_sw_matrix_sa_sw_as_sw, (t_enc_keccak_sw_matrix_sa_sw_as_sw)/666);

		t_dec_keccak_sw_matrix_sa_sw_as_sw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_keccak_sw_matrix_sa_sw_as_sw = get_cyclecount() - t_dec_keccak_sw_matrix_sa_sw_as_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using using Keccak SW and Matrix SA_SW AS_SW took exactly %d cycles or %d us (including function call)\n", t_dec_keccak_sw_matrix_sa_sw_as_sw, (t_dec_keccak_sw_matrix_sa_sw_as_sw)/666);

		//Total sw time
		t_total_keccak_sw_matrix_sa_sw_as_sw = t_keypair_keccak_sw_matrix_sa_sw_as_sw + t_enc_keccak_sw_matrix_sa_sw_as_sw + t_dec_keccak_sw_matrix_sa_sw_as_sw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using Keccak SW and Matrix SA_SW AS_SW is %d cycles or %d us (including function call)\n", t_total_keccak_sw_matrix_sa_sw_as_sw, (t_total_keccak_sw_matrix_sa_sw_as_sw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Keccak SW and matrix SA_SW AS_SW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] Keccak SW and matrix SA_SW AS_SW ERROR!\n");
			return false;
		}

		codeFeaturesType = KECCAK_HW_MM_MATRIX_SA_SW_AS_SW;

		t_keypair_keccak_hw_mm_matrix_sa_sw_as_sw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_keccak_hw_mm_matrix_sa_sw_as_sw = get_cyclecount() - t_keypair_keccak_hw_mm_matrix_sa_sw_as_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using Keccak HW_MM and Matrix SA_SW AS_SW took exactly %d cycles or %d us (including function call)\n", t_keypair_keccak_hw_mm_matrix_sa_sw_as_sw, (t_keypair_keccak_hw_mm_matrix_sa_sw_as_sw)/666);

		t_enc_keccak_hw_mm_matrix_sa_sw_as_sw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_keccak_hw_mm_matrix_sa_sw_as_sw = get_cyclecount() - t_enc_keccak_hw_mm_matrix_sa_sw_as_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using Keccak HW_MM and Matrix SA_SW AS_SW took exactly %d cycles or %d us (including function call)\n", t_enc_keccak_hw_mm_matrix_sa_sw_as_sw, (t_enc_keccak_hw_mm_matrix_sa_sw_as_sw)/666);

		t_dec_keccak_hw_mm_matrix_sa_sw_as_sw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_keccak_hw_mm_matrix_sa_sw_as_sw = get_cyclecount() - t_dec_keccak_hw_mm_matrix_sa_sw_as_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using Keccak HW_MM and Matrix SA_SW AS_SW took exactly %d cycles or %d us (including function call)\n", t_dec_keccak_hw_mm_matrix_sa_sw_as_sw, (t_dec_keccak_hw_mm_matrix_sa_sw_as_sw)/666);

		//Total hw time
		t_total_keccak_hw_mm_matrix_sa_sw_as_sw = t_keypair_keccak_hw_mm_matrix_sa_sw_as_sw + t_enc_keccak_hw_mm_matrix_sa_sw_as_sw + t_dec_keccak_hw_mm_matrix_sa_sw_as_sw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using Keccak HW_MM and Matrix SA_SW AS_SW is %d cycles or %d us (including function call)\n", t_total_keccak_hw_mm_matrix_sa_sw_as_sw, (t_total_keccak_hw_mm_matrix_sa_sw_as_sw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Keccak HW_MM and Matrix SA_SW AS_SW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] Keccak HW_MM and matrix SA_SW AS_SW ERROR!\n");
			return false;
		}

		codeFeaturesType = KECCAK_SW_MATRIX_SA_HW_AS_SW;

		t_keypair_keccak_sw_matrix_sa_hw_as_sw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_keccak_sw_matrix_sa_hw_as_sw = get_cyclecount() - t_keypair_keccak_sw_matrix_sa_hw_as_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using Keccak SW and Matrix SA_HW AS_SW took exactly %d cycles or %d us (including function call)\n", t_keypair_keccak_sw_matrix_sa_hw_as_sw, (t_keypair_keccak_sw_matrix_sa_hw_as_sw)/666);

		t_enc_keccak_sw_matrix_sa_hw_as_sw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_keccak_sw_matrix_sa_hw_as_sw = get_cyclecount() - t_enc_keccak_sw_matrix_sa_hw_as_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using using Keccak SW and Matrix SA_HW AS_SW took exactly %d cycles or %d us (including function call)\n", t_enc_keccak_sw_matrix_sa_hw_as_sw, (t_enc_keccak_sw_matrix_sa_hw_as_sw)/666);

		t_dec_keccak_sw_matrix_sa_hw_as_sw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_keccak_sw_matrix_sa_hw_as_sw = get_cyclecount() - t_dec_keccak_sw_matrix_sa_hw_as_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using using Keccak SW and Matrix SA_HW AS_SW took exactly %d cycles or %d us (including function call)\n", t_dec_keccak_sw_matrix_sa_hw_as_sw, (t_dec_keccak_sw_matrix_sa_hw_as_sw)/666);

		//Total sw time
		t_total_keccak_sw_matrix_sa_hw_as_sw = t_keypair_keccak_sw_matrix_sa_hw_as_sw + t_enc_keccak_sw_matrix_sa_hw_as_sw + t_dec_keccak_sw_matrix_sa_hw_as_sw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using Keccak SW and Matrix SA_HW AS_SW is %d cycles or %d us (including function call)\n", t_total_keccak_sw_matrix_sa_hw_as_sw, (t_total_keccak_sw_matrix_sa_hw_as_sw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Keccak SW and matrix SA_HW AS_SW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] Keccak SW and matrix SA_HW AS_SW ERROR!\n");
			return false;
		}

		codeFeaturesType = KECCAK_HW_MM_MATRIX_SA_HW_AS_SW;

		t_keypair_keccak_hw_mm_matrix_sa_hw_as_sw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_keccak_hw_mm_matrix_sa_hw_as_sw = get_cyclecount() - t_keypair_keccak_hw_mm_matrix_sa_hw_as_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using Keccak HW_MM and Matrix SA_HW AS_SW took exactly %d cycles or %d us (including function call)\n", t_keypair_keccak_hw_mm_matrix_sa_hw_as_sw, (t_keypair_keccak_hw_mm_matrix_sa_hw_as_sw)/666);

		t_enc_keccak_hw_mm_matrix_sa_hw_as_sw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_keccak_hw_mm_matrix_sa_hw_as_sw = get_cyclecount() - t_enc_keccak_hw_mm_matrix_sa_hw_as_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using using Keccak HW_MM and Matrix SA_HW AS_SW took exactly %d cycles or %d us (including function call)\n", t_enc_keccak_hw_mm_matrix_sa_hw_as_sw, (t_enc_keccak_hw_mm_matrix_sa_hw_as_sw)/666);

		t_dec_keccak_hw_mm_matrix_sa_hw_as_sw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_keccak_hw_mm_matrix_sa_hw_as_sw = get_cyclecount() - t_dec_keccak_hw_mm_matrix_sa_hw_as_sw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using using Keccak HW_MM and Matrix SA_HW AS_SW took exactly %d cycles or %d us (including function call)\n", t_dec_keccak_hw_mm_matrix_sa_hw_as_sw, (t_dec_keccak_hw_mm_matrix_sa_hw_as_sw)/666);

		//Total sw time
		t_total_keccak_hw_mm_matrix_sa_hw_as_sw = t_keypair_keccak_hw_mm_matrix_sa_hw_as_sw + t_enc_keccak_hw_mm_matrix_sa_hw_as_sw + t_dec_keccak_hw_mm_matrix_sa_hw_as_sw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using Keccak HW_MM and Matrix SA_HW AS_SW is %d cycles or %d us (including function call)\n", t_total_keccak_hw_mm_matrix_sa_hw_as_sw, (t_total_keccak_hw_mm_matrix_sa_hw_as_sw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Keccak HW_MM and matrix SA_HW AS_SW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] Keccak HW_MM and matrix SA_HW AS_SW ERROR!\n");
			return false;
		}

		codeFeaturesType = KECCAK_SW_MATRIX_SA_SW_AS_HW;

		t_keypair_keccak_sw_matrix_sa_sw_as_hw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_keccak_sw_matrix_sa_sw_as_hw = get_cyclecount() - t_keypair_keccak_sw_matrix_sa_sw_as_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using Keccak SW and Matrix SA_SW AS_HW took exactly %d cycles or %d us (including function call)\n", t_keypair_keccak_sw_matrix_sa_sw_as_hw, (t_keypair_keccak_sw_matrix_sa_sw_as_hw)/666);

		t_enc_keccak_sw_matrix_sa_sw_as_hw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_keccak_sw_matrix_sa_sw_as_hw = get_cyclecount() - t_enc_keccak_sw_matrix_sa_sw_as_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using using Keccak SW and Matrix SA_SW AS_HW took exactly %d cycles or %d us (including function call)\n", t_enc_keccak_sw_matrix_sa_sw_as_hw, (t_enc_keccak_sw_matrix_sa_sw_as_hw)/666);

		t_dec_keccak_sw_matrix_sa_sw_as_hw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_keccak_sw_matrix_sa_sw_as_hw = get_cyclecount() - t_dec_keccak_sw_matrix_sa_sw_as_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using using Keccak SW and Matrix SA_SW AS_HW took exactly %d cycles or %d us (including function call)\n", t_dec_keccak_sw_matrix_sa_sw_as_hw, (t_dec_keccak_sw_matrix_sa_sw_as_hw)/666);

		//Total sw time
		t_total_keccak_sw_matrix_sa_sw_as_hw = t_keypair_keccak_sw_matrix_sa_sw_as_hw + t_enc_keccak_sw_matrix_sa_sw_as_hw + t_dec_keccak_sw_matrix_sa_sw_as_hw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using Keccak SW and Matrix SA_SW AS_HW is %d cycles or %d us (including function call)\n", t_total_keccak_sw_matrix_sa_sw_as_hw, (t_total_keccak_sw_matrix_sa_sw_as_hw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Keccak SW and matrix SA_SW AS_HW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] Keccak SW and matrix SA_SW AS_HW ERROR!\n");
			return false;
		}

		codeFeaturesType = KECCAK_HW_MM_MATRIX_SA_SW_AS_HW;

		t_keypair_keccak_hw_mm_matrix_sa_sw_as_hw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_keccak_hw_mm_matrix_sa_sw_as_hw = get_cyclecount() - t_keypair_keccak_hw_mm_matrix_sa_sw_as_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using Keccak HW_MM and Matrix SA_SW AS_HW took exactly %d cycles or %d us (including function call)\n", t_keypair_keccak_hw_mm_matrix_sa_sw_as_hw, (t_keypair_keccak_hw_mm_matrix_sa_sw_as_hw)/666);

		t_enc_keccak_hw_mm_matrix_sa_sw_as_hw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_keccak_hw_mm_matrix_sa_sw_as_hw = get_cyclecount() - t_enc_keccak_hw_mm_matrix_sa_sw_as_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using Keccak HW_MM and Matrix SA_SW AS_HW took exactly %d cycles or %d us (including function call)\n", t_enc_keccak_hw_mm_matrix_sa_sw_as_hw, (t_enc_keccak_hw_mm_matrix_sa_sw_as_hw)/666);

		t_dec_keccak_hw_mm_matrix_sa_sw_as_hw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_keccak_hw_mm_matrix_sa_sw_as_hw = get_cyclecount() - t_dec_keccak_hw_mm_matrix_sa_sw_as_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using Keccak HW_MM and Matrix SA_SW AS_HW took exactly %d cycles or %d us (including function call)\n", t_dec_keccak_hw_mm_matrix_sa_sw_as_hw, (t_dec_keccak_hw_mm_matrix_sa_sw_as_hw)/666);

		//Total hw time
		t_total_keccak_hw_mm_matrix_sa_sw_as_hw = t_keypair_keccak_hw_mm_matrix_sa_sw_as_hw + t_enc_keccak_hw_mm_matrix_sa_sw_as_hw + t_dec_keccak_hw_mm_matrix_sa_sw_as_hw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using Keccak HW_MM and Matrix SA_SW AS_HW is %d cycles or %d us (including function call)\n", t_total_keccak_hw_mm_matrix_sa_sw_as_hw, (t_total_keccak_hw_mm_matrix_sa_sw_as_hw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Keccak HW_MM and Matrix SA_SW AS_HW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] Keccak HW_MM and matrix SA_SW AS_HW ERROR!\n");
			return false;
		}

		codeFeaturesType = KECCAK_SW_MATRIX_SA_HW_AS_HW;

		t_keypair_keccak_sw_matrix_sa_hw_as_hw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_keccak_sw_matrix_sa_hw_as_hw = get_cyclecount() - t_keypair_keccak_sw_matrix_sa_hw_as_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using Keccak SW and Matrix SA_HW AS_HW took exactly %d cycles or %d us (including function call)\n", t_keypair_keccak_sw_matrix_sa_hw_as_hw, (t_keypair_keccak_sw_matrix_sa_hw_as_hw)/666);

		t_enc_keccak_sw_matrix_sa_hw_as_hw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_keccak_sw_matrix_sa_hw_as_hw = get_cyclecount() - t_enc_keccak_sw_matrix_sa_hw_as_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using using Keccak SW and Matrix SA_HW AS_HW took exactly %d cycles or %d us (including function call)\n", t_enc_keccak_sw_matrix_sa_hw_as_hw, (t_enc_keccak_sw_matrix_sa_hw_as_hw)/666);

		t_dec_keccak_sw_matrix_sa_hw_as_hw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_keccak_sw_matrix_sa_hw_as_hw = get_cyclecount() - t_dec_keccak_sw_matrix_sa_hw_as_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using using Keccak SW and Matrix SA_HW AS_HW took exactly %d cycles or %d us (including function call)\n", t_dec_keccak_sw_matrix_sa_hw_as_hw, (t_dec_keccak_sw_matrix_sa_hw_as_hw)/666);

		//Total sw time
		t_total_keccak_sw_matrix_sa_hw_as_hw = t_keypair_keccak_sw_matrix_sa_hw_as_hw + t_enc_keccak_sw_matrix_sa_hw_as_hw + t_dec_keccak_sw_matrix_sa_hw_as_hw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using Keccak SW and Matrix SA_HW AS_HW is %d cycles or %d us (including function call)\n", t_total_keccak_sw_matrix_sa_hw_as_hw, (t_total_keccak_sw_matrix_sa_hw_as_hw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Keccak SW and matrix SA_HW AS_HW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] Keccak SW and matrix SA_HW AS_HW ERROR!\n");
			return false;
		}

		codeFeaturesType = KECCAK_HW_MM_MATRIX_SA_HW_AS_HW;

		t_keypair_keccak_hw_mm_matrix_sa_hw_as_hw = get_cyclecount();
		crypto_kem_keypair(pk, sk);
		t_keypair_keccak_hw_mm_matrix_sa_hw_as_hw = get_cyclecount() - t_keypair_keccak_hw_mm_matrix_sa_hw_as_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_keypair using Keccak HW_MM and Matrix SA_HW AS_HW took exactly %d cycles or %d us (including function call)\n", t_keypair_keccak_hw_mm_matrix_sa_hw_as_hw, (t_keypair_keccak_hw_mm_matrix_sa_hw_as_hw)/666);

		t_enc_keccak_hw_mm_matrix_sa_hw_as_hw = get_cyclecount();
		crypto_kem_enc(ct, ss_encap, pk);
		t_enc_keccak_hw_mm_matrix_sa_hw_as_hw = get_cyclecount() - t_enc_keccak_hw_mm_matrix_sa_hw_as_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_enc using using Keccak HW_MM and Matrix SA_HW AS_HW took exactly %d cycles or %d us (including function call)\n", t_enc_keccak_hw_mm_matrix_sa_hw_as_hw, (t_enc_keccak_hw_mm_matrix_sa_hw_as_hw)/666);

		t_dec_keccak_hw_mm_matrix_sa_hw_as_hw = get_cyclecount();
		crypto_kem_dec(ss_decap, ct, sk);
		t_dec_keccak_hw_mm_matrix_sa_hw_as_hw = get_cyclecount() - t_dec_keccak_hw_mm_matrix_sa_hw_as_hw - overhead;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Crypto_kem_dec using using Keccak HW_MM and Matrix SA_HW AS_HW took exactly %d cycles or %d us (including function call)\n", t_dec_keccak_hw_mm_matrix_sa_hw_as_hw, (t_dec_keccak_hw_mm_matrix_sa_hw_as_hw)/666);

		//Total sw time
		t_total_keccak_hw_mm_matrix_sa_hw_as_hw = t_keypair_keccak_hw_mm_matrix_sa_hw_as_hw + t_enc_keccak_hw_mm_matrix_sa_hw_as_hw + t_dec_keccak_hw_mm_matrix_sa_hw_as_hw;
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Total time using Keccak HW_MM and Matrix SA_HW AS_HW is %d cycles or %d us (including function call)\n", t_total_keccak_hw_mm_matrix_sa_hw_as_hw, (t_total_keccak_hw_mm_matrix_sa_hw_as_hw)/666);
		print_debug(DEBUG_TEST_KEM, "[TEST_KEM] Keccak HW_MM and matrix SA_HW AS_HW tests PASSED. All session keys matched.\n");
		print_debug(DEBUG_TEST_KEM, "\n");

		if (memcmp(ss_encap, ss_decap, CRYPTO_BYTES) != 0) {
			print_debug(DEBUG_ERROR, "[TEST_KEM] Keccak HW_MM and matrix SA_HW AS_HW ERROR!\n");
			return false;
		}

		//Table
		float fRelativeKeccakHwMMMatrixSaSwAsSw = 100.0-(t_total_keccak_hw_mm_matrix_sa_sw_as_sw/(float)t_total_keccak_sw_matrix_sa_sw_as_sw)*100.0;
		u32 wholeKeccakHwMMMatrixSaSwAsSw, thousandthsKeccakHwMMMatrixSaSwAsSw;
		wholeKeccakHwMMMatrixSaSwAsSw = fRelativeKeccakHwMMMatrixSaSwAsSw;
		thousandthsKeccakHwMMMatrixSaSwAsSw = (fRelativeKeccakHwMMMatrixSaSwAsSw - wholeKeccakHwMMMatrixSaSwAsSw) * 1000;
		float fRelativeKeccakSwMatrixSaHwAsSw = 100.0-(t_total_keccak_sw_matrix_sa_hw_as_sw/(float)t_total_keccak_sw_matrix_sa_sw_as_sw)*100.0;
		u32 wholeKeccakSwMatrixSaHwAsSw, thousandthsKeccakSwMatrixSaHwAsSw;
		wholeKeccakSwMatrixSaHwAsSw = fRelativeKeccakSwMatrixSaHwAsSw;
		thousandthsKeccakSwMatrixSaHwAsSw = (fRelativeKeccakSwMatrixSaHwAsSw - wholeKeccakSwMatrixSaHwAsSw) * 1000;
		float fRelativeKeccakHwMMMatrixSaHwAsSw = 100.0-(t_total_keccak_hw_mm_matrix_sa_hw_as_sw/(float)t_total_keccak_sw_matrix_sa_sw_as_sw)*100.0;
		u32 wholeKeccakHwMMMatrixSaHwAsSw, thousandthsKeccakHwMMMatrixSaHwAsSw;
		wholeKeccakHwMMMatrixSaHwAsSw = fRelativeKeccakHwMMMatrixSaHwAsSw;
		thousandthsKeccakHwMMMatrixSaHwAsSw = (fRelativeKeccakHwMMMatrixSaHwAsSw - wholeKeccakHwMMMatrixSaHwAsSw) * 1000;

		float fRelativeKeccakSwMatrixSaSwAsHw = 100.0-(t_total_keccak_sw_matrix_sa_sw_as_hw/(float)t_total_keccak_sw_matrix_sa_sw_as_sw)*100.0;
		u32 wholeKeccakSwMatrixSaSwAsHw, thousandthsKeccakSwMatrixSaSwAsHw;
		wholeKeccakSwMatrixSaSwAsHw = fRelativeKeccakSwMatrixSaSwAsHw;
		thousandthsKeccakSwMatrixSaSwAsHw = (fRelativeKeccakSwMatrixSaSwAsHw - wholeKeccakSwMatrixSaSwAsHw) * 1000;
		float fRelativeKeccakHwMMMatrixSaSwAsHw = 100.0-(t_total_keccak_hw_mm_matrix_sa_sw_as_hw/(float)t_total_keccak_sw_matrix_sa_sw_as_sw)*100.0;
		u32 wholeKeccakHwMMMatrixSaSwAsHw, thousandthsKeccakHwMMMatrixSaSwAsHw;
		wholeKeccakHwMMMatrixSaSwAsHw = fRelativeKeccakHwMMMatrixSaSwAsHw;
		thousandthsKeccakHwMMMatrixSaSwAsHw = (fRelativeKeccakHwMMMatrixSaSwAsHw - wholeKeccakHwMMMatrixSaSwAsHw) * 1000;
		float fRelativeKeccakSwMatrixSaHwAsHw = 100.0-(t_total_keccak_sw_matrix_sa_hw_as_hw/(float)t_total_keccak_sw_matrix_sa_sw_as_sw)*100.0;
		u32 wholeKeccakSwMatrixSaHwAsHw, thousandthsKeccakSwMatrixSaHwAsHw;
		wholeKeccakSwMatrixSaHwAsHw = fRelativeKeccakSwMatrixSaHwAsHw;
		thousandthsKeccakSwMatrixSaHwAsHw = (fRelativeKeccakSwMatrixSaHwAsHw - wholeKeccakSwMatrixSaHwAsHw) * 1000;
		float fRelativeKeccakHwMMMatrixSaHwAsHw = 100.0-(t_total_keccak_hw_mm_matrix_sa_hw_as_hw/(float)t_total_keccak_sw_matrix_sa_sw_as_sw)*100.0;
		u32 wholeKeccakHwMMMatrixSaHwAsHw, thousandthsKeccakHwMMMatrixSaHwAsHw;
		wholeKeccakHwMMMatrixSaHwAsHw = fRelativeKeccakHwMMMatrixSaHwAsHw;
		thousandthsKeccakHwMMMatrixSaHwAsHw = (fRelativeKeccakHwMMMatrixSaHwAsHw - wholeKeccakHwMMMatrixSaHwAsHw) * 1000;

		print_debug(DEBUG_TEST_KEM, "------------------------------------------------------------ Total time and performance ---------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\tKeccak\t\t|\t\t\tMatrix\t\t\t|\t\tkey pair (us) \t\t|\t encryption (us) \t|\t decryption (us) \t\t|\t\t total (us) \t\t|\t Improvement (%c) \n", 37);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t  SW  \t\t|\t SA_SW AS_SW  \t|\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t\t\t -\n", t_keypair_keccak_sw_matrix_sa_sw_as_sw/666, t_enc_keccak_sw_matrix_sa_sw_as_sw/666, t_dec_keccak_sw_matrix_sa_sw_as_sw/666, t_total_keccak_sw_matrix_sa_sw_as_sw/666);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t HW MM\t\t|\t SA_SW AS_SW  \t|\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t\t %lu.%03lu\n", t_keypair_keccak_hw_mm_matrix_sa_sw_as_sw/666, t_enc_keccak_hw_mm_matrix_sa_sw_as_sw/666, t_dec_keccak_hw_mm_matrix_sa_sw_as_sw/666, t_total_keccak_hw_mm_matrix_sa_sw_as_sw/666, wholeKeccakHwMMMatrixSaSwAsSw, thousandthsKeccakHwMMMatrixSaSwAsSw);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t  SW  \t\t|\t SA_HW AS_SW  \t|\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t\t %lu.%03lu\n", t_keypair_keccak_sw_matrix_sa_hw_as_sw/666, t_enc_keccak_sw_matrix_sa_hw_as_sw/666, t_dec_keccak_sw_matrix_sa_hw_as_sw/666, t_total_keccak_sw_matrix_sa_hw_as_sw/666, wholeKeccakSwMatrixSaHwAsSw, thousandthsKeccakSwMatrixSaHwAsSw);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t HW MM\t\t|\t SA_HW AS_SW  \t|\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t\t %lu.%03lu\n", t_keypair_keccak_hw_mm_matrix_sa_hw_as_sw/666, t_enc_keccak_hw_mm_matrix_sa_hw_as_sw/666, t_dec_keccak_hw_mm_matrix_sa_hw_as_sw/666, t_total_keccak_hw_mm_matrix_sa_hw_as_sw/666, wholeKeccakHwMMMatrixSaHwAsSw, thousandthsKeccakHwMMMatrixSaHwAsSw);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t  SW  \t\t|\t SA_SW AS_HW  \t|\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t\t %lu.%03lu\n", t_keypair_keccak_sw_matrix_sa_sw_as_hw/666, t_enc_keccak_sw_matrix_sa_sw_as_hw/666, t_dec_keccak_sw_matrix_sa_sw_as_hw/666, t_total_keccak_sw_matrix_sa_sw_as_hw/666, wholeKeccakSwMatrixSaSwAsHw, thousandthsKeccakSwMatrixSaSwAsHw);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t HW MM\t\t|\t SA_SW AS_HW  \t|\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t\t %lu.%03lu\n", t_keypair_keccak_hw_mm_matrix_sa_sw_as_hw/666, t_enc_keccak_hw_mm_matrix_sa_sw_as_hw/666, t_dec_keccak_hw_mm_matrix_sa_sw_as_hw/666, t_total_keccak_hw_mm_matrix_sa_sw_as_hw/666, wholeKeccakHwMMMatrixSaSwAsHw, thousandthsKeccakHwMMMatrixSaSwAsHw);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t  SW  \t\t|\t SA_HW AS_HW  \t|\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t\t %lu.%03lu\n", t_keypair_keccak_sw_matrix_sa_hw_as_hw/666, t_enc_keccak_sw_matrix_sa_hw_as_hw/666, t_dec_keccak_sw_matrix_sa_hw_as_hw/666, t_total_keccak_sw_matrix_sa_hw_as_hw/666, wholeKeccakSwMatrixSaHwAsHw, thousandthsKeccakSwMatrixSaHwAsHw);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t HW MM\t\t|\t SA_HW AS_HW  \t|\t\t\t %d \t\t|\t\t\t %d \t\t|\t\t\t %d \t\t\t|\t\t %d \t\t|\t\t\t %lu.%03lu\n", t_keypair_keccak_hw_mm_matrix_sa_hw_as_hw/666, t_enc_keccak_hw_mm_matrix_sa_hw_as_hw/666, t_dec_keccak_hw_mm_matrix_sa_hw_as_hw/666, t_total_keccak_hw_mm_matrix_sa_hw_as_hw/666, wholeKeccakHwMMMatrixSaHwAsHw, thousandthsKeccakHwMMMatrixSaHwAsHw);
		print_debug(DEBUG_TEST_KEM, "----------------------------------------------------------------------------------------------------------------------------------------------------\n\n");

#if ENABLE_SW_TIMER
		float fRelativeKeccak = 100.0-(t_keccak_hw_acc/(float)t_keccak_sw_acc)*100.0;
		u32 wholeKeccak, thousandthsKeccak;
		wholeKeccak = fRelativeKeccak;
		thousandthsKeccak = (fRelativeKeccak - wholeKeccak) * 1000;
		float fRelativeMatrixSa = 100.0-(t_matrix_sa_hw_acc/(float)t_matrix_sa_sw_acc)*100.0;
		u32 wholeMatrixSa, thousandthsMatrixSa;
		wholeMatrixSa = fRelativeMatrixSa;
		thousandthsMatrixSa = (fRelativeMatrixSa - wholeMatrixSa) * 1000;
		float fRelativeMatrixAs = 100.0-(t_matrix_as_hw_acc/(float)t_matrix_as_sw_acc)*100.0;
		u32 wholeMatrixAs, thousandthsMatrixAs;
		wholeMatrixAs = fRelativeMatrixAs;
		thousandthsMatrixAs = (fRelativeMatrixAs - wholeMatrixAs) * 1000;
//		print_debug(DEBUG_TEST_KEM, "\tt_keccak_sw_acc: %lu cycles or %lu us\n", t_keccak_sw_acc, (t_keccak_sw_acc)/666);
//		print_debug(DEBUG_TEST_KEM, "\tt_keccak_hw_acc: %lu cycles or %lu us\n", t_keccak_hw_acc, (t_keccak_hw_acc)/666);
//		print_debug(DEBUG_TEST_KEM, "\tt_keccak (%c): %lu.%03lu\n", 37, wholeKeccak, thousandthsKeccak);
//		print_debug(DEBUG_TEST_KEM, "\tt_matrix_sa_sw_acc: %lu cycles or %lu us\n", t_matrix_sa_sw_acc, (t_matrix_sa_sw_acc)/666);
//		print_debug(DEBUG_TEST_KEM, "\tt_matrix_sa_hw_acc: %lu cycles or %lu us\n", t_matrix_sa_hw_acc, (t_matrix_sa_hw_acc)/666);
//		print_debug(DEBUG_TEST_KEM, "\tt_matrix_sa (%c): %lu.%03lu\n", 37, wholeMatrixSa, thousandthsMatrixSa);
//		print_debug(DEBUG_TEST_KEM, "\tt_matrix_as_sw_acc: %lu cycles or %lu us\n", t_matrix_as_sw_acc, (t_matrix_as_sw_acc)/666);
//		print_debug(DEBUG_TEST_KEM, "\tt_matrix_as_hw_acc: %lu cycles or %lu us\n", t_matrix_as_hw_acc, (t_matrix_as_hw_acc)/666);
//		print_debug(DEBUG_TEST_KEM, "\tt_matrix_as (%c): %lu.%03lu\n", 37, wholeMatrixAs, thousandthsMatrixAs);
//		print_debug(DEBUG_TEST_KEM, "\n\n");

		print_debug(DEBUG_TEST_KEM, "----------------------------- Function processing time -----------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\tAlgorithm\t\t|\t\tSW time (us)\t\t\t|\t\tHW time (us) \t\t|\t Improvement (%c) \n", 37);
		print_debug(DEBUG_TEST_KEM, "--------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t  Keccak  \t\t|\t\t   %d   \t\t\t|\t\t\t%d  \t\t\t|\t\t\t%lu.%03lu\n", (t_keccak_sw_acc)/666, (t_keccak_hw_acc)/666, wholeKeccak, thousandthsKeccak);
		print_debug(DEBUG_TEST_KEM, "--------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t Matrix SA\t\t|\t\t   %d   \t\t\t|\t\t\t%d  \t\t\t|\t\t\t%lu.%03lu\n", (t_matrix_sa_sw_acc)/666, (t_matrix_sa_hw_acc)/666, wholeMatrixSa, thousandthsMatrixSa);
		print_debug(DEBUG_TEST_KEM, "--------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t Matrix AS\t\t|\t\t   %d   \t\t\t|\t\t\t%d  \t\t\t|\t\t\t%lu.%03lu\n", (t_matrix_as_sw_acc)/666, (t_matrix_as_hw_acc)/666, wholeMatrixAs, thousandthsMatrixAs);
		print_debug(DEBUG_TEST_KEM, "--------------------------------------------------------------------------------------------\n\n");
#endif

#if ENABLE_HW_TIMER
		float fRelativeKeccakTime = (readTimerKeccakProc/(float)readTimerKeccakTotal)*100.0;
		u32 wholeKeccakHW, thousandthsKeccakHW;
		wholeKeccakHW = fRelativeKeccakTime;
		thousandthsKeccakHW = (fRelativeKeccakTime - wholeKeccakHW) * 1000;
		float fRelativeMatrixSaTime = (readTimerMatrixSaProc/(float)readTimerMatrixSaTotal)*100.0;
		u32 wholeMatrixSaHW, thousandthsMatrixSaHW;
		wholeMatrixSaHW = fRelativeMatrixSaTime;
		thousandthsMatrixSaHW = (fRelativeMatrixSaTime - wholeMatrixSaHW) * 1000;
		float fRelativeMatrixAsTime = (readTimerMatrixAsProc/(float)readTimerMatrixAsTotal)*100.0;
		u32 wholeMatrixAsHW, thousandthsMatrixAsHW;
		wholeMatrixAsHW = fRelativeMatrixAsTime;
		thousandthsMatrixAsHW = (fRelativeMatrixAsTime - wholeMatrixAsHW) * 1000;
		print_debug(DEBUG_TEST_KEM, "--------------------------------- Hardware processing time analize ----------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\tAlgorithm\t\t|\t\t\tTotal time (ns)\t\t\t|\t\t\tProc time (ns) \t\t|\t Porcentage (%c) \n", 37);
		print_debug(DEBUG_TEST_KEM, "--------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t  Keccak  \t\t|\t\t\t\t   %d   \t\t\t\t|\t\t\t\t\t%d  \t\t\t\t|\t\t\t%lu.%03lu\n", (readTimerKeccakTotal/countKeccak), (readTimerKeccakProc/countKeccak), wholeKeccakHW, thousandthsKeccakHW);
		print_debug(DEBUG_TEST_KEM, "--------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t Matrix SA\t\t|\t\t\t   %d   \t\t\t|\t\t\t\t%d  \t\t\t|\t\t\t%lu.%03lu\n", (readTimerMatrixSaTotal/countMatrixSa), (readTimerMatrixSaProc/countMatrixSa), wholeMatrixSaHW, thousandthsMatrixSaHW);
		print_debug(DEBUG_TEST_KEM, "--------------------------------------------------------------------------------------------------\n");
		print_debug(DEBUG_TEST_KEM, "\t\t Matrix AS\t\t|\t\t\t   %d   \t\t\t|\t\t\t\t%d  \t\t\t|\t\t\t%lu.%03lu\n", (readTimerMatrixAsTotal/countMatrixAs), (readTimerMatrixAsProc/countMatrixAs), wholeMatrixAsHW, thousandthsMatrixAsHW);
		print_debug(DEBUG_TEST_KEM, "--------------------------------------------------------------------------------------------------\n\n");
#endif



	}
#endif

	return true;
}
